{"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/index.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":27},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":145}},"4":{"start":{"line":5,"column":92},"end":{"line":5,"column":139}},"5":{"start":{"line":6,"column":33},"end":{"line":6,"column":70}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":163}},"7":{"start":{"line":7,"column":98},"end":{"line":7,"column":157}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":78},"end":{"line":5,"column":79}},"loc":{"start":{"line":5,"column":90},"end":{"line":5,"column":141}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":84},"end":{"line":7,"column":85}},"loc":{"start":{"line":7,"column":96},"end":{"line":7,"column":159}},"line":7}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":25,"5":1,"6":1,"7":16},"f":{"0":25,"1":16},"b":{},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/index.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/index.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AAAhD,wHAAA,kBAAkB,OAAA;AAC1B,uEAAoE;AAA5D,oIAAA,wBAAwB,OAAA","sourcesContent":["export {NumberFieldChecker} from './numberFieldChecker';\nexport {BasicFieldTypeCalculator} from './basicFieldTypeCalculator';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2b4d4f7bc35ab5f2fdc5cb4f73c2590cac2a6d59","contentHash":"23e835ad598858eb893b022efb3a3c211cc38ccd9f940b8e71c542cb784c7de6"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/numberFieldChecker.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/numberFieldChecker.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"4":{"start":{"line":7,"column":15},"end":{"line":7,"column":38}},"5":{"start":{"line":8,"column":14},"end":{"line":8,"column":65}},"6":{"start":{"line":21,"column":21},"end":{"line":21,"column":26}},"7":{"start":{"line":22,"column":8},"end":{"line":28,"column":9}},"8":{"start":{"line":23,"column":24},"end":{"line":23,"column":42}},"9":{"start":{"line":24,"column":12},"end":{"line":27,"column":13}},"10":{"start":{"line":25,"column":16},"end":{"line":25,"column":30}},"11":{"start":{"line":26,"column":16},"end":{"line":26,"column":22}},"12":{"start":{"line":29,"column":8},"end":{"line":29,"column":22}},"13":{"start":{"line":39,"column":25},"end":{"line":39,"column":37}},"14":{"start":{"line":40,"column":26},"end":{"line":40,"column":50}},"15":{"start":{"line":42,"column":8},"end":{"line":49,"column":9}},"16":{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},"17":{"start":{"line":47,"column":16},"end":{"line":47,"column":53}},"18":{"start":{"line":50,"column":8},"end":{"line":50,"column":26}},"19":{"start":{"line":56,"column":27},"end":{"line":56,"column":63}},"20":{"start":{"line":60,"column":8},"end":{"line":60,"column":72}},"21":{"start":{"line":61,"column":23},"end":{"line":61,"column":45}},"22":{"start":{"line":62,"column":8},"end":{"line":62,"column":22}},"23":{"start":{"line":68,"column":25},"end":{"line":68,"column":61}},"24":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"25":{"start":{"line":70,"column":12},"end":{"line":70,"column":121}},"26":{"start":{"line":72,"column":8},"end":{"line":72,"column":50}},"27":{"start":{"line":73,"column":8},"end":{"line":73,"column":34}},"28":{"start":{"line":76,"column":0},"end":{"line":76,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":28},"end":{"line":30,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":36},"end":{"line":51,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":22},"end":{"line":63,"column":5}},"line":55},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":24},"end":{"line":74,"column":5}},"line":67}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":24,"column":12},"end":{"line":27,"column":13}},"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":27,"column":13}},{"start":{"line":24,"column":12},"end":{"line":27,"column":13}}],"line":24},"4":{"loc":{"start":{"line":42,"column":8},"end":{"line":49,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":49,"column":9}},{"start":{"line":42,"column":8},"end":{"line":49,"column":9}}],"line":42},"5":{"loc":{"start":{"line":42,"column":12},"end":{"line":44,"column":46}},"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":28}},{"start":{"line":43,"column":12},"end":{"line":43,"column":28}},{"start":{"line":44,"column":13},"end":{"line":44,"column":27}},{"start":{"line":44,"column":31},"end":{"line":44,"column":45}}],"line":42},"6":{"loc":{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},{"start":{"line":46,"column":12},"end":{"line":48,"column":13}}],"line":46},"7":{"loc":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},{"start":{"line":69,"column":8},"end":{"line":71,"column":9}}],"line":69}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":70444,"7":70444,"8":13171408,"9":13171408,"10":9,"11":9,"12":70444,"13":98342,"14":98342,"15":98342,"16":70442,"17":8,"18":98342,"19":97003,"20":97003,"21":97003,"22":97003,"23":1339,"24":1339,"25":52,"26":1287,"27":1287,"28":1},"f":{"0":1,"1":70444,"2":98342,"3":97003,"4":1339},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[9,13171399],"4":[70442,27900],"5":[98342,98341,98336,98328],"6":[8,70434],"7":[52,1287]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/numberFieldChecker.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/numberFieldChecker.ts"],"names":[],"mappings":";;;;;;AACA,uCAAmC;AACnC,kEAA0D;AAE1D;;;;GAIG;AACH,MAAa,kBAAkB;IAG7B;;;;OAIG;IACK,gBAAgB,CAAC,KAAa;QACpC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAK,MAAM,GAAG,IAAI,aAAmB,EAAE;YACrC,MAAM,GAAG,GAAG,aAAmB,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,GAAG,KAAK,KAAK,EAAE;gBACjB,MAAM,GAAG,IAAI,CAAC;gBACd,MAAM;aACP;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,4HAA4H;IAC5H;;;;OAIG;IACK,wBAAwB,CAAC,KAAa;QAC5C,6CAA6C;QAC7C,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAE3C,wDAAwD;QACxD,IACE,SAAS,KAAK,EAAE,IAAI,GAAG;YACvB,SAAS,KAAK,EAAE,IAAI,GAAG;YACvB,CAAC,SAAS,GAAG,EAAE,IAAI,SAAS,GAAG,EAAE,CAAC,CAAC,QAAQ;UAC3C;YACA,IAAI,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxC,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;aACtC;SACF;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,KAAa;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAExD,4CAA4C;QAC5C,MAAM,KAAK;QACT,4CAA4C;QAC5C,gEAAgE,CAAC;QAEnE,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,OAAO,MAAM,CAAC;IAChB,CAAC;IACD;;OAEG;IACI,YAAY,CAAC,KAAa;QAC/B,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAChC,MAAM,IAAI,YAAK,CAAC,oBAAoB,CAClC,wBAAwB,KAAK,kBAAkB,EAC/C,OAAO,EACP,KAAK,CACN,CAAC;SACH;QAED,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1C,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;CACF;AA3ED,gDA2EC","sourcesContent":["import * as fieldProcessingInterfaces from '@interfaces/fieldProcessing';\nimport {error} from '@glyphx/core';\nimport currencyToSymbolMap from 'currency-symbol-map/map';\n\n/**\n * This class will take in a string and determine whether or\n * not it is a number. See {@link interfaces/fieldProcessing/iFieldChecker!IFieldChecker}\n * additional details.\n */\nexport class NumberFieldChecker\n  implements fieldProcessingInterfaces.IFieldChecker<number>\n{\n  /**\n   *  Will take an input and compare it to a currency symbol table\n   *  {@link https://github.com/bengourley/currency-symbol-map#readme currency-symbol-map }\n   *  to determine whether or not the string is a currency symbol\n   */\n  private isCurrencySymbol(input: string): boolean {\n    let retval = false;\n    for (const key in currencyToSymbolMap) {\n      const sym = currencyToSymbolMap[key];\n      if (sym === input) {\n        retval = true;\n        break;\n      }\n    }\n    return retval;\n  }\n\n  //TODO: we probbaly want to convert accounting practice of wrapping a negative value in () and replacing it with a '-' sign.\n  /**\n   * will prepare our string for comparison by:\n   * 1. triming leading and trailing spaces\n   * 2. removing leading currency symbols.\n   */\n  private cleanStringForProcessing(input: string) {\n    //make a copy because we may alter the string\n    let tempString = input.trim();\n    const asciiCode = tempString.charCodeAt(0);\n\n    //do we have a currency symbol that needs to be removed.\n    if (\n      asciiCode !== 43 && //+\n      asciiCode !== 45 && //-\n      (asciiCode < 48 || asciiCode > 57) // 0 - 9\n    ) {\n      if (this.isCurrencySymbol(tempString[0])) {\n        tempString = tempString.substring(1);\n      }\n    }\n\n    return tempString;\n  }\n\n  /**\n   * See the interface IFieldChecker for more information. {@link interfaces/fieldProcessing/iFieldChecker!IFieldChecker.checkField | IFieldChecker.checkField}\n   */\n  public checkField(input: string): boolean {\n    const tempString = this.cleanStringForProcessing(input);\n\n    //eslint-disable-next-line no-useless-escape\n    const regex =\n      //eslint-disable-next-line no-useless-escape\n      /^[\\-\\+]?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\\.([0-9]*))?$/;\n\n    const retval = regex.test(tempString);\n    return retval;\n  }\n  /**\n   * See the interface IFieldChecker for more information. {@link interfaces/fieldProcessing/iFieldChecker!IFieldChecker.convertField | IFieldChecker.convertField}\n   */\n  public convertField(input: string): number {\n    let tempString = this.cleanStringForProcessing(input);\n    if (!this.checkField(tempString)) {\n      throw new error.InvalidArgumentError(\n        `The input value of : ${input} is not a number`,\n        'input',\n        input\n      );\n    }\n\n    tempString = tempString.replace(/,/g, '');\n    return Number(tempString);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7f2693307dc63fcac4c52458b79b49909f2c88e2","contentHash":"546755fda22c2cf1976e8c3f4a8af67b33a568f79fc576d113d54b994a7c0c3e"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/basicFieldTypeCalculator.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/basicFieldTypeCalculator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":78}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":29},"end":{"line":5,"column":60}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":40}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":40}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":30}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":31}},"8":{"start":{"line":39,"column":8},"end":{"line":39,"column":36}},"9":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"10":{"start":{"line":47,"column":12},"end":{"line":47,"column":133}},"11":{"start":{"line":49,"column":8},"end":{"line":49,"column":38}},"12":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"13":{"start":{"line":57,"column":12},"end":{"line":57,"column":133}},"14":{"start":{"line":59,"column":8},"end":{"line":59,"column":41}},"15":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"16":{"start":{"line":67,"column":12},"end":{"line":67,"column":133}},"17":{"start":{"line":69,"column":8},"end":{"line":69,"column":35}},"18":{"start":{"line":76,"column":8},"end":{"line":76,"column":43}},"19":{"start":{"line":83,"column":8},"end":{"line":83,"column":43}},"20":{"start":{"line":94,"column":8},"end":{"line":94,"column":35}},"21":{"start":{"line":95,"column":8},"end":{"line":95,"column":37}},"22":{"start":{"line":96,"column":8},"end":{"line":96,"column":42}},"23":{"start":{"line":97,"column":8},"end":{"line":97,"column":35}},"24":{"start":{"line":98,"column":8},"end":{"line":98,"column":38}},"25":{"start":{"line":99,"column":8},"end":{"line":99,"column":81}},"26":{"start":{"line":100,"column":8},"end":{"line":100,"column":44}},"27":{"start":{"line":101,"column":8},"end":{"line":101,"column":44}},"28":{"start":{"line":102,"column":8},"end":{"line":102,"column":33}},"29":{"start":{"line":103,"column":8},"end":{"line":103,"column":33}},"30":{"start":{"line":104,"column":8},"end":{"line":104,"column":80}},"31":{"start":{"line":112,"column":8},"end":{"line":115,"column":68}},"32":{"start":{"line":116,"column":8},"end":{"line":116,"column":43}},"33":{"start":{"line":124,"column":8},"end":{"line":124,"column":36}},"34":{"start":{"line":125,"column":8},"end":{"line":128,"column":35}},"35":{"start":{"line":126,"column":12},"end":{"line":126,"column":35}},"36":{"start":{"line":128,"column":12},"end":{"line":128,"column":35}},"37":{"start":{"line":129,"column":8},"end":{"line":130,"column":38}},"38":{"start":{"line":130,"column":12},"end":{"line":130,"column":38}},"39":{"start":{"line":136,"column":8},"end":{"line":136,"column":34}},"40":{"start":{"line":137,"column":8},"end":{"line":137,"column":43}},"41":{"start":{"line":143,"column":8},"end":{"line":152,"column":9}},"42":{"start":{"line":144,"column":12},"end":{"line":147,"column":15}},"43":{"start":{"line":145,"column":16},"end":{"line":145,"column":41}},"44":{"start":{"line":146,"column":16},"end":{"line":146,"column":38}},"45":{"start":{"line":150,"column":12},"end":{"line":150,"column":37}},"46":{"start":{"line":151,"column":12},"end":{"line":151,"column":38}},"47":{"start":{"line":158,"column":8},"end":{"line":168,"column":11}},"48":{"start":{"line":159,"column":26},"end":{"line":159,"column":42}},"49":{"start":{"line":160,"column":12},"end":{"line":160,"column":37}},"50":{"start":{"line":161,"column":12},"end":{"line":167,"column":13}},"51":{"start":{"line":162,"column":16},"end":{"line":162,"column":42}},"52":{"start":{"line":164,"column":17},"end":{"line":167,"column":13}},"53":{"start":{"line":166,"column":16},"end":{"line":166,"column":42}},"54":{"start":{"line":169,"column":8},"end":{"line":171,"column":11}},"55":{"start":{"line":170,"column":12},"end":{"line":170,"column":26}},"56":{"start":{"line":174,"column":0},"end":{"line":174,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":20},"end":{"line":26,"column":5}},"line":24},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":21},"end":{"line":33,"column":5}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":21},"end":{"line":40,"column":5}},"line":38},"3":{"name":"(anonymous_3)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":23},"end":{"line":50,"column":5}},"line":45},"4":{"name":"(anonymous_4)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":26},"end":{"line":60,"column":5}},"line":55},"5":{"name":"(anonymous_5)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":20},"end":{"line":70,"column":5}},"line":65},"6":{"name":"(anonymous_6)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":28},"end":{"line":77,"column":5}},"line":75},"7":{"name":"(anonymous_7)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":28},"end":{"line":84,"column":5}},"line":82},"8":{"name":"(anonymous_8)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":51},"end":{"line":105,"column":5}},"line":93},"9":{"name":"(anonymous_9)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":25},"end":{"line":117,"column":5}},"line":111},"10":{"name":"(anonymous_10)","decl":{"start":{"line":123,"column":4},"end":{"line":123,"column":5}},"loc":{"start":{"line":123,"column":25},"end":{"line":131,"column":5}},"line":123},"11":{"name":"(anonymous_11)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":13},"end":{"line":138,"column":5}},"line":135},"12":{"name":"(anonymous_12)","decl":{"start":{"line":142,"column":4},"end":{"line":142,"column":5}},"loc":{"start":{"line":142,"column":28},"end":{"line":153,"column":5}},"line":142},"13":{"name":"(anonymous_13)","decl":{"start":{"line":144,"column":26},"end":{"line":144,"column":27}},"loc":{"start":{"line":144,"column":31},"end":{"line":147,"column":13}},"line":144},"14":{"name":"(anonymous_14)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":30},"end":{"line":172,"column":5}},"line":157},"15":{"name":"(anonymous_15)","decl":{"start":{"line":158,"column":31},"end":{"line":158,"column":32}},"loc":{"start":{"line":158,"column":40},"end":{"line":168,"column":9}},"line":158},"16":{"name":"(anonymous_16)","decl":{"start":{"line":169,"column":32},"end":{"line":169,"column":33}},"loc":{"start":{"line":169,"column":38},"end":{"line":171,"column":9}},"line":169}},"branchMap":{"0":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"1":{"loc":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},{"start":{"line":56,"column":8},"end":{"line":58,"column":9}}],"line":56},"2":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66},"3":{"loc":{"start":{"line":113,"column":12},"end":{"line":115,"column":67}},"type":"cond-expr","locations":[{"start":{"line":114,"column":18},"end":{"line":114,"column":67}},{"start":{"line":115,"column":18},"end":{"line":115,"column":67}}],"line":113},"4":{"loc":{"start":{"line":125,"column":8},"end":{"line":128,"column":35}},"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":128,"column":35}},{"start":{"line":125,"column":8},"end":{"line":128,"column":35}}],"line":125},"5":{"loc":{"start":{"line":129,"column":8},"end":{"line":130,"column":38}},"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":130,"column":38}},{"start":{"line":129,"column":8},"end":{"line":130,"column":38}}],"line":129},"6":{"loc":{"start":{"line":143,"column":8},"end":{"line":152,"column":9}},"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":152,"column":9}},{"start":{"line":143,"column":8},"end":{"line":152,"column":9}}],"line":143},"7":{"loc":{"start":{"line":161,"column":12},"end":{"line":167,"column":13}},"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":167,"column":13}},{"start":{"line":161,"column":12},"end":{"line":167,"column":13}}],"line":161},"8":{"loc":{"start":{"line":164,"column":17},"end":{"line":167,"column":13}},"type":"if","locations":[{"start":{"line":164,"column":17},"end":{"line":167,"column":13}},{"start":{"line":164,"column":17},"end":{"line":167,"column":13}}],"line":164}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":2,"9":24,"10":18,"11":6,"12":15,"13":9,"14":6,"15":2727,"16":9,"17":2718,"18":5,"19":10,"20":21,"21":21,"22":21,"23":21,"24":21,"25":21,"26":21,"27":21,"28":21,"29":21,"30":21,"31":981,"32":981,"33":95652,"34":95652,"35":25321,"36":70331,"37":95652,"38":956,"39":25,"40":25,"41":10641,"42":1,"43":10000,"44":10000,"45":10640,"46":10640,"47":9,"48":80012,"49":80012,"50":80012,"51":810,"52":79202,"53":74202,"54":9,"55":9,"56":1},"f":{"0":5,"1":5,"2":2,"3":24,"4":15,"5":2727,"6":5,"7":10,"8":21,"9":981,"10":95652,"11":25,"12":10641,"13":10000,"14":9,"15":80012,"16":9},"b":{"0":[18,6],"1":[9,6],"2":[9,2718],"3":[869,112],"4":[25321,70331],"5":[956,94696],"6":[1,10640],"7":[810,79202],"8":[74202,5000]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/basicFieldTypeCalculator.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fieldProcessing/basicFieldTypeCalculator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fieldProcessingInterfaces from '@interfaces/fieldProcessing';\nimport {error} from '@glyphx/core';\nimport {NumberFieldChecker} from './numberFieldChecker';\n// eslint-disable-next-line node/no-unpublished-import\nimport {fileIngestion} from '@glyphx/types';\n/**\n * The minumum number of samples to analyze before using the sample rate.\n * This value is also used to determing the frequency at which to publish intermediate results.\n */\nexport const MINIMUM_NUMBER_OF_SAMPLES = 100;\n\n/**\n * This class is our first and basic cut at processing fields and determining\n * the column types.  In these early stages there are only two types of columns\n * that we support, strings and floats (numbers).  See {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator}\n * for more details about fields and accessors not documented here.\n */\nexport class BasicFieldTypeCalculator\n  implements fieldProcessingInterfaces.IFieldTypeCalulator\n{\n  private readonly nameField: string;\n  private readonly indexField: number;\n  private readonly sampleRateField: number;\n  private numberPassedField: number;\n  private samplesAnalyzedField: number;\n  private fieldTypeField: fileIngestion.constants.FIELD_TYPE;\n  private hasProcessedItemsField: boolean;\n  private allItemsProcessedField: boolean;\n\n  /**\n   * a counter which holds the number of columns that look like strings.\n   */\n  private numberOfStrings: number;\n  /**\n   * a counter which holds the number of columns that look like numbers.\n   * see {@link numberFieldChecker}\n   */\n  private numberOfNumbers: number;\n  /**\n   * our NumberFieldChecker that will determine if our string can be represeted as\n   * as number.\n   */\n  private numberFieldChecker: NumberFieldChecker;\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.fieldName | IFieldTypeCalculator.fieldName}\n   */\n  get fieldName(): string {\n    return this.nameField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.fieldIndex | IFieldTypeCalculator.fieldIndex}\n   */\n  get fieldIndex(): number {\n    return this.indexField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.sampleRate | IFieldTypeCalculator.sampleRate}\n   */\n  get sampleRate(): number {\n    return this.sampleRateField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.numberPassed | IFieldTypeCalculator.numberPassed}\n   */\n  get numberPassed(): number {\n    if (!this.hasProcessedItemsField) {\n      throw new error.InvalidOperationError(\n        'This information is not available until processItems has been called',\n        {}\n      );\n    }\n    return this.numberPassedField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.samplesAnalyzed | IFieldTypeCalculator.samplesAnalyzed}\n   */\n  get samplesAnalyzed(): number {\n    if (!this.hasProcessedItemsField) {\n      throw new error.InvalidOperationError(\n        'This information is not available until processItems has been called',\n        {}\n      );\n    }\n    return this.samplesAnalyzedField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.fieldType | IFieldTypeCalculator.fieldType}\n   */\n  get fieldType(): fileIngestion.constants.FIELD_TYPE {\n    if (!this.hasProcessedItemsField) {\n      throw new error.InvalidOperationError(\n        'This information is not available until processItems has been called',\n        {}\n      );\n    }\n    return this.fieldTypeField;\n  }\n\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.allItemsProcessed | IFieldTypeCalculator.allItemsProcessed}\n   */\n  get allItemsProcessed(): boolean {\n    return this.allItemsProcessedField;\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information --\n   * {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.hasProcessedItems | IFieldTypeCalculator.hasProcessedItems}\n   */\n  get hasProcessedItems(): boolean {\n    return this.hasProcessedItemsField;\n  }\n\n  /**\n   * Builds a new BasicFieldTypeCalculator\n   *\n   * @param fieldName - the name of our field\n   * @param fieldIndex - the index of our field as defined externally by the client.\n   * @param sampleRate - a number beween 0 - 1.0 (inclusive) to determine how many of the supplied values\n   * should be analyzed to determine the field type.\n   */\n  constructor(fieldName: string, fieldIndex: number, sampleRate: number) {\n    this.nameField = fieldName;\n    this.indexField = fieldIndex;\n    this.sampleRateField = sampleRate;\n    this.numberPassedField = 0;\n    this.samplesAnalyzedField = 0;\n    this.fieldTypeField = fileIngestion.constants.FIELD_TYPE.UNKNOWN;\n    this.hasProcessedItemsField = false;\n    this.allItemsProcessedField = false;\n    this.numberOfStrings = 0;\n    this.numberOfNumbers = 0;\n    this.numberFieldChecker = new NumberFieldChecker();\n  }\n\n  /**\n   * will evaluate the values of {@link numberOfStrings} and {@link numberOfNumbers} to\n   * determne our {@link fieldType}.  In the case of an equal number of each, the field\n   * type will be set to {@link util/constants/fieldType!FIELD_TYPE.STRING | fileIngestion.constants.FIELD_TYPE.STRING}\n   */\n  private calculateFieldType(): void {\n    this.fieldTypeField =\n      this.numberOfStrings >= this.numberOfNumbers\n        ? fileIngestion.constants.FIELD_TYPE.STRING\n        : fileIngestion.constants.FIELD_TYPE.NUMBER;\n    this.hasProcessedItemsField = true;\n  }\n\n  /**\n   * will validate our field against {@link numberFieldChecker} to determine if the value\n   * is a string or number.  This function will also call {@link calculateFieldType}\n   * to produce interim results.\n   */\n  private validateField(value: string): void {\n    this.samplesAnalyzedField++;\n    if (this.numberFieldChecker.checkField(value)) this.numberOfNumbers++;\n    else this.numberOfStrings++;\n\n    if (!(this.samplesAnalyzedField % MINIMUM_NUMBER_OF_SAMPLES))\n      this.calculateFieldType();\n  }\n\n  /**\n   * See the interface IFieldTypeCalculator for more information -- {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.finish | IFieldTypeCalculator.finish}\n   */\n  finish(): void {\n    this.calculateFieldType();\n    this.allItemsProcessedField = true;\n  }\n\n  /**\n   * See the interface IFieldTypeCalculator for more information -- {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.processItemsSync | IFieldTypeCalculator.processItemsSync}\n   */\n  processItemsSync(value: string | string[]): void {\n    if (Array.isArray(value)) {\n      value.forEach(v => {\n        this.numberPassedField++;\n        this.validateField(v);\n      });\n    } else {\n      this.numberPassedField++;\n      this.validateField(value);\n    }\n  }\n  /**\n   * See the interface IFieldTypeCalculator for more information -- {@link interfaces/fieldProcessing/iFieldTypeCalculator!IFieldTypeCalulator.processItems | IFieldTypeCalculator.processItems}\n   */\n  processItems(itemsStream: NodeJS.ReadableStream): void {\n    itemsStream.on('data', chunk => {\n      const value = chunk.toString();\n      this.numberPassedField++;\n      if (this.numberPassedField <= MINIMUM_NUMBER_OF_SAMPLES) {\n        this.validateField(value);\n      } else if (\n        this.samplesAnalyzedField / this.numberPassedField <\n        this.sampleRateField\n      ) {\n        this.validateField(value);\n      }\n    });\n\n    itemsStream.once('end', () => {\n      this.finish();\n    });\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"77c9b170631a005027cc5649fbd2d930701019f6","contentHash":"3029d8a90ff35512e1ab3fa31120023e81dff64ae71640c9e638df58eb8540c3"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileIngestor.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileIngestor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":38}},"4":{"start":{"line":6,"column":26},"end":{"line":6,"column":52}},"5":{"start":{"line":7,"column":25},"end":{"line":7,"column":52}},"6":{"start":{"line":8,"column":16},"end":{"line":8,"column":32}},"7":{"start":{"line":9,"column":24},"end":{"line":9,"column":65}},"8":{"start":{"line":10,"column":20},"end":{"line":10,"column":46}},"9":{"start":{"line":13,"column":8},"end":{"line":14,"column":133}},"10":{"start":{"line":14,"column":12},"end":{"line":14,"column":133}},"11":{"start":{"line":15,"column":8},"end":{"line":15,"column":20}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":34}},"13":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"14":{"start":{"line":24,"column":8},"end":{"line":24,"column":36}},"15":{"start":{"line":27,"column":8},"end":{"line":27,"column":40}},"16":{"start":{"line":30,"column":8},"end":{"line":30,"column":34}},"17":{"start":{"line":33,"column":8},"end":{"line":33,"column":38}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":32}},"19":{"start":{"line":39,"column":8},"end":{"line":39,"column":46}},"20":{"start":{"line":40,"column":8},"end":{"line":40,"column":44}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":50}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":53}},"23":{"start":{"line":43,"column":8},"end":{"line":43,"column":46}},"24":{"start":{"line":44,"column":8},"end":{"line":44,"column":46}},"25":{"start":{"line":45,"column":8},"end":{"line":45,"column":33}},"26":{"start":{"line":46,"column":8},"end":{"line":46,"column":33}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":43}},"28":{"start":{"line":48,"column":8},"end":{"line":48,"column":48}},"29":{"start":{"line":49,"column":8},"end":{"line":49,"column":67}},"30":{"start":{"line":50,"column":8},"end":{"line":50,"column":77}},"31":{"start":{"line":51,"column":8},"end":{"line":51,"column":115}},"32":{"start":{"line":52,"column":8},"end":{"line":52,"column":107}},"33":{"start":{"line":55,"column":8},"end":{"line":65,"column":9}},"34":{"start":{"line":56,"column":12},"end":{"line":63,"column":13}},"35":{"start":{"line":57,"column":16},"end":{"line":57,"column":44}},"36":{"start":{"line":58,"column":16},"end":{"line":58,"column":48}},"37":{"start":{"line":59,"column":16},"end":{"line":59,"column":55}},"38":{"start":{"line":62,"column":16},"end":{"line":62,"column":187}},"39":{"start":{"line":64,"column":12},"end":{"line":64,"column":36}},"40":{"start":{"line":68,"column":30},"end":{"line":68,"column":118}},"41":{"start":{"line":69,"column":8},"end":{"line":69,"column":58}},"42":{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},"43":{"start":{"line":73,"column":29},"end":{"line":73,"column":101}},"44":{"start":{"line":74,"column":12},"end":{"line":74,"column":56}},"45":{"start":{"line":75,"column":12},"end":{"line":75,"column":36}},"46":{"start":{"line":79,"column":8},"end":{"line":79,"column":42}},"47":{"start":{"line":80,"column":8},"end":{"line":80,"column":52}},"48":{"start":{"line":81,"column":8},"end":{"line":81,"column":56}},"49":{"start":{"line":84,"column":8},"end":{"line":84,"column":42}},"50":{"start":{"line":85,"column":8},"end":{"line":85,"column":117}},"51":{"start":{"line":89,"column":8},"end":{"line":89,"column":118}},"52":{"start":{"line":93,"column":8},"end":{"line":93,"column":42}},"53":{"start":{"line":94,"column":8},"end":{"line":94,"column":82}},"54":{"start":{"line":97,"column":54},"end":{"line":97,"column":216}},"55":{"start":{"line":98,"column":8},"end":{"line":98,"column":60}},"56":{"start":{"line":99,"column":8},"end":{"line":99,"column":69}},"57":{"start":{"line":112,"column":23},"end":{"line":112,"column":25}},"58":{"start":{"line":113,"column":31},"end":{"line":113,"column":33}},"59":{"start":{"line":114,"column":36},"end":{"line":114,"column":38}},"60":{"start":{"line":115,"column":8},"end":{"line":199,"column":9}},"61":{"start":{"line":115,"column":21},"end":{"line":115,"column":22}},"62":{"start":{"line":116,"column":29},"end":{"line":116,"column":45}},"63":{"start":{"line":117,"column":12},"end":{"line":194,"column":13}},"64":{"start":{"line":117,"column":46},"end":{"line":118,"column":48}},"65":{"start":{"line":119,"column":32},"end":{"line":119,"column":274}},"66":{"start":{"line":120,"column":16},"end":{"line":125,"column":19}},"67":{"start":{"line":127,"column":17},"end":{"line":194,"column":13}},"68":{"start":{"line":128,"column":16},"end":{"line":148,"column":17}},"69":{"start":{"line":129,"column":36},"end":{"line":129,"column":216}},"70":{"start":{"line":130,"column":20},"end":{"line":135,"column":23}},"71":{"start":{"line":137,"column":21},"end":{"line":148,"column":17}},"72":{"start":{"line":137,"column":50},"end":{"line":137,"column":74}},"73":{"start":{"line":138,"column":36},"end":{"line":138,"column":229}},"74":{"start":{"line":139,"column":20},"end":{"line":144,"column":23}},"75":{"start":{"line":147,"column":20},"end":{"line":147,"column":60}},"76":{"start":{"line":151,"column":17},"end":{"line":194,"column":13}},"77":{"start":{"line":152,"column":16},"end":{"line":173,"column":17}},"78":{"start":{"line":153,"column":46},"end":{"line":153,"column":70}},"79":{"start":{"line":154,"column":36},"end":{"line":154,"column":218}},"80":{"start":{"line":155,"column":20},"end":{"line":160,"column":23}},"81":{"start":{"line":163,"column":37},"end":{"line":163,"column":157}},"82":{"start":{"line":164,"column":20},"end":{"line":172,"column":21}},"83":{"start":{"line":165,"column":40},"end":{"line":165,"column":271}},"84":{"start":{"line":166,"column":24},"end":{"line":171,"column":27}},"85":{"start":{"line":175,"column":17},"end":{"line":194,"column":13}},"86":{"start":{"line":177,"column":32},"end":{"line":177,"column":213}},"87":{"start":{"line":178,"column":16},"end":{"line":183,"column":19}},"88":{"start":{"line":185,"column":17},"end":{"line":194,"column":13}},"89":{"start":{"line":187,"column":32},"end":{"line":187,"column":212}},"90":{"start":{"line":188,"column":16},"end":{"line":193,"column":19}},"91":{"start":{"line":195,"column":12},"end":{"line":198,"column":15}},"92":{"start":{"line":200,"column":8},"end":{"line":200,"column":22}},"93":{"start":{"line":203,"column":38},"end":{"line":203,"column":43}},"94":{"start":{"line":204,"column":8},"end":{"line":223,"column":9}},"95":{"start":{"line":204,"column":21},"end":{"line":204,"column":22}},"96":{"start":{"line":205,"column":36},"end":{"line":205,"column":52}},"97":{"start":{"line":206,"column":12},"end":{"line":222,"column":13}},"98":{"start":{"line":207,"column":16},"end":{"line":207,"column":117}},"99":{"start":{"line":208,"column":16},"end":{"line":208,"column":47}},"100":{"start":{"line":210,"column":17},"end":{"line":222,"column":13}},"101":{"start":{"line":212,"column":16},"end":{"line":212,"column":119}},"102":{"start":{"line":214,"column":17},"end":{"line":222,"column":13}},"103":{"start":{"line":216,"column":16},"end":{"line":216,"column":121}},"104":{"start":{"line":217,"column":16},"end":{"line":217,"column":47}},"105":{"start":{"line":220,"column":16},"end":{"line":220,"column":66}},"106":{"start":{"line":221,"column":16},"end":{"line":221,"column":47}},"107":{"start":{"line":224,"column":8},"end":{"line":224,"column":39}},"108":{"start":{"line":227,"column":30},"end":{"line":227,"column":32}},"109":{"start":{"line":228,"column":32},"end":{"line":228,"column":34}},"110":{"start":{"line":229,"column":32},"end":{"line":229,"column":74}},"111":{"start":{"line":230,"column":23},"end":{"line":230,"column":53}},"112":{"start":{"line":231,"column":8},"end":{"line":270,"column":9}},"113":{"start":{"line":232,"column":12},"end":{"line":232,"column":63}},"114":{"start":{"line":233,"column":12},"end":{"line":233,"column":52}},"115":{"start":{"line":234,"column":12},"end":{"line":234,"column":73}},"116":{"start":{"line":237,"column":12},"end":{"line":269,"column":13}},"117":{"start":{"line":238,"column":41},"end":{"line":238,"column":66}},"118":{"start":{"line":239,"column":16},"end":{"line":250,"column":17}},"119":{"start":{"line":240,"column":49},"end":{"line":240,"column":204}},"120":{"start":{"line":241,"column":20},"end":{"line":241,"column":70}},"121":{"start":{"line":244,"column":20},"end":{"line":246,"column":21}},"122":{"start":{"line":245,"column":24},"end":{"line":245,"column":198}},"123":{"start":{"line":249,"column":20},"end":{"line":249,"column":60}},"124":{"start":{"line":251,"column":16},"end":{"line":253,"column":60}},"125":{"start":{"line":256,"column":32},"end":{"line":256,"column":147}},"126":{"start":{"line":257,"column":16},"end":{"line":261,"column":19}},"127":{"start":{"line":262,"column":16},"end":{"line":267,"column":17}},"128":{"start":{"line":263,"column":20},"end":{"line":263,"column":34}},"129":{"start":{"line":266,"column":20},"end":{"line":266,"column":97}},"130":{"start":{"line":268,"column":16},"end":{"line":268,"column":77}},"131":{"start":{"line":271,"column":8},"end":{"line":276,"column":10}},"132":{"start":{"line":279,"column":0},"end":{"line":279,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":17},"end":{"line":16,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":19},"end":{"line":19,"column":5}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":18},"end":{"line":22,"column":5}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":21},"end":{"line":25,"column":5}},"line":23},"4":{"name":"(anonymous_4)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":25},"end":{"line":28,"column":5}},"line":26},"5":{"name":"(anonymous_5)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":19},"end":{"line":31,"column":5}},"line":29},"6":{"name":"(anonymous_6)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":23},"end":{"line":34,"column":5}},"line":32},"7":{"name":"(anonymous_7)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":17},"end":{"line":37,"column":5}},"line":35},"8":{"name":"(anonymous_8)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":39},"end":{"line":53,"column":5}},"line":38},"9":{"name":"(anonymous_9)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":17},"end":{"line":66,"column":5}},"line":54},"10":{"name":"(anonymous_10)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":43},"end":{"line":70,"column":5}},"line":67},"11":{"name":"(anonymous_11)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":33},"end":{"line":77,"column":5}},"line":71},"12":{"name":"(anonymous_12)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":33},"end":{"line":82,"column":5}},"line":78},"13":{"name":"(anonymous_13)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":56},"end":{"line":86,"column":5}},"line":83},"14":{"name":"(anonymous_14)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":54},"end":{"line":90,"column":5}},"line":87},"15":{"name":"(anonymous_15)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":124},"end":{"line":95,"column":5}},"line":91},"16":{"name":"(anonymous_16)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":73},"end":{"line":100,"column":5}},"line":96},"17":{"name":"(anonymous_17)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":30},"end":{"line":201,"column":5}},"line":111},"18":{"name":"(anonymous_18)","decl":{"start":{"line":117,"column":41},"end":{"line":117,"column":42}},"loc":{"start":{"line":117,"column":46},"end":{"line":118,"column":48}},"line":117},"19":{"name":"(anonymous_19)","decl":{"start":{"line":137,"column":45},"end":{"line":137,"column":46}},"loc":{"start":{"line":137,"column":50},"end":{"line":137,"column":74}},"line":137},"20":{"name":"(anonymous_20)","decl":{"start":{"line":153,"column":41},"end":{"line":153,"column":42}},"loc":{"start":{"line":153,"column":46},"end":{"line":153,"column":70}},"line":153},"21":{"name":"(anonymous_21)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":25},"end":{"line":225,"column":5}},"line":202},"22":{"name":"(anonymous_22)","decl":{"start":{"line":226,"column":4},"end":{"line":226,"column":5}},"loc":{"start":{"line":226,"column":20},"end":{"line":277,"column":5}},"line":226}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":8},"end":{"line":14,"column":133}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":14,"column":133}},{"start":{"line":13,"column":8},"end":{"line":14,"column":133}}],"line":13},"1":{"loc":{"start":{"line":55,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":65,"column":9}},{"start":{"line":55,"column":8},"end":{"line":65,"column":9}}],"line":55},"2":{"loc":{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},{"start":{"line":72,"column":8},"end":{"line":76,"column":9}}],"line":72},"3":{"loc":{"start":{"line":91,"column":52},"end":{"line":91,"column":122}},"type":"default-arg","locations":[{"start":{"line":91,"column":72},"end":{"line":91,"column":122}}],"line":91},"4":{"loc":{"start":{"line":117,"column":12},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":117,"column":12},"end":{"line":194,"column":13}},{"start":{"line":117,"column":12},"end":{"line":194,"column":13}}],"line":117},"5":{"loc":{"start":{"line":117,"column":46},"end":{"line":118,"column":48}},"type":"binary-expr","locations":[{"start":{"line":117,"column":46},"end":{"line":117,"column":80}},{"start":{"line":118,"column":16},"end":{"line":118,"column":48}}],"line":117},"6":{"loc":{"start":{"line":127,"column":17},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":127,"column":17},"end":{"line":194,"column":13}},{"start":{"line":127,"column":17},"end":{"line":194,"column":13}}],"line":127},"7":{"loc":{"start":{"line":128,"column":16},"end":{"line":148,"column":17}},"type":"if","locations":[{"start":{"line":128,"column":16},"end":{"line":148,"column":17}},{"start":{"line":128,"column":16},"end":{"line":148,"column":17}}],"line":128},"8":{"loc":{"start":{"line":137,"column":21},"end":{"line":148,"column":17}},"type":"if","locations":[{"start":{"line":137,"column":21},"end":{"line":148,"column":17}},{"start":{"line":137,"column":21},"end":{"line":148,"column":17}}],"line":137},"9":{"loc":{"start":{"line":151,"column":17},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":151,"column":17},"end":{"line":194,"column":13}},{"start":{"line":151,"column":17},"end":{"line":194,"column":13}}],"line":151},"10":{"loc":{"start":{"line":152,"column":16},"end":{"line":173,"column":17}},"type":"if","locations":[{"start":{"line":152,"column":16},"end":{"line":173,"column":17}},{"start":{"line":152,"column":16},"end":{"line":173,"column":17}}],"line":152},"11":{"loc":{"start":{"line":152,"column":20},"end":{"line":153,"column":71}},"type":"binary-expr","locations":[{"start":{"line":152,"column":20},"end":{"line":152,"column":158}},{"start":{"line":153,"column":20},"end":{"line":153,"column":71}}],"line":152},"12":{"loc":{"start":{"line":164,"column":20},"end":{"line":172,"column":21}},"type":"if","locations":[{"start":{"line":164,"column":20},"end":{"line":172,"column":21}},{"start":{"line":164,"column":20},"end":{"line":172,"column":21}}],"line":164},"13":{"loc":{"start":{"line":175,"column":17},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":175,"column":17},"end":{"line":194,"column":13}},{"start":{"line":175,"column":17},"end":{"line":194,"column":13}}],"line":175},"14":{"loc":{"start":{"line":175,"column":21},"end":{"line":176,"column":154}},"type":"binary-expr","locations":[{"start":{"line":175,"column":21},"end":{"line":175,"column":98}},{"start":{"line":176,"column":16},"end":{"line":176,"column":154}}],"line":175},"15":{"loc":{"start":{"line":185,"column":17},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":185,"column":17},"end":{"line":194,"column":13}},{"start":{"line":185,"column":17},"end":{"line":194,"column":13}}],"line":185},"16":{"loc":{"start":{"line":185,"column":21},"end":{"line":186,"column":154}},"type":"binary-expr","locations":[{"start":{"line":185,"column":21},"end":{"line":185,"column":97}},{"start":{"line":186,"column":16},"end":{"line":186,"column":154}}],"line":185},"17":{"loc":{"start":{"line":206,"column":12},"end":{"line":222,"column":13}},"type":"if","locations":[{"start":{"line":206,"column":12},"end":{"line":222,"column":13}},{"start":{"line":206,"column":12},"end":{"line":222,"column":13}}],"line":206},"18":{"loc":{"start":{"line":210,"column":17},"end":{"line":222,"column":13}},"type":"if","locations":[{"start":{"line":210,"column":17},"end":{"line":222,"column":13}},{"start":{"line":210,"column":17},"end":{"line":222,"column":13}}],"line":210},"19":{"loc":{"start":{"line":214,"column":17},"end":{"line":222,"column":13}},"type":"if","locations":[{"start":{"line":214,"column":17},"end":{"line":222,"column":13}},{"start":{"line":214,"column":17},"end":{"line":222,"column":13}}],"line":214},"20":{"loc":{"start":{"line":231,"column":8},"end":{"line":270,"column":9}},"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":270,"column":9}},{"start":{"line":231,"column":8},"end":{"line":270,"column":9}}],"line":231},"21":{"loc":{"start":{"line":239,"column":16},"end":{"line":250,"column":17}},"type":"if","locations":[{"start":{"line":239,"column":16},"end":{"line":250,"column":17}},{"start":{"line":239,"column":16},"end":{"line":250,"column":17}}],"line":239},"22":{"loc":{"start":{"line":244,"column":20},"end":{"line":246,"column":21}},"type":"if","locations":[{"start":{"line":244,"column":20},"end":{"line":246,"column":21}},{"start":{"line":244,"column":20},"end":{"line":246,"column":21}}],"line":244},"23":{"loc":{"start":{"line":251,"column":36},"end":{"line":253,"column":59}},"type":"cond-expr","locations":[{"start":{"line":252,"column":22},"end":{"line":252,"column":64}},{"start":{"line":253,"column":22},"end":{"line":253,"column":59}}],"line":251},"24":{"loc":{"start":{"line":262,"column":16},"end":{"line":267,"column":17}},"type":"if","locations":[{"start":{"line":262,"column":16},"end":{"line":267,"column":17}},{"start":{"line":262,"column":16},"end":{"line":267,"column":17}}],"line":262}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":3,"10":2,"11":1,"12":89,"13":89,"14":43,"15":16,"16":107,"17":43,"18":29,"19":21,"20":21,"21":21,"22":21,"23":21,"24":21,"25":21,"26":21,"27":21,"28":21,"29":21,"30":21,"31":21,"32":21,"33":21,"34":20,"35":20,"36":19,"37":19,"38":1,"39":19,"40":2,"41":2,"42":10,"43":7,"44":7,"45":5,"46":2,"47":2,"48":2,"49":1,"50":1,"51":2,"52":8,"53":6,"54":8,"55":8,"56":8,"57":17,"58":17,"59":17,"60":17,"61":17,"62":28,"63":28,"64":12,"65":1,"66":1,"67":27,"68":16,"69":2,"70":2,"71":14,"72":5,"73":1,"74":1,"75":13,"76":11,"77":5,"78":2,"79":1,"80":1,"81":4,"82":4,"83":1,"84":1,"85":6,"86":2,"87":2,"88":4,"89":2,"90":2,"91":28,"92":17,"93":8,"94":8,"95":8,"96":11,"97":11,"98":7,"99":5,"100":4,"101":2,"102":2,"103":1,"104":1,"105":1,"106":1,"107":6,"108":17,"109":17,"110":17,"111":17,"112":17,"113":9,"114":9,"115":9,"116":8,"117":8,"118":6,"119":5,"120":5,"121":5,"122":4,"123":1,"124":6,"125":2,"126":2,"127":2,"128":1,"129":1,"130":2,"131":17,"132":1},"f":{"0":3,"1":89,"2":89,"3":43,"4":16,"5":107,"6":43,"7":29,"8":21,"9":21,"10":2,"11":10,"12":2,"13":1,"14":2,"15":8,"16":8,"17":17,"18":12,"19":5,"20":2,"21":8,"22":17},"b":{"0":[2,1],"1":[20,1],"2":[7,3],"3":[7],"4":[1,27],"5":[12,7],"6":[16,11],"7":[2,14],"8":[1,13],"9":[5,6],"10":[1,4],"11":[5,3],"12":[1,3],"13":[2,4],"14":[6,3],"15":[2,2],"16":[4,3],"17":[7,4],"18":[2,2],"19":[1,1],"20":[9,8],"21":[5,1],"22":[4,1],"23":[0,6],"24":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileIngestor.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileIngestor.ts"],"names":[],"mappings":"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","sourcesContent":["import {fileIngestion} from '@glyphx/types';\nimport {error, aws} from '@glyphx/core';\nimport {BasicAthenaProcessor} from '@fileProcessing';\nimport {Readable} from 'node:stream';\nimport {FileUploadManager, FileReconciliator} from './fileProcessing';\n\nimport {\n  IFileInformation,\n  IFileProcessingError,\n  IJoinTableDefinition,\n  IFileProcessingResult,\n} from '@interfaces/fileProcessing';\nimport {\n  generalPurposeFunctions,\n  generalPurposeFunctions as sharedFunctions,\n} from '@util';\nimport {TableArchiver} from './fileProcessing/tableArchiver';\nimport {\n  FILE_PROCESSING_ERROR_TYPES,\n  FILE_PROCESSING_STATUS,\n} from '@util/constants';\n\nexport class FileIngestor {\n  private readonly clientIdField: string;\n  private readonly modelIdField: string;\n  private readonly bucketNameField: string;\n  private readonly fileStatisticsField: fileIngestion.IFileStats[];\n  private readonly fileInfoField: fileIngestion.IFileInfo[];\n  private readonly databaseNameField: string;\n  private readonly s3Manager: aws.S3Manager;\n  private readonly athenaManager: aws.AthenaManager;\n  private readonly basicAthenaProcessor: BasicAthenaProcessor;\n  private viewRemoved: boolean;\n  private readonly processedFileInformation: IFileInformation[];\n  private readonly processedFileErrorInformation: IFileProcessingError[];\n  private initedField: boolean;\n  private readonly tableArchver: TableArchiver;\n\n  public get isSafe() {\n    if (!this.inited)\n      throw new error.InvalidOperationError(\n        'You must call init before perfoming this action',\n        {inited: this.inited}\n      );\n\n    return true;\n  }\n\n  public get clientId() {\n    return this.clientIdField;\n  }\n  public get modelId() {\n    return this.modelIdField;\n  }\n\n  public get bucketName() {\n    return this.bucketNameField;\n  }\n\n  public get fileStatistics(): fileIngestion.IFileStats[] {\n    return this.fileStatisticsField;\n  }\n\n  public get fileInfo(): fileIngestion.IFileInfo[] {\n    return this.fileInfoField;\n  }\n\n  public get databaseName(): string {\n    return this.databaseNameField;\n  }\n\n  public get inited() {\n    return this.initedField;\n  }\n  constructor(payload: fileIngestion.IPayload, databaseName: string) {\n    this.clientIdField = payload.clientId;\n    this.modelIdField = payload.modelId;\n    this.bucketNameField = payload.bucketName;\n    this.fileStatisticsField = payload.fileStats;\n    this.fileInfoField = payload.fileInfo;\n\n    this.databaseNameField = databaseName;\n    this.initedField = false;\n    this.viewRemoved = false;\n    this.processedFileInformation = [];\n    this.processedFileErrorInformation = [];\n\n    this.s3Manager = new aws.S3Manager(this.bucketName);\n    this.athenaManager = new aws.AthenaManager(this.databaseName);\n    this.basicAthenaProcessor = new BasicAthenaProcessor(\n      this.bucketName,\n      this.databaseName\n    );\n    this.tableArchver = new TableArchiver(\n      this.clientId,\n      this.modelId,\n      this.s3Manager as aws.S3Manager\n    );\n  }\n\n  public async init() {\n    if (!this.inited) {\n      try {\n        await this.s3Manager.init();\n\n        await this.athenaManager.init();\n\n        await this.basicAthenaProcessor.init();\n      } catch (err) {\n        throw new error.InvalidArgumentError(\n          'An unexpected error occurred while initing the FileIngestor.  See the inner error for additional information',\n          '',\n          null,\n          err\n        );\n      }\n      this.initedField = true;\n    }\n  }\n\n  async removeTableFromAthena(tableName: string) {\n    const fullTableName = sharedFunctions.getFullTableName(\n      this.clientId,\n      this.modelId,\n      tableName\n    );\n\n    await this.athenaManager.dropTable(fullTableName);\n  }\n\n  async removeViewFromAthena() {\n    if (!this.viewRemoved) {\n      const viewName = sharedFunctions.getViewName(this.clientId, this.modelId);\n\n      await this.athenaManager.dropView(viewName);\n\n      this.viewRemoved = true;\n    }\n  }\n\n  private async deleteTable(tableName: string) {\n    await this.removeViewFromAthena();\n    await this.removeTableFromAthena(tableName);\n    await this.tableArchver.archiveTable(tableName);\n  }\n\n  async replaceTable(\n    tableName: string,\n    fileName: string,\n    fileStream: Readable\n  ) {\n    await this.deleteTable(tableName);\n    await this.addTable(\n      tableName,\n      fileName,\n      fileStream,\n      fileIngestion.constants.FILE_OPERATION.REPLACE\n    );\n  }\n\n  private async appendFile(\n    tableName: string,\n    fileName: string,\n    fileStream: Readable\n  ) {\n    //TODO: should I check for the append file or just trust the front end.\n\n    await this.uploadFile(\n      tableName,\n      fileName,\n      fileStream,\n      fileIngestion.constants.FILE_OPERATION.APPEND\n    );\n  }\n\n  private async addTable(\n    tableName: string,\n    fileName: string,\n    fileStream: Readable,\n    fileOperationType = fileIngestion.constants.FILE_OPERATION.ADD\n  ) {\n    //This is a view affecting operation so remove it if it exists\n\n    await this.removeViewFromAthena();\n    await this.uploadFile(tableName, fileName, fileStream, fileOperationType);\n  }\n\n  private async uploadFile(\n    tableName: string,\n    fileName: string,\n    fileStream: Readable,\n    fileOperationType: fileIngestion.constants.FILE_OPERATION\n  ) {\n    const {fileInformation, errorInformation} =\n      await FileUploadManager.processAndUploadNewFiles(\n        this.clientId,\n        this.modelId,\n        fileStream,\n        tableName,\n        fileName,\n        fileOperationType,\n        this.s3Manager\n      );\n\n    this.processedFileInformation.push(fileInformation);\n    this.processedFileErrorInformation.push(...errorInformation);\n  }\n\n  /**\n   * Basically this method will try to head off a client doing bad things.\n   * The logic here is intentionally concervative.  While running delete\n   * on a non-existant table is possible, or just adding when replace is\n   * called on a table that doesn't exist.  I do not want to get into the\n   * habit of just letting the front end get away with sloppy implementations.\n   * Being conservative will allow us to identify issues which may cause\n   * problems down the road by not guessing what the implimentor was\n   * thinking.\n   */\n  private async reconcileFileInfo(): Promise<IFileProcessingError[]> {\n    const retval: IFileProcessingError[] = [];\n    const addedFileNames: string[] = [];\n    const processedTableFiles: {fileName: string; tableName: string}[] = [];\n    for (let i = 0; i < this.fileInfo.length; i++) {\n      const fileInfo = this.fileInfo[i];\n      if (\n        processedTableFiles.find(\n          a =>\n            a.tableName === fileInfo.tableName &&\n            a.fileName === fileInfo.fileName\n        )\n      ) {\n        const message = `A file/table combinatoin for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName}, fileName: ${fileInfo.fileName} has already been checked for processing.  Each fileName/TableName combination must be unique`;\n        retval.push({\n          fileName: fileInfo.fileName,\n          tableName: fileInfo.tableName,\n          errorType: FILE_PROCESSING_ERROR_TYPES.INVALID_TABLE_SET,\n          message: message,\n        });\n      } else if (\n        fileInfo.operation === fileIngestion.constants.FILE_OPERATION.ADD\n      ) {\n        if (\n          await this.athenaManager.tableExists(\n            sharedFunctions.getFullTableName(\n              this.clientId,\n              this.modelId,\n              fileInfo.tableName\n            )\n          )\n        ) {\n          const message = `A table for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName} aready exits in the database.  You must remove it before adding or call replace`;\n          retval.push({\n            fileName: fileInfo.fileName,\n            tableName: fileInfo.tableName,\n            errorType: FILE_PROCESSING_ERROR_TYPES.TABLE_ALREADY_EXISTS,\n            message: message,\n          });\n        } else if (addedFileNames.find(f => f === fileInfo.tableName)) {\n          const message = `A table for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName} has already been flagged for add on this set of operations. A Second add does not make sense`;\n          retval.push({\n            fileName: fileInfo.fileName,\n            tableName: fileInfo.tableName,\n            errorType: FILE_PROCESSING_ERROR_TYPES.INVALID_TABLE_SET,\n            message: message,\n          });\n        } else {\n          addedFileNames.push(fileInfo.tableName);\n        }\n        //An append can be called if we are plannig on adding a table in this operation.\n      } else if (\n        fileInfo.operation === fileIngestion.constants.FILE_OPERATION.APPEND\n      ) {\n        if (\n          !(await this.athenaManager.tableExists(\n            sharedFunctions.getFullTableName(\n              this.clientId,\n              this.modelId,\n              fileInfo.tableName\n            )\n          )) &&\n          !addedFileNames.find(f => f === fileInfo.tableName)\n        ) {\n          const message = `A table for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName} does not exits in the database.  You cannot append a file to a non existant table`;\n          retval.push({\n            fileName: fileInfo.fileName,\n            tableName: fileInfo.tableName,\n            errorType: FILE_PROCESSING_ERROR_TYPES.TABLE_DOES_NOT_EXIST,\n            message: message,\n          });\n        } else {\n          const fileName =\n            sharedFunctions.getTableParquetPath(\n              this.clientId,\n              this.modelId,\n              fileInfo.tableName\n            ) + fileInfo.fileName;\n          if (await this.s3Manager.fileExists(fileName)) {\n            const message = `A file for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName}, fileeName: ${fileInfo.fileName} Has allready been uploaded.  You can append a new file, but you cannot overwrite an existing file.`;\n            retval.push({\n              fileName: fileInfo.fileName,\n              tableName: fileInfo.tableName,\n              errorType: FILE_PROCESSING_ERROR_TYPES.FILE_ALREADY_EXISTS,\n              message: message,\n            });\n          }\n        }\n      } else if (\n        fileInfo.operation === fileIngestion.constants.FILE_OPERATION.REPLACE &&\n        !(await this.athenaManager.tableExists(\n          sharedFunctions.getFullTableName(\n            this.clientId,\n            this.modelId,\n            fileInfo.tableName\n          )\n        ))\n      ) {\n        const message = `A table for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName} does not exits in the database.  You cannot replace a table that does not exist `;\n        retval.push({\n          fileName: fileInfo.fileName,\n          tableName: fileInfo.tableName,\n          errorType: FILE_PROCESSING_ERROR_TYPES.TABLE_DOES_NOT_EXIST,\n          message: message,\n        });\n      } else if (\n        fileInfo.operation === fileIngestion.constants.FILE_OPERATION.DELETE &&\n        !(await this.athenaManager.tableExists(\n          sharedFunctions.getFullTableName(\n            this.clientId,\n            this.modelId,\n            fileInfo.tableName\n          )\n        ))\n      ) {\n        const message = `A table for clientId: ${this.clientId}, modelId: ${this.modelId}, tableName: ${fileInfo.tableName} does not exits in the database.  You cannot delete a table that does not exist `;\n        retval.push({\n          fileName: fileInfo.fileName,\n          tableName: fileInfo.tableName,\n          errorType: FILE_PROCESSING_ERROR_TYPES.TABLE_DOES_NOT_EXIST,\n          message: message,\n        });\n      }\n\n      processedTableFiles.push({\n        fileName: fileInfo.fileName,\n        tableName: fileInfo.tableName,\n      });\n    }\n\n    return retval;\n  }\n\n  private async processFiles(): Promise<boolean> {\n    let viewAffectingOperations = false;\n    for (let i = 0; i < this.fileInfo.length; i++) {\n      const fileInformation = this.fileInfo[i];\n      if (\n        fileInformation.operation === fileIngestion.constants.FILE_OPERATION.ADD\n      ) {\n        await this.addTable(\n          fileInformation.tableName,\n          fileInformation.fileName,\n          fileInformation.fileStream\n        );\n        viewAffectingOperations = true;\n      } else if (\n        fileInformation.operation ===\n        fileIngestion.constants.FILE_OPERATION.APPEND\n      ) {\n        await this.appendFile(\n          fileInformation.tableName,\n          fileInformation.fileName,\n          fileInformation.fileStream\n        );\n      } else if (\n        fileInformation.operation ===\n        fileIngestion.constants.FILE_OPERATION.REPLACE\n      ) {\n        await this.replaceTable(\n          fileInformation.tableName,\n          fileInformation.fileName,\n          fileInformation.fileStream\n        );\n        viewAffectingOperations = true;\n      } else {\n        await this.deleteTable(fileInformation.tableName);\n        viewAffectingOperations = true;\n      }\n    }\n    return viewAffectingOperations;\n  }\n\n  public async process(): Promise<IFileProcessingResult> {\n    let joinInformation: IJoinTableDefinition[] = [];\n    let fileInfoForReturn: fileIngestion.IFileStats[] = [];\n    let processingResults = FILE_PROCESSING_STATUS.UNKNOWN;\n    const errors: IFileProcessingError[] = await this.reconcileFileInfo();\n    if (errors.length) {\n      this.processedFileErrorInformation.push(...errors);\n      fileInfoForReturn = this.fileStatistics;\n      processingResults = FILE_PROCESSING_STATUS.ERROR;\n    } else {\n      try {\n        const needsViewUpdates = await this.processFiles();\n        if (needsViewUpdates) {\n          const reconFileInformation =\n            FileReconciliator.reconcileFileInformation(\n              this.clientId,\n              this.modelId,\n              this.fileInfo,\n              this.processedFileInformation,\n              this.fileStatistics\n            );\n          fileInfoForReturn = reconFileInformation.allFiles;\n          //If we delete all of the tables we will have nothing to create.\n          //eslint-ignore-next\n          if (fileInfoForReturn.length) {\n            joinInformation = (await this.basicAthenaProcessor?.processTables(\n              sharedFunctions.getViewName(this.clientId, this.modelId),\n              reconFileInformation.accumFiles\n            )) as IJoinTableDefinition[];\n          }\n        } else {\n          fileInfoForReturn = this.fileStatistics;\n        }\n        processingResults = this.processedFileErrorInformation.length\n          ? FILE_PROCESSING_STATUS.WARNING\n          : FILE_PROCESSING_STATUS.OK;\n      } catch (err) {\n        const message = `An unexpected error occurred while processing the files.  See the inner errors for additional information: ${err}`;\n        this.processedFileErrorInformation.push({\n          fileName: 'unknown',\n          message: message,\n          errorType: FILE_PROCESSING_ERROR_TYPES.UNEXPECTED_ERROR,\n        });\n        if (err instanceof error.GlyphxError) {\n          err.publish();\n        } else {\n          new error.GlyphxError(message, 999, err, 'UnexpectedError').publish();\n        }\n        processingResults = FILE_PROCESSING_STATUS.ERROR;\n      }\n    }\n    return {\n      fileInformation: fileInfoForReturn,\n      fileProcessingErrors: this.processedFileErrorInformation,\n      joinInformation: joinInformation,\n      status: processingResults,\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"efae282069e30d23513d6eb7c555ea304c8483d5","contentHash":"1ead3b327068b969f96525f4833775a552aa3668d8bd750a3819bc099fddc8f7"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/index.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":375}},"2":{"start":{"line":4,"column":27},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":145}},"4":{"start":{"line":5,"column":92},"end":{"line":5,"column":139}},"5":{"start":{"line":6,"column":30},"end":{"line":6,"column":64}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":154}},"7":{"start":{"line":7,"column":95},"end":{"line":7,"column":148}},"8":{"start":{"line":8,"column":34},"end":{"line":8,"column":72}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":166}},"10":{"start":{"line":9,"column":99},"end":{"line":9,"column":160}},"11":{"start":{"line":10,"column":31},"end":{"line":10,"column":66}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":157}},"13":{"start":{"line":11,"column":96},"end":{"line":11,"column":151}},"14":{"start":{"line":12,"column":29},"end":{"line":12,"column":62}},"15":{"start":{"line":13,"column":0},"end":{"line":13,"column":151}},"16":{"start":{"line":13,"column":94},"end":{"line":13,"column":145}},"17":{"start":{"line":14,"column":30},"end":{"line":14,"column":64}},"18":{"start":{"line":15,"column":0},"end":{"line":15,"column":154}},"19":{"start":{"line":15,"column":95},"end":{"line":15,"column":148}},"20":{"start":{"line":16,"column":35},"end":{"line":16,"column":74}},"21":{"start":{"line":17,"column":0},"end":{"line":17,"column":169}},"22":{"start":{"line":17,"column":100},"end":{"line":17,"column":163}},"23":{"start":{"line":18,"column":25},"end":{"line":18,"column":54}},"24":{"start":{"line":19,"column":0},"end":{"line":19,"column":139}},"25":{"start":{"line":19,"column":90},"end":{"line":19,"column":133}},"26":{"start":{"line":20,"column":29},"end":{"line":20,"column":62}},"27":{"start":{"line":21,"column":0},"end":{"line":21,"column":151}},"28":{"start":{"line":21,"column":94},"end":{"line":21,"column":145}},"29":{"start":{"line":22,"column":22},"end":{"line":22,"column":48}},"30":{"start":{"line":23,"column":0},"end":{"line":23,"column":130}},"31":{"start":{"line":23,"column":87},"end":{"line":23,"column":124}},"32":{"start":{"line":24,"column":26},"end":{"line":24,"column":56}},"33":{"start":{"line":25,"column":0},"end":{"line":25,"column":142}},"34":{"start":{"line":25,"column":91},"end":{"line":25,"column":136}},"35":{"start":{"line":26,"column":26},"end":{"line":26,"column":56}},"36":{"start":{"line":27,"column":0},"end":{"line":27,"column":142}},"37":{"start":{"line":27,"column":91},"end":{"line":27,"column":136}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":78},"end":{"line":5,"column":79}},"loc":{"start":{"line":5,"column":90},"end":{"line":5,"column":141}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":81},"end":{"line":7,"column":82}},"loc":{"start":{"line":7,"column":93},"end":{"line":7,"column":150}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":85},"end":{"line":9,"column":86}},"loc":{"start":{"line":9,"column":97},"end":{"line":9,"column":162}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":82},"end":{"line":11,"column":83}},"loc":{"start":{"line":11,"column":94},"end":{"line":11,"column":153}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":92},"end":{"line":13,"column":147}},"line":13},"5":{"name":"(anonymous_5)","decl":{"start":{"line":15,"column":81},"end":{"line":15,"column":82}},"loc":{"start":{"line":15,"column":93},"end":{"line":15,"column":150}},"line":15},"6":{"name":"(anonymous_6)","decl":{"start":{"line":17,"column":86},"end":{"line":17,"column":87}},"loc":{"start":{"line":17,"column":98},"end":{"line":17,"column":165}},"line":17},"7":{"name":"(anonymous_7)","decl":{"start":{"line":19,"column":76},"end":{"line":19,"column":77}},"loc":{"start":{"line":19,"column":88},"end":{"line":19,"column":135}},"line":19},"8":{"name":"(anonymous_8)","decl":{"start":{"line":21,"column":80},"end":{"line":21,"column":81}},"loc":{"start":{"line":21,"column":92},"end":{"line":21,"column":147}},"line":21},"9":{"name":"(anonymous_9)","decl":{"start":{"line":23,"column":73},"end":{"line":23,"column":74}},"loc":{"start":{"line":23,"column":85},"end":{"line":23,"column":126}},"line":23},"10":{"name":"(anonymous_10)","decl":{"start":{"line":25,"column":77},"end":{"line":25,"column":78}},"loc":{"start":{"line":25,"column":89},"end":{"line":25,"column":138}},"line":25},"11":{"name":"(anonymous_11)","decl":{"start":{"line":27,"column":77},"end":{"line":27,"column":78}},"loc":{"start":{"line":27,"column":89},"end":{"line":27,"column":138}},"line":27}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":35,"5":1,"6":1,"7":6,"8":1,"9":1,"10":2,"11":1,"12":1,"13":8,"14":1,"15":1,"16":5,"17":1,"18":1,"19":3,"20":1,"21":1,"22":7,"23":1,"24":1,"25":5,"26":1,"27":1,"28":43,"29":1,"30":1,"31":0,"32":1,"33":1,"34":8,"35":1,"36":1,"37":5},"f":{"0":35,"1":6,"2":2,"3":8,"4":5,"5":3,"6":7,"7":5,"8":43,"9":0,"10":8,"11":5},"b":{},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/index.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/index.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AAAhD,wHAAA,kBAAkB,OAAA;AAC1B,iEAA8D;AAAtD,8HAAA,qBAAqB,OAAA;AAC7B,yEAAsE;AAA9D,sIAAA,yBAAyB,OAAA;AACjC,mEAAgE;AAAxD,gIAAA,sBAAsB,OAAA;AAC9B,+DAA4D;AAApD,4HAAA,oBAAoB,OAAA;AAC5B,iEAA8D;AAAtD,8HAAA,qBAAqB,OAAA;AAC7B,2EAAwE;AAAhE,wIAAA,0BAA0B,OAAA;AAClC,uDAAoD;AAA5C,oHAAA,gBAAgB,OAAA;AACxB,+DAA4D;AAApD,4HAAA,oBAAoB,OAAA;AAC5B,iDAA8C;AAAtC,8GAAA,aAAa,OAAA;AACrB,yDAAsD;AAA9C,sHAAA,iBAAiB,OAAA;AACzB,yDAAsD;AAA9C,sHAAA,iBAAiB,OAAA","sourcesContent":["export {BasicJoinProcessor} from './basicJoinProcessor';\nexport {BasicHiveQueryPlanner} from './basicHiveQueryPlanner';\nexport {BasicHiveViewQueryPlanner} from './basicHiveViewQueryPlanner';\nexport {BasicColumnNameCleaner} from './basicColumnNameCleaner';\nexport {BasicFileTransformer} from './basicFileTransformer';\nexport {BasicParquetProcessor} from './basicParquetProcessor';\nexport {BasicHiveTableQueryPlanner} from './basicHiveTableQueryPlanner';\nexport {BasicTableSorter} from './basicTableSorter';\nexport {BasicAthenaProcessor} from './basicAthenaProcessor';\nexport {TableArchiver} from './tableArchiver';\nexport {FileUploadManager} from './fileUploadManager';\nexport {FileReconciliator} from './fileReconciliator';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33727e20d63bb3d014feb66992aeb002d85198d9","contentHash":"2d020a06d649212fcee36e8afb92d3747e981bc332ee04640a2ae1d18b33f438"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicJoinProcessor.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicJoinProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":36}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":34}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":31}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":46}},"8":{"start":{"line":42,"column":8},"end":{"line":51,"column":11}},"9":{"start":{"line":43,"column":12},"end":{"line":50,"column":15}},"10":{"start":{"line":61,"column":8},"end":{"line":61,"column":85}},"11":{"start":{"line":62,"column":34},"end":{"line":68,"column":9}},"12":{"start":{"line":69,"column":8},"end":{"line":69,"column":52}},"13":{"start":{"line":70,"column":8},"end":{"line":70,"column":53}},"14":{"start":{"line":71,"column":8},"end":{"line":71,"column":33}},"15":{"start":{"line":81,"column":23},"end":{"line":83,"column":19}},"16":{"start":{"line":81,"column":54},"end":{"line":81,"column":79}},"17":{"start":{"line":84,"column":8},"end":{"line":84,"column":22}},"18":{"start":{"line":101,"column":31},"end":{"line":101,"column":61}},"19":{"start":{"line":102,"column":8},"end":{"line":103,"column":133}},"20":{"start":{"line":103,"column":12},"end":{"line":103,"column":133}},"21":{"start":{"line":104,"column":25},"end":{"line":104,"column":81}},"22":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"23":{"start":{"line":108,"column":12},"end":{"line":108,"column":40}},"24":{"start":{"line":124,"column":31},"end":{"line":124,"column":33}},"25":{"start":{"line":125,"column":8},"end":{"line":142,"column":11}},"26":{"start":{"line":127,"column":12},"end":{"line":141,"column":13}},"27":{"start":{"line":128,"column":34},"end":{"line":128,"column":67}},"28":{"start":{"line":129,"column":40},"end":{"line":136,"column":18}},"29":{"start":{"line":130,"column":36},"end":{"line":131,"column":78}},"30":{"start":{"line":130,"column":70},"end":{"line":131,"column":77}},"31":{"start":{"line":132,"column":20},"end":{"line":135,"column":37}},"32":{"start":{"line":133,"column":24},"end":{"line":133,"column":36}},"33":{"start":{"line":135,"column":24},"end":{"line":135,"column":37}},"34":{"start":{"line":137,"column":16},"end":{"line":140,"column":17}},"35":{"start":{"line":138,"column":20},"end":{"line":138,"column":60}},"36":{"start":{"line":139,"column":20},"end":{"line":139,"column":51}},"37":{"start":{"line":144,"column":8},"end":{"line":169,"column":9}},"38":{"start":{"line":145,"column":12},"end":{"line":157,"column":15}},"39":{"start":{"line":146,"column":16},"end":{"line":156,"column":29}},"40":{"start":{"line":150,"column":20},"end":{"line":150,"column":29}},"41":{"start":{"line":152,"column":21},"end":{"line":156,"column":29}},"42":{"start":{"line":153,"column":20},"end":{"line":153,"column":30}},"43":{"start":{"line":156,"column":20},"end":{"line":156,"column":29}},"44":{"start":{"line":158,"column":30},"end":{"line":158,"column":47}},"45":{"start":{"line":159,"column":40},"end":{"line":159,"column":82}},"46":{"start":{"line":160,"column":12},"end":{"line":160,"column":50}},"47":{"start":{"line":161,"column":12},"end":{"line":168,"column":15}},"48":{"start":{"line":162,"column":16},"end":{"line":167,"column":17}},"49":{"start":{"line":163,"column":20},"end":{"line":163,"column":94}},"50":{"start":{"line":165,"column":20},"end":{"line":165,"column":42}},"51":{"start":{"line":166,"column":20},"end":{"line":166,"column":47}},"52":{"start":{"line":172,"column":0},"end":{"line":172,"column":48}},"53":{"start":{"line":173,"column":0},"end":{"line":173,"column":37}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":19},"end":{"line":16,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":18},"end":{"line":24,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":30},"end":{"line":33,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":31},"end":{"line":52,"column":5}},"line":41},"4":{"name":"(anonymous_4)","decl":{"start":{"line":42,"column":24},"end":{"line":42,"column":25}},"loc":{"start":{"line":42,"column":38},"end":{"line":51,"column":9}},"line":42},"5":{"name":"(anonymous_5)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":50},"end":{"line":72,"column":5}},"line":60},"6":{"name":"(anonymous_6)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":30},"end":{"line":85,"column":5}},"line":80},"7":{"name":"(anonymous_7)","decl":{"start":{"line":81,"column":49},"end":{"line":81,"column":50}},"loc":{"start":{"line":81,"column":54},"end":{"line":81,"column":79}},"line":81},"8":{"name":"(anonymous_8)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":57},"end":{"line":110,"column":5}},"line":98},"9":{"name":"(anonymous_9)","decl":{"start":{"line":123,"column":4},"end":{"line":123,"column":5}},"loc":{"start":{"line":123,"column":24},"end":{"line":170,"column":5}},"line":123},"10":{"name":"(anonymous_10)","decl":{"start":{"line":125,"column":37},"end":{"line":125,"column":38}},"loc":{"start":{"line":125,"column":55},"end":{"line":142,"column":9}},"line":125},"11":{"name":"(anonymous_11)","decl":{"start":{"line":129,"column":65},"end":{"line":129,"column":66}},"loc":{"start":{"line":129,"column":84},"end":{"line":136,"column":17}},"line":129},"12":{"name":"(anonymous_12)","decl":{"start":{"line":130,"column":55},"end":{"line":130,"column":56}},"loc":{"start":{"line":130,"column":70},"end":{"line":131,"column":77}},"line":130},"13":{"name":"(anonymous_13)","decl":{"start":{"line":145,"column":32},"end":{"line":145,"column":33}},"loc":{"start":{"line":145,"column":44},"end":{"line":157,"column":13}},"line":145},"14":{"name":"(anonymous_14)","decl":{"start":{"line":161,"column":34},"end":{"line":161,"column":35}},"loc":{"start":{"line":161,"column":39},"end":{"line":168,"column":13}},"line":161},"15":{"name":"(anonymous_15)","decl":{"start":{"line":162,"column":43},"end":{"line":162,"column":44}},"loc":{"start":{"line":162,"column":49},"end":{"line":164,"column":17}},"line":162}},"branchMap":{"0":{"loc":{"start":{"line":81,"column":23},"end":{"line":83,"column":19}},"type":"cond-expr","locations":[{"start":{"line":82,"column":14},"end":{"line":82,"column":18}},{"start":{"line":83,"column":14},"end":{"line":83,"column":19}}],"line":81},"1":{"loc":{"start":{"line":102,"column":8},"end":{"line":103,"column":133}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":103,"column":133}},{"start":{"line":102,"column":8},"end":{"line":103,"column":133}}],"line":102},"2":{"loc":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},{"start":{"line":107,"column":8},"end":{"line":109,"column":9}}],"line":107},"3":{"loc":{"start":{"line":127,"column":12},"end":{"line":141,"column":13}},"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":141,"column":13}},{"start":{"line":127,"column":12},"end":{"line":141,"column":13}}],"line":127},"4":{"loc":{"start":{"line":130,"column":70},"end":{"line":131,"column":77}},"type":"binary-expr","locations":[{"start":{"line":130,"column":70},"end":{"line":130,"column":123}},{"start":{"line":131,"column":24},"end":{"line":131,"column":77}}],"line":130},"5":{"loc":{"start":{"line":132,"column":20},"end":{"line":135,"column":37}},"type":"if","locations":[{"start":{"line":132,"column":20},"end":{"line":135,"column":37}},{"start":{"line":132,"column":20},"end":{"line":135,"column":37}}],"line":132},"6":{"loc":{"start":{"line":137,"column":16},"end":{"line":140,"column":17}},"type":"if","locations":[{"start":{"line":137,"column":16},"end":{"line":140,"column":17}},{"start":{"line":137,"column":16},"end":{"line":140,"column":17}}],"line":137},"7":{"loc":{"start":{"line":144,"column":8},"end":{"line":169,"column":9}},"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":169,"column":9}},{"start":{"line":144,"column":8},"end":{"line":169,"column":9}}],"line":144},"8":{"loc":{"start":{"line":146,"column":16},"end":{"line":156,"column":29}},"type":"if","locations":[{"start":{"line":146,"column":16},"end":{"line":156,"column":29}},{"start":{"line":146,"column":16},"end":{"line":156,"column":29}}],"line":146},"9":{"loc":{"start":{"line":152,"column":21},"end":{"line":156,"column":29}},"type":"if","locations":[{"start":{"line":152,"column":21},"end":{"line":156,"column":29}},{"start":{"line":152,"column":21},"end":{"line":156,"column":29}}],"line":152},"10":{"loc":{"start":{"line":162,"column":16},"end":{"line":167,"column":17}},"type":"if","locations":[{"start":{"line":162,"column":16},"end":{"line":167,"column":17}},{"start":{"line":162,"column":16},"end":{"line":167,"column":17}}],"line":162},"11":{"loc":{"start":{"line":163,"column":28},"end":{"line":163,"column":92}},"type":"binary-expr","locations":[{"start":{"line":163,"column":28},"end":{"line":163,"column":58}},{"start":{"line":163,"column":62},"end":{"line":163,"column":92}}],"line":163}},"s":{"0":1,"1":1,"2":1,"3":1,"4":35,"5":35,"6":35,"7":20,"8":25,"9":52,"10":25,"11":25,"12":25,"13":25,"14":25,"15":20,"16":20,"17":20,"18":18,"19":18,"20":1,"21":17,"22":17,"23":10,"24":10,"25":10,"26":24,"27":14,"28":14,"29":40,"30":110,"31":40,"32":17,"33":23,"34":14,"35":12,"36":12,"37":10,"38":9,"39":3,"40":1,"41":2,"42":1,"43":1,"44":9,"45":9,"46":9,"47":9,"48":28,"49":74,"50":13,"51":13,"52":1,"53":1},"f":{"0":1,"1":35,"2":20,"3":25,"4":52,"5":25,"6":20,"7":20,"8":18,"9":10,"10":24,"11":40,"12":110,"13":3,"14":28,"15":74},"b":{"0":[2,18],"1":[1,17],"2":[10,7],"3":[14,10],"4":[110,26],"5":[17,23],"6":[12,2],"7":[9,1],"8":[1,2],"9":[1,1],"10":[13,15],"11":[74,18]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicJoinProcessor.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicJoinProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fileProcessingInterfaces from '@interfaces/fileProcessing';\nimport {error} from '@glyphx/core';\n\n/**\n * IJoinData is an internal interface for holding temorary join information.\n *\n */\ninterface IJoinData extends fileProcessingInterfaces.IJoinTableDefinition {\n  joinColumns: fileProcessingInterfaces.IJoinTableColumnDefinition[];\n}\n/**\n * creates an array of IJoinTableDefinitions that\n * define how table relate to each other.  The primary external interface\n * for clients in the processColumns function.\n */\nexport class BasicJoinProcessor\n  implements fileProcessingInterfaces.IJoinProcessor\n{\n  /**\n   *  The tables that have been processed by the join processor.\n   */\n  private processedTables: fileProcessingInterfaces.IJoinTableDefinition[];\n\n  /**\n   * The value of the zero based index of the last/current processed file.\n   */\n  private currentIndex: number;\n\n  /**\n   * The value of the Alias of the last/current processed file.  The Alias is\n   * calculated as 'A' + current index.\n   */\n  private currentAlias: string;\n\n  /**\n   * Exposes our processed tables to the outside world.\n   */\n  public get joinData(): fileProcessingInterfaces.IJoinTableDefinition[] {\n    return this.processedTables;\n  }\n  /**\n   * The constructor\n   */\n  constructor() {\n    this.processedTables = [];\n    this.currentIndex = -1;\n    this.currentAlias = '@'; //A - 1, consult your handy ASCII chart\n  }\n\n  //TODO: we may also want to remove any other special characters i.e. # or $\n  /**\n   * standardizes the table name so that duplicate tables are not included.\n   *\n   * @param tableName -- the name of the table to clean.\n   */\n  private cleanTableName(tableName: string) {\n    return tableName.trim().toLowerCase();\n  }\n\n  /**\n   * Processes the IFieldDefinition[] values and adds them to\n   * an existing IJoinTableDefinition.\n   *\n   * @param table -- the table to which to add the columns.\n   * @param columns -- the fields to be processed into columns\n   */\n  private addColumns(\n    table: fileProcessingInterfaces.IJoinTableDefinition,\n    columns: fileProcessingInterfaces.IFieldDefinition[]\n  ): void {\n    columns.forEach((c, index) => {\n      table.columns.push({\n        tableDefinition: table,\n        columnIndex: index,\n        columnName: c.name,\n        columnType: c.fieldType,\n        isJoinColumn: false,\n        isSelectedColumn: true,\n      });\n    });\n  }\n\n  /**\n   * Adds a table to this.processedTables\n   *\n   * @param tableName -- the name of the table to add (should already be cleaned)\n   * @param backingFileName -- the name of the file that holds the tables data.\n   * @param columns -- the fields that are included in the table.\n   */\n  private addTable(\n    tableName: string,\n    backingFileName: string,\n    columns: fileProcessingInterfaces.IFieldDefinition[]\n  ): fileProcessingInterfaces.IJoinTableDefinition {\n    this.currentAlias = String.fromCharCode(\n      this.currentAlias.charCodeAt(0) + 1\n    );\n    const newProcessedTable: fileProcessingInterfaces.IJoinTableDefinition = {\n      tableName: tableName,\n      tableIndex: ++this.currentIndex,\n      tableAlias: this.currentAlias,\n      backingFileName: backingFileName,\n      columns: [],\n    };\n    this.addColumns(newProcessedTable, columns);\n    this.processedTables.push(newProcessedTable);\n    return newProcessedTable;\n  }\n\n  /**\n   * checks processedTables to see if the table has already been added.\n   *\n   * @param tableName -- the name of the table (should already be cleaned).\n   *\n   * @returns true if the table exists\n   */\n  private doesTableExist(tableName: string): boolean {\n    const retVal = this.processedTables.find(t => t.tableName === tableName)\n      ? true\n      : false;\n    return retVal;\n  }\n\n  /**\n   * this is the main processing point for this class.  It will process a table and it's columns\n   * and determine the best way to join the tables.  This function assumes that the tables\n   * are passed in the order that they should be evaluated ... left to right.  Said another way,\n   * this version of the class will always try to join left to right so it is the callers\n   * responsibility to endire that the tables are in a sensible order.\n   *\n   * @param tableName -- the name of the table to process.\n   * @param columns -- the fields to process as part of this table.\n   *\n   * @throws error.InvalidArgumentError -- if the tableName already exists.\n   */\n  public processColumns(\n    tableName: string,\n    backingTableName: string,\n    columns: fileProcessingInterfaces.IFieldDefinition[]\n  ) {\n    //1. check for an existing table\n    //2. if the table already exisits what should we do?  For now lets just throw an error\n    const cleanTableName = this.cleanTableName(tableName);\n    if (this.doesTableExist(cleanTableName))\n      throw new error.InvalidArgumentError(\n        `A table with the name ${tableName} already exists`,\n        'tableName',\n        tableName\n      );\n\n    const newTable = this.addTable(cleanTableName, backingTableName, columns);\n\n    //if this is the first table there is nothing to join to\n    //so no need to do any more processing\n    if (this.processedTables.length !== 1) {\n      this.processJoins(newTable);\n    }\n  }\n\n  /**\n   * this function will take a table and determine the\n   * join information for it.  For this application, we are only processing these\n   * as left outer joins, so we will not re-calculate the joins to tables already\n   * defined.  A join is calculated by comparing column names and field types to\n   * tables in the processedTables array. The most matching columns wins.  In the\n   * case of a tie, the table will be joined to the table with the lower index\n   *\n   * @param table  the table that are joining to the other tables\n   *\n   *\n   */\n  private processJoins(\n    table: fileProcessingInterfaces.IJoinTableDefinition\n  ): void {\n    const joinTablesData: IJoinData[] = [];\n    this.processedTables.forEach(processedTable => {\n      //no self joins, that would make things a mess\n      if (processedTable.tableIndex !== table.tableIndex) {\n        const joinTable = Object.assign({}, processedTable) as IJoinData;\n\n        const matchingColumns = joinTable.columns.filter(joinTablecolumn => {\n          const isMatch = table.columns.find(\n            tableColumn =>\n              joinTablecolumn.columnName === tableColumn.columnName &&\n              joinTablecolumn.columnType === tableColumn.columnType\n          );\n\n          if (isMatch) return true;\n          else return false;\n        });\n        if (matchingColumns.length) {\n          joinTable.joinColumns = matchingColumns;\n          joinTablesData.push(joinTable);\n        }\n      }\n    });\n    //do we have at least one table to join to\n    if (joinTablesData.length) {\n      joinTablesData.sort((s1, s2) => {\n        if (s1.joinColumns.length === s2.joinColumns.length) {\n          //In this instance, the array is already ordered\n          //by tableIndex.  S1 will always have a index greater than S2, so returning 1 should give us the result that we want.\n          //At least this is what I see in testing.\n          return 1;\n        } else if (s1.joinColumns.length > s2.joinColumns.length) {\n          return -1;\n        } else return 1;\n      });\n\n      const joinTable = joinTablesData[0];\n      const joinTableDefinition = this.processedTables[joinTable.tableIndex];\n      table.joinTable = joinTableDefinition;\n      table.columns.forEach(c => {\n        if (\n          joinTable.columns.find(jc => {\n            return (\n              jc.columnName === c.columnName && jc.columnType === c.columnType\n            );\n          })\n        ) {\n          c.isJoinColumn = true;\n          c.isSelectedColumn = false; //If we are joining on this column then we do not need to display it\n        }\n      });\n    }\n  }\n}\n\nexport default BasicJoinProcessor;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ee961814c313d06aeba9964f8df1962a16cee551","contentHash":"f7ec8c93570149aba88b10946f033bdcdf8cee5279c22984bc43d319a6482083"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveQueryPlanner.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveQueryPlanner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":31}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":29}},"4":{"start":{"line":28,"column":27},"end":{"line":28,"column":29}},"5":{"start":{"line":29,"column":22},"end":{"line":29,"column":24}},"6":{"start":{"line":30,"column":8},"end":{"line":49,"column":11}},"7":{"start":{"line":31,"column":28},"end":{"line":31,"column":40}},"8":{"start":{"line":32,"column":30},"end":{"line":32,"column":53}},"9":{"start":{"line":33,"column":27},"end":{"line":33,"column":63}},"10":{"start":{"line":34,"column":29},"end":{"line":34,"column":53}},"11":{"start":{"line":35,"column":29},"end":{"line":35,"column":79}},"12":{"start":{"line":36,"column":29},"end":{"line":36,"column":31}},"13":{"start":{"line":37,"column":12},"end":{"line":44,"column":15}},"14":{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},"15":{"start":{"line":39,"column":20},"end":{"line":39,"column":66}},"16":{"start":{"line":41,"column":16},"end":{"line":43,"column":17}},"17":{"start":{"line":42,"column":20},"end":{"line":42,"column":93}},"18":{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},"19":{"start":{"line":46,"column":16},"end":{"line":46,"column":53}},"20":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"21":{"start":{"line":50,"column":22},"end":{"line":50,"column":75}},"22":{"start":{"line":51,"column":8},"end":{"line":51,"column":32}},"23":{"start":{"line":52,"column":8},"end":{"line":52,"column":21}},"24":{"start":{"line":55,"column":0},"end":{"line":55,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":16},"end":{"line":15,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":18},"end":{"line":21,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":27},"end":{"line":53,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":26},"end":{"line":30,"column":27}},"loc":{"start":{"line":30,"column":36},"end":{"line":49,"column":9}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":30},"end":{"line":37,"column":31}},"loc":{"start":{"line":37,"column":35},"end":{"line":44,"column":13}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":27},"end":{"line":33,"column":63}},"type":"cond-expr","locations":[{"start":{"line":33,"column":37},"end":{"line":33,"column":43}},{"start":{"line":33,"column":46},"end":{"line":33,"column":63}}],"line":33},"1":{"loc":{"start":{"line":34,"column":29},"end":{"line":34,"column":53}},"type":"cond-expr","locations":[{"start":{"line":34,"column":43},"end":{"line":34,"column":48}},{"start":{"line":34,"column":51},"end":{"line":34,"column":53}}],"line":34},"2":{"loc":{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},"type":"if","locations":[{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},{"start":{"line":38,"column":16},"end":{"line":40,"column":17}}],"line":38},"3":{"loc":{"start":{"line":41,"column":16},"end":{"line":43,"column":17}},"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":43,"column":17}},{"start":{"line":41,"column":16},"end":{"line":43,"column":17}}],"line":41},"4":{"loc":{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},{"start":{"line":45,"column":12},"end":{"line":47,"column":13}}],"line":45}},"s":{"0":1,"1":1,"2":1,"3":8,"4":8,"5":8,"6":8,"7":13,"8":13,"9":13,"10":13,"11":13,"12":13,"13":13,"14":28,"15":22,"16":28,"17":6,"18":13,"19":4,"20":13,"21":8,"22":8,"23":8,"24":1},"f":{"0":1,"1":8,"2":8,"3":13,"4":28},"b":{"0":[8,5],"1":[4,9],"2":[22,6],"3":[6,22],"4":[4,9]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveQueryPlanner.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveQueryPlanner.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACH,MAAa,qBAAqB;IAIhC;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACH;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,WAAW,CACT,SAA0D;QAE1D,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACzB,MAAM,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC;YAC7B,MAAM,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,UAAU,CAAC;YAC1C,MAAM,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC;YACpD,MAAM,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YAE1C,IAAI,UAAU,GAAG,GAAG,MAAM,IAAI,CAAC,CAAC,SAAS,IAAI,OAAO,IAAI,QAAQ,GAAG,CAAC;YACpE,MAAM,QAAQ,GAAa,EAAE,CAAC;YAC9B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACpB,IAAI,CAAC,CAAC,gBAAgB,EAAE;oBACtB,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;iBAC/C;gBAED,IAAI,CAAC,CAAC,YAAY,EAAE;oBAClB,QAAQ,CAAC,IAAI,CACX,GAAG,SAAS,IAAI,CAAC,CAAC,UAAU,IAAI,OAAO,IAAI,CAAC,CAAC,UAAU,EAAE,CAC1D,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,UAAU,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACtC;YAED,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,UAAU,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAEpE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA9DD,sDA8DC","sourcesContent":["import * as fileProcessingInterfaces from '@interfaces/fileProcessing';\n\n/**\n * This class will take an array of {@link interfaces/fileProcessing/iJoinTableDefinition!IJoinTableDefinition}\n * and create a SELECT query which will join thed table together and select the approriate fields.\n * This query can them be used downstream to create a view of our data.\n */\nexport class BasicHiveQueryPlanner\n  implements fileProcessingInterfaces.IQueryPlanner\n{\n  private queryField: string;\n  /**\n   * Returns the query that was defined by the last call to {@link defineQuery} See {@link interfaces/fileProcessing/iQueryPlanner!IQueryPlanner.query | IQueryPlanner.query } for additional information.\n   */\n  get query(): string {\n    return this.queryField;\n  }\n\n  /**\n   * Builds a new BasicHiveQueryPlanner object.\n   */\n  constructor() {\n    this.queryField = '';\n  }\n\n  /**\n   * This function does most of the work for this class.  It will take in\n   * the tableData and convert it to a string which represents the SELECT\n   * query. See {@link interfaces/fileProcessing/iQueryPlanner!IQueryPlanner.query | IQueryPlanner.defineQuery } for additional details.\n   */\n  defineQuery(\n    tableData: fileProcessingInterfaces.IJoinTableDefinition[]\n  ): string {\n    const selections: string[] = [];\n    const joins: string[] = [];\n\n    tableData.forEach((t, i) => {\n      const myAlias = t.tableAlias;\n      const joinAlias = t.joinTable?.tableAlias;\n      const prefix = i === 0 ? 'FROM' : 'LEFT OUTER JOIN';\n      const onPhrase = t.joinTable ? 'ON ' : '';\n\n      let joinPhrase = `${prefix} ${t.tableName} ${myAlias} ${onPhrase} `;\n      const subJoins: string[] = [];\n      t.columns.forEach(c => {\n        if (c.isSelectedColumn) {\n          selections.push(`${myAlias}.${c.columnName}`);\n        }\n\n        if (c.isJoinColumn) {\n          subJoins.push(\n            `${joinAlias}.${c.columnName}=${myAlias}.${c.columnName}`\n          );\n        }\n      });\n\n      if (subJoins.length) {\n        joinPhrase += subJoins.join(' AND ');\n      }\n\n      joins.push(joinPhrase);\n    });\n\n    const query = `SELECT ${selections.join(',')}\\n${joins.join('\\n')}`;\n\n    this.queryField = query;\n\n    return query;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"44a2f5e784c1dea9e73da6db5305dce8c0b3a77e","contentHash":"196c926cf772b4151bd20a43a74ca4a0cd512c07902782efbd7c5123c1eddb9f"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveViewQueryPlanner.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveViewQueryPlanner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":4,"column":32},"end":{"line":4,"column":66}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":30}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":16}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":28}},"6":{"start":{"line":28,"column":28},"end":{"line":28,"column":55}},"7":{"start":{"line":29,"column":23},"end":{"line":30,"column":18}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":32}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":22}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":15},"end":{"line":16,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":18},"end":{"line":23,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":36},"end":{"line":33,"column":5}},"line":27}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":1},"f":{"0":1,"1":2,"2":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveViewQueryPlanner.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveViewQueryPlanner.ts"],"names":[],"mappings":";;;AAAA,mEAA8D;AAO9D;;;;GAIG;AACH,MAAa,yBACX,SAAQ,6CAAqB;IAK7B;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,QAAgB,EAAE,SAAiC;QAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,eAAe,QAAQ;KACrC,WAAW,EAAE,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QACxB,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA/BD,8DA+BC","sourcesContent":["import {BasicHiveQueryPlanner} from './basicHiveQueryPlanner';\n\nimport {\n  IViewQueryPlanner,\n  IJoinTableDefinition,\n} from '@interfaces/fileProcessing';\n\n/**\n * This class will create a string which can be used to create a view\n * based on a set of {@link interfaces/fileProcessing/iJoinTableDefinition!IJoinTableDefinition | IJoinTableDefinitions}\n *\n */\nexport class BasicHiveViewQueryPlanner\n  extends BasicHiveQueryPlanner\n  implements IViewQueryPlanner\n{\n  private viewField: string;\n\n  /**\n   * see {@link interfaces/fileProcessing/iViewQueryPlanner!IViewQueryPlanner.view | IViewQueryPlanner.view } for more information.\n   */\n  get view(): string {\n    return this.viewField;\n  }\n\n  /**\n   * Builds a new BasicHiveQueryPlanner object\n   */\n  constructor() {\n    super();\n    this.viewField = '';\n  }\n\n  /**\n   * The meat of our class.  See {@link interfaces/fileProcessing/iViewQueryPlanner!IViewQueryPlanner.defineView | IViewQueryPlanner.defineView} for more information\n   */\n  defineView(viewName: string, tableData: IJoinTableDefinition[]): string {\n    const selectQuery = this.defineQuery(tableData);\n    const retval = `CREATE VIEW ${viewName} AS\n\t  ${selectQuery}`;\n    this.viewField = retval;\n    return retval;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"80c8c2c15cf7c91b56f4447aaef24c20d0982036","contentHash":"caa9408da846f4dd640e1e3bf3fde1cb119dd7367cbdaf898fafca1d837dad91"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicColumnNameCleaner.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicColumnNameCleaner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":13,"column":8},"end":{"line":18,"column":10}},"3":{"start":{"line":25,"column":25},"end":{"line":25,"column":27}},"4":{"start":{"line":26,"column":26},"end":{"line":26,"column":45}},"5":{"start":{"line":27,"column":8},"end":{"line":38,"column":9}},"6":{"start":{"line":27,"column":21},"end":{"line":27,"column":22}},"7":{"start":{"line":28,"column":30},"end":{"line":28,"column":53}},"8":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"9":{"start":{"line":29,"column":49},"end":{"line":29,"column":64}},"10":{"start":{"line":30,"column":16},"end":{"line":30,"column":35}},"11":{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},"12":{"start":{"line":36,"column":16},"end":{"line":36,"column":62}},"13":{"start":{"line":39,"column":20},"end":{"line":39,"column":37}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":19}},"15":{"start":{"line":43,"column":0},"end":{"line":43,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":18},"end":{"line":19,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":27},"end":{"line":41,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":44},"end":{"line":29,"column":45}},"loc":{"start":{"line":29,"column":49},"end":{"line":29,"column":64}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},{"start":{"line":29,"column":12},"end":{"line":31,"column":13}}],"line":29},"1":{"loc":{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},{"start":{"line":32,"column":12},"end":{"line":37,"column":13}}],"line":32},"2":{"loc":{"start":{"line":32,"column":16},"end":{"line":34,"column":53}},"type":"binary-expr","locations":[{"start":{"line":32,"column":16},"end":{"line":32,"column":32}},{"start":{"line":33,"column":17},"end":{"line":33,"column":32}},{"start":{"line":33,"column":36},"end":{"line":33,"column":51}},{"start":{"line":34,"column":17},"end":{"line":34,"column":32}},{"start":{"line":34,"column":36},"end":{"line":34,"column":52}}],"line":32}},"s":{"0":1,"1":1,"2":8,"3":13,"4":13,"5":13,"6":13,"7":177,"8":177,"9":702,"10":4,"11":177,"12":144,"13":13,"14":13,"15":1},"f":{"0":8,"1":13,"2":702},"b":{"0":[4,173],"1":[144,33],"2":[177,176,160,166,138]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicColumnNameCleaner.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicColumnNameCleaner.ts"],"names":[],"mappings":";;;AACA;;GAEG;AACH,MAAa,sBAAsB;IAAnC;QAGE;;;WAGG;QACc,sBAAiB,GAAG;YACnC,EAAE;YACF,EAAE;YACF,EAAE;YACF,EAAE,EAAE,GAAG;SACR,CAAC;IA0BJ,CAAC;IAzBC;;;OAGG;IACH,eAAe,CAAC,KAAa;QAC3B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,EAAE;gBACrD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB;YACD,IACE,SAAS,KAAK,EAAE,IAAI,GAAG;gBACvB,CAAC,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK;gBAC7C,CAAC,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,GAAG,CAAC,CAAC,KAAK;cAC3C;gBACA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;aAC/C;SACF;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE9B,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AAtCD,wDAsCC","sourcesContent":["import * as fileProcessingInterfaces from '@interfaces/fileProcessing';\n/**\n * Implements {@link interfaces/fileProcessing/iColumnNameCleaner!IColumnNameCleaner} to provide basic column name cleaning.\n */\nexport class BasicColumnNameCleaner\n  implements fileProcessingInterfaces.IColumnNameCleaner\n{\n  /**\n   * a list of codes that will be replaced with an _ (underscore)\n   *\n   */\n  private readonly REPLACEABLE_CHARS = [\n    32, //space\n    40, //(\n    41, //)\n    45, //-\n  ];\n  /**\n   * See the IcolumnNameInterface for additional information --\n   * {@link interfaces/fileProcessing/iColumnNameCleaner!IColumnNameCleaner.cleanColumnName}\n   */\n  cleanColumnName(value: string): string {\n    const outArray: string[] = [];\n    const tempValue = value.toLowerCase();\n    for (let i = 0; i < tempValue.length; i++) {\n      const charValue = tempValue.charCodeAt(i);\n      if (this.REPLACEABLE_CHARS.find(c => c === charValue)) {\n        outArray.push('_');\n      }\n      if (\n        charValue === 95 || //_\n        (charValue >= 48 && charValue <= 57) || //0-9\n        (charValue >= 97 && charValue <= 122) //a-z\n      ) {\n        outArray.push(String.fromCharCode(charValue));\n      }\n    }\n\n    const ret = outArray.join('');\n\n    return ret;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1552ace49eac30d192d5f2a1a70750e7ed66ddeb","contentHash":"bb7786bc4297c276bfdb3b953cc5bb208fe59443868eb2f87c66a5979a460ffb"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicFileTransformer.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicFileTransformer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":27},"end":{"line":6,"column":54}},"5":{"start":{"line":8,"column":16},"end":{"line":8,"column":40}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":36}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":29}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":33}},"9":{"start":{"line":29,"column":8},"end":{"line":29,"column":47}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":45}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":35}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":43}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":33}},"14":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}},"15":{"start":{"line":35,"column":8},"end":{"line":35,"column":43}},"16":{"start":{"line":36,"column":8},"end":{"line":36,"column":55}},"17":{"start":{"line":37,"column":8},"end":{"line":37,"column":37}},"18":{"start":{"line":38,"column":8},"end":{"line":38,"column":41}},"19":{"start":{"line":39,"column":8},"end":{"line":39,"column":27}},"20":{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":36}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":78}},"23":{"start":{"line":44,"column":8},"end":{"line":44,"column":57}},"24":{"start":{"line":46,"column":8},"end":{"line":68,"column":11}},"25":{"start":{"line":47,"column":12},"end":{"line":67,"column":15}},"26":{"start":{"line":55,"column":20},"end":{"line":63,"column":22}},"27":{"start":{"line":76,"column":8},"end":{"line":79,"column":9}},"28":{"start":{"line":77,"column":12},"end":{"line":77,"column":80}},"29":{"start":{"line":77,"column":48},"end":{"line":77,"column":78}},"30":{"start":{"line":78,"column":12},"end":{"line":78,"column":33}},"31":{"start":{"line":80,"column":8},"end":{"line":80,"column":19}},"32":{"start":{"line":88,"column":26},"end":{"line":88,"column":28}},"33":{"start":{"line":89,"column":8},"end":{"line":98,"column":9}},"34":{"start":{"line":90,"column":12},"end":{"line":90,"column":26}},"35":{"start":{"line":91,"column":40},"end":{"line":91,"column":89}},"36":{"start":{"line":92,"column":12},"end":{"line":97,"column":15}},"37":{"start":{"line":99,"column":8},"end":{"line":99,"column":30}},"38":{"start":{"line":105,"column":23},"end":{"line":105,"column":25}},"39":{"start":{"line":106,"column":8},"end":{"line":116,"column":11}},"40":{"start":{"line":107,"column":12},"end":{"line":115,"column":14}},"41":{"start":{"line":117,"column":8},"end":{"line":117,"column":22}},"42":{"start":{"line":125,"column":8},"end":{"line":125,"column":25}},"43":{"start":{"line":126,"column":23},"end":{"line":126,"column":25}},"44":{"start":{"line":127,"column":26},"end":{"line":127,"column":27}},"45":{"start":{"line":128,"column":8},"end":{"line":160,"column":9}},"46":{"start":{"line":129,"column":40},"end":{"line":129,"column":103}},"47":{"start":{"line":129,"column":73},"end":{"line":129,"column":102}},"48":{"start":{"line":130,"column":31},"end":{"line":130,"column":41}},"49":{"start":{"line":131,"column":24},"end":{"line":131,"column":28}},"50":{"start":{"line":132,"column":12},"end":{"line":133,"column":71}},"51":{"start":{"line":133,"column":16},"end":{"line":133,"column":71}},"52":{"start":{"line":134,"column":12},"end":{"line":154,"column":13}},"53":{"start":{"line":144,"column":16},"end":{"line":144,"column":29}},"54":{"start":{"line":145,"column":16},"end":{"line":153,"column":19}},"55":{"start":{"line":159,"column":12},"end":{"line":159,"column":26}},"56":{"start":{"line":161,"column":8},"end":{"line":161,"column":22}},"57":{"start":{"line":167,"column":8},"end":{"line":167,"column":76}},"58":{"start":{"line":167,"column":44},"end":{"line":167,"column":74}},"59":{"start":{"line":168,"column":8},"end":{"line":175,"column":11}},"60":{"start":{"line":169,"column":12},"end":{"line":172,"column":13}},"61":{"start":{"line":170,"column":31},"end":{"line":170,"column":57}},"62":{"start":{"line":171,"column":16},"end":{"line":171,"column":34}},"63":{"start":{"line":173,"column":29},"end":{"line":173,"column":45}},"64":{"start":{"line":174,"column":12},"end":{"line":174,"column":32}},"65":{"start":{"line":176,"column":8},"end":{"line":176,"column":33}},"66":{"start":{"line":184,"column":8},"end":{"line":193,"column":9}},"67":{"start":{"line":185,"column":26},"end":{"line":185,"column":36}},"68":{"start":{"line":186,"column":40},"end":{"line":186,"column":103}},"69":{"start":{"line":186,"column":73},"end":{"line":186,"column":102}},"70":{"start":{"line":194,"column":8},"end":{"line":194,"column":35}},"71":{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},"72":{"start":{"line":204,"column":12},"end":{"line":204,"column":40}},"73":{"start":{"line":206,"column":8},"end":{"line":209,"column":9}},"74":{"start":{"line":207,"column":12},"end":{"line":207,"column":33}},"75":{"start":{"line":208,"column":12},"end":{"line":208,"column":44}},"76":{"start":{"line":210,"column":8},"end":{"line":220,"column":9}},"77":{"start":{"line":211,"column":12},"end":{"line":211,"column":39}},"78":{"start":{"line":212,"column":12},"end":{"line":212,"column":23}},"79":{"start":{"line":213,"column":12},"end":{"line":213,"column":19}},"80":{"start":{"line":216,"column":29},"end":{"line":216,"column":49}},"81":{"start":{"line":217,"column":12},"end":{"line":217,"column":32}},"82":{"start":{"line":218,"column":12},"end":{"line":218,"column":23}},"83":{"start":{"line":219,"column":12},"end":{"line":219,"column":19}},"84":{"start":{"line":223,"column":0},"end":{"line":223,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":178},"end":{"line":69,"column":5}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":46,"column":26},"end":{"line":46,"column":27}},"loc":{"start":{"line":46,"column":32},"end":{"line":68,"column":9}},"line":46},"2":{"name":"(anonymous_2)","decl":{"start":{"line":54,"column":52},"end":{"line":54,"column":53}},"loc":{"start":{"line":54,"column":57},"end":{"line":64,"column":17}},"line":54},"3":{"name":"(anonymous_3)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":21},"end":{"line":81,"column":5}},"line":75},"4":{"name":"(anonymous_4)","decl":{"start":{"line":77,"column":43},"end":{"line":77,"column":44}},"loc":{"start":{"line":77,"column":48},"end":{"line":77,"column":78}},"line":77},"5":{"name":"(anonymous_5)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":27},"end":{"line":100,"column":5}},"line":87},"6":{"name":"(anonymous_6)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":26},"end":{"line":118,"column":5}},"line":104},"7":{"name":"(anonymous_7)","decl":{"start":{"line":106,"column":39},"end":{"line":106,"column":40}},"loc":{"start":{"line":106,"column":44},"end":{"line":116,"column":9}},"line":106},"8":{"name":"(anonymous_8)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":20},"end":{"line":162,"column":5}},"line":124},"9":{"name":"(anonymous_9)","decl":{"start":{"line":129,"column":68},"end":{"line":129,"column":69}},"loc":{"start":{"line":129,"column":73},"end":{"line":129,"column":102}},"line":129},"10":{"name":"(anonymous_10)","decl":{"start":{"line":166,"column":4},"end":{"line":166,"column":5}},"loc":{"start":{"line":166,"column":20},"end":{"line":177,"column":5}},"line":166},"11":{"name":"(anonymous_11)","decl":{"start":{"line":167,"column":39},"end":{"line":167,"column":40}},"loc":{"start":{"line":167,"column":44},"end":{"line":167,"column":74}},"line":167},"12":{"name":"(anonymous_12)","decl":{"start":{"line":168,"column":31},"end":{"line":168,"column":32}},"loc":{"start":{"line":168,"column":45},"end":{"line":175,"column":9}},"line":168},"13":{"name":"(anonymous_13)","decl":{"start":{"line":183,"column":4},"end":{"line":183,"column":5}},"loc":{"start":{"line":183,"column":26},"end":{"line":195,"column":5}},"line":183},"14":{"name":"(anonymous_14)","decl":{"start":{"line":186,"column":68},"end":{"line":186,"column":69}},"loc":{"start":{"line":186,"column":73},"end":{"line":186,"column":102}},"line":186},"15":{"name":"(anonymous_15)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":42},"end":{"line":221,"column":5}},"line":202}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":160},"end":{"line":25,"column":176}},"type":"default-arg","locations":[{"start":{"line":25,"column":173},"end":{"line":25,"column":176}}],"line":25},"1":{"loc":{"start":{"line":59,"column":39},"end":{"line":62,"column":39}},"type":"cond-expr","locations":[{"start":{"line":61,"column":30},"end":{"line":61,"column":46}},{"start":{"line":62,"column":30},"end":{"line":62,"column":39}}],"line":59},"2":{"loc":{"start":{"line":76,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":79,"column":9}},{"start":{"line":76,"column":8},"end":{"line":79,"column":9}}],"line":76},"3":{"loc":{"start":{"line":108,"column":22},"end":{"line":111,"column":28}},"type":"cond-expr","locations":[{"start":{"line":110,"column":22},"end":{"line":110,"column":30}},{"start":{"line":111,"column":22},"end":{"line":111,"column":28}}],"line":108},"4":{"loc":{"start":{"line":132,"column":12},"end":{"line":133,"column":71}},"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":133,"column":71}},{"start":{"line":132,"column":12},"end":{"line":133,"column":71}}],"line":132},"5":{"loc":{"start":{"line":169,"column":12},"end":{"line":172,"column":13}},"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":172,"column":13}},{"start":{"line":169,"column":12},"end":{"line":172,"column":13}}],"line":169},"6":{"loc":{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},"type":"if","locations":[{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},{"start":{"line":203,"column":8},"end":{"line":205,"column":9}}],"line":203},"7":{"loc":{"start":{"line":206,"column":8},"end":{"line":209,"column":9}},"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":209,"column":9}},{"start":{"line":206,"column":8},"end":{"line":209,"column":9}}],"line":206},"8":{"loc":{"start":{"line":206,"column":12},"end":{"line":206,"column":81}},"type":"binary-expr","locations":[{"start":{"line":206,"column":12},"end":{"line":206,"column":52}},{"start":{"line":206,"column":56},"end":{"line":206,"column":81}}],"line":206},"9":{"loc":{"start":{"line":210,"column":8},"end":{"line":220,"column":9}},"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":220,"column":9}},{"start":{"line":210,"column":8},"end":{"line":220,"column":9}}],"line":210}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":5,"11":5,"12":5,"13":5,"14":5,"15":5,"16":5,"17":5,"18":5,"19":5,"20":5,"21":5,"22":5,"23":5,"24":5,"25":5,"26":10,"27":5,"28":2,"29":4,"30":2,"31":5,"32":5,"33":5,"34":10,"35":10,"36":10,"37":5,"38":5,"39":5,"40":10,"41":5,"42":1333,"43":1333,"44":1333,"45":1333,"46":2666,"47":3999,"48":2666,"49":2666,"50":2666,"51":22,"52":2666,"53":50,"54":50,"55":2666,"56":1333,"57":5,"58":10,"59":5,"60":320,"61":5,"62":5,"63":320,"64":320,"65":5,"66":320,"67":640,"68":640,"69":960,"70":320,"71":1333,"72":5,"73":1333,"74":3,"75":3,"76":1333,"77":320,"78":320,"79":320,"80":1013,"81":1013,"82":1013,"83":1013,"84":1},"f":{"0":5,"1":5,"2":10,"3":5,"4":4,"5":5,"6":5,"7":10,"8":1333,"9":3999,"10":5,"11":10,"12":320,"13":320,"14":960,"15":1333},"b":{"0":[4],"1":[5,5],"2":[2,3],"3":[5,5],"4":[22,2644],"5":[5,315],"6":[5,1328],"7":[3,1330],"8":[1333,3],"9":[320,1013]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicFileTransformer.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicFileTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import {Transform, TransformCallback} from 'node:stream';\nimport * as fileProcessingInterfaces from '@interfaces/fileProcessing';\nimport * as fieldProcessingInterfaces from '@interfaces/fieldProcessing';\nimport {FILE_PROCESSING_ERROR_TYPES} from '@util/constants';\nimport {NumberFieldChecker} from '@fieldProcessing';\n//eslint-disable-next-line\nimport {fileIngestion} from '@glyphx/types';\n/**\n * After further reading and research. I was able to find\n * the Parquet transformer so I can create a similar approach.\n * This classes, primary purpose will be to read x rows of data\n * and determine the column types. once it has this information,\n * it will pass options, to our parquet transformer that will\n * initialize that stream and then push out all of our saved objects.\n */\n\n/**\n * An internal interface that is used to store infomation about he discovererd columns.\n */\nexport interface IColumnTypeTracker {\n  /**\n   * The cleaned name of the column -- we run the column through a name cleaner to remove udesired/illegal characters.\n   */\n  columnName: string;\n  /**\n   * The origional/dirty name of the column.\n   */\n  origionalColumnName: string;\n  /**\n   * The field type calculator which is used to determine our field types\n   */\n  fieldTypeCalculator: fieldProcessingInterfaces.IFieldTypeCalulator;\n  /**\n   * We need to keep track of the longest field so that we can se our string size.\n   */\n  maxFieldLength: number;\n}\n\n/**\n * This Transformer Stream will take in our data as JSON objects and figure out the\n * valid data types, valid column names and convert the input strings to their respective\n * data types.  Falcuties have been built to report out columns in error and post processing\n * file information.\n */\nexport class BasicFileTransformer extends Transform {\n  /**\n   * A private variable to keep track of whether or not we are processing the first\n   * row of data.  Threre is some setup for this transformer that occurs the first time\n   * data hits the _transform method.\n   */\n  private firstRow: boolean;\n\n  /**\n   * To ease memory pressure, this transform stream wil only look at a sample of the\n   * data to calculate the field types.  This flag keeps track of whether or not we\n   * have hit that threshold.\n   */\n  private hasMetInitialSample: boolean;\n\n  /**\n   * Keeps track of the number of rows that have been processed.\n   */\n  private rowNumber: number;\n\n  /**\n   * The name of the file that we are processing.  Only stored here so that it can\n   * be reported back out though a callback.\n   */\n  private readonly fileName: string;\n\n  /**\n   * The name of the table that will be created form this file.  Only stored here so that it can be reported back out through a callback.\n   */\n  private readonly tableName: string;\n\n  /**\n   * The output file name for the pipeline that will be reported\n   * back through the callback.\n   */\n  private readonly outputFileName: string;\n\n  /**\n   * The output directory.  This is stored here so it can be reported through the callback.\n   */\n  private readonly outputDirectory: string;\n\n  /**\n   * The size of the input file on disk.  Only stored here so that it can be\n   * reported back out through a callback.\n   */\n  private readonly fileSize: number;\n\n  /**\n   * The file operation for this transformer.  Only stored here so that it can be\n   * reported back through a callback.\n   */\n\n  private readonly fileOperation: fileIngestion.constants.FILE_OPERATION;\n  /**\n   * Once all data has been read, this will be called to report out the results.\n   * See {@link interfaces/fileProcessing/iFileInformation!FileInformationCallback} for additional\n   * details.\n   */\n  private readonly callback: fileProcessingInterfaces.FileInformationCallback;\n\n  /**\n   * This callback will report out any columns whose data cannot be represented by the\n   * calculated data type.  See {@link interfaces/fileProcessing/iFileProcessingError!FileProcessingErrorHandler}\n   * for more details.\n   */\n  private readonly errorCallback: fileProcessingInterfaces.FileProcessingErrorHandler;\n\n  /**\n   * The number of rows to sample to determine the column types.\n   */\n  private readonly sampleSize: number;\n\n  /**\n   * A temorary buffer to hold rows until we determine the column type of each column.\n   */\n  private readonly savedRows: any[];\n\n  /**\n   * The type trackers for each column.\n   */\n  private readonly columTypeTrackers: IColumnTypeTracker[];\n\n  /**\n   * The class which will be used to caluculate the field types.  See {@link interfaces/fieldProcessing/iFieldTypeCalculator!IConstructableFieldTypeCalculator}\n   */\n  private readonly fieldTypeCalculator: fieldProcessingInterfaces.IConstructableFieldTypeCalculator;\n\n  /**\n   * The class which will be instantiated to clean the column names.  See {@link interfaces/fileProcessing/iColumnNameCleaner!IColumnNameCleaner}\n   */\n  private readonly columnNameCleaner: fileProcessingInterfaces.IColumnNameCleaner;\n\n  /**\n   * The object which will be instantiated to convert strings to numbers.\n   */\n  private readonly numberFieldChecker: NumberFieldChecker;\n\n  /**\n   * Builds a new instance of our BasicFileTransformer class.\n   *\n   * @param fileName - The name of the file which we are processing.\n   * @param fileSize - The size of the file in bytes\n   * @param callback - A {@link interfaces/fileProcessing/iFileInformation!FileInformationCallback} taht will be called once all of the data has been processed.\n   * @param errorCallback - A {@link interfaces/fileProcessing/iFileProcessingError!FileProcessingErrorHandler} that is called whenever an error occures while converting a string to it's target data type.\n   * @sampleSize - The number of objects to process to detemine the type of the data.\n   */\n  constructor(\n    fileName: string,\n    fileSize: number,\n    outputFileName: string,\n    outputDirectory: string,\n    tableName: string,\n    fileOperation: fileIngestion.constants.FILE_OPERATION,\n    callback: fileProcessingInterfaces.FileInformationCallback,\n    errorCallback: fileProcessingInterfaces.FileProcessingErrorHandler,\n    fieldTypeCalculator: fieldProcessingInterfaces.IConstructableFieldTypeCalculator,\n    columnNameCleaner: fileProcessingInterfaces.IConstructableColumnNameCleaner,\n    sampleSize = 100\n  ) {\n    super({objectMode: true});\n    this.firstRow = true;\n    this.fileName = fileName;\n    this.outputDirectory = outputDirectory;\n    this.outputFileName = outputFileName;\n    this.tableName = tableName;\n    this.fileOperation = fileOperation;\n    this.fileSize = fileSize;\n    this.callback = callback;\n    this.errorCallback = errorCallback;\n    this.fieldTypeCalculator = fieldTypeCalculator;\n    this.sampleSize = sampleSize;\n\n    this.hasMetInitialSample = false;\n    this.rowNumber = 0;\n    this.savedRows = [];\n    this.columTypeTrackers = [];\n    //TODO: should these be injected/constructable?\n    this.numberFieldChecker = new NumberFieldChecker();\n    this.columnNameCleaner = new columnNameCleaner();\n\n    //when this finishes we need to sendout our file information.\n    this.on('finish', () => {\n      callback({\n        fileName: this.fileName,\n        parquetFileName: this.outputFileName,\n        outputFileDirecotry: this.outputDirectory,\n        tableName: this.tableName,\n        numberOfRows: this.rowNumber,\n        numberOfColumns: this.columTypeTrackers.length,\n        columns: this.columTypeTrackers.map(c => {\n          return {\n            name: c.columnName,\n            origionalName: c.origionalColumnName,\n            fieldType: c.fieldTypeCalculator.fieldType,\n            longestString:\n              c.fieldTypeCalculator.fieldType ===\n              fileIngestion.constants.FIELD_TYPE.STRING\n                ? c.maxFieldLength\n                : undefined,\n          };\n        }),\n        fileSize: this.fileSize,\n        fileOperationType: this.fileOperation,\n      });\n    });\n  }\n\n  /**\n   * _flush is called before the 'finish' event is fired. Here we need to make sure that we are not holding on to any saved rows.\n   *\n   * @param callback -- we must call callback to let the stream processess know that we are done flusing the data.\n   */\n  public override _flush(callback: TransformCallback) {\n    if (this.savedRows.length) {\n      this.columTypeTrackers.forEach(c => c.fieldTypeCalculator.finish());\n      this.sendSavedRows();\n    }\n    callback();\n  }\n\n  /**\n   * This function will setup our fieldTypeCalulators once we start processing data.\n   *\n   * @param chunk - our first oject.\n   */\n  private processFirstRow(chunk: any) {\n    let fieldNumber = -1;\n    for (const key in chunk) {\n      fieldNumber++;\n      const fieldTypeCalculator = new this.fieldTypeCalculator(\n        key,\n        fieldNumber,\n        1\n      );\n\n      this.columTypeTrackers.push({\n        columnName: this.columnNameCleaner.cleanColumnName(key),\n        origionalColumnName: key,\n        fieldTypeCalculator: fieldTypeCalculator,\n        maxFieldLength: 0,\n      });\n    }\n    this.firstRow = false;\n  }\n\n  /**\n   * Once we have processed our sampleSize of rows, this functon will be called to create a parquetJS schema that will be the first object passed out of this transformer stream.\n   */\n  private buildParquertSchema(): Record<string, unknown> {\n    const retval: Record<string, unknown> = {};\n    this.columTypeTrackers.forEach(c => {\n      retval[c.columnName] = {\n        type:\n          c.fieldTypeCalculator.fieldType ===\n          fileIngestion.constants.FIELD_TYPE.NUMBER\n            ? 'DOUBLE'\n            : 'UTF8',\n        encoding: 'PLAIN',\n        optional:\n          c.fieldTypeCalculator.fieldType ===\n          fileIngestion.constants.FIELD_TYPE.NUMBER,\n      };\n    });\n\n    return retval;\n  }\n\n  /**\n   * This will take our row and convert the field names to their cleaned name, and will convert the strings to their appropriate data type.\n   *\n   * @param chunk - or object to be cleaned.\n   */\n  private cleanRow(chunk: any): Record<string, unknown> {\n    this.rowNumber++;\n    const retval: Record<string, unknown> = {};\n    let columnIndex = 0;\n    for (const key in chunk) {\n      const fieldTypeCalculator = this.columTypeTrackers.find(\n        c => c.origionalColumnName === key\n      ) as IColumnTypeTracker;\n      const dirtyValue = chunk[key];\n      let value: unknown = null;\n\n      if (dirtyValue.length > fieldTypeCalculator.maxFieldLength)\n        fieldTypeCalculator.maxFieldLength = dirtyValue.length;\n      try {\n        //not sure why nyc is not seeing us hit the branch on line 135\n        //istanbul ignore next\n        value =\n          fieldTypeCalculator?.fieldTypeCalculator.fieldType ===\n          fileIngestion.constants.FIELD_TYPE.NUMBER\n            ? this.numberFieldChecker.convertField(dirtyValue)\n            : dirtyValue;\n      } catch (err) {\n        value = null;\n        this.errorCallback({\n          fileName: this.fileName,\n          errorType: FILE_PROCESSING_ERROR_TYPES.INVALID_FIELD_VALUE,\n          rowIndex: this.rowNumber,\n          columnIndex: columnIndex,\n          columnName: key,\n          columnValue: dirtyValue,\n          message: `The value of collumn ${key} does not appear to be a well formed number string`,\n        });\n      }\n\n      //the fieldTypeCalculator will always be defined, so we can't\n      //really test the alternative.  This is just here to satisfy typescript\n      //istanbul ignore next\n      retval[fieldTypeCalculator?.columnName ?? key] = value;\n      columnIndex++;\n    }\n\n    return retval;\n  }\n\n  /**\n   * Once we know what our data types are, this function will call buildParquertSchema to beuild the schema,  and then send the schema and along with clean versions of our saved rows.\n   */\n  private sendSavedRows(): void {\n    this.columTypeTrackers.forEach(c => c.fieldTypeCalculator.finish());\n\n    this.savedRows.forEach((r, index) => {\n      if (index === 0) {\n        const schema = this.buildParquertSchema();\n        this.push(schema); //Send the schema first\n      }\n\n      const cleanRow = this.cleanRow(r);\n      this.push(cleanRow);\n    });\n    this.savedRows.splice(0); //Cleanup\n  }\n\n  /**\n   * This function is used to make our calls to our filedTypeCalculators to help us determine our field data types.\n   *\n   * @param chunk - the data to check.\n   */\n  private checkFieldType(chunk: any): void {\n    for (const key in chunk) {\n      const value = chunk[key];\n      const fieldTypeCalculator = this.columTypeTrackers.find(\n        c => c.origionalColumnName === key\n      );\n      //istanbul ignore next\n      //eslint-disable-next-line\n      if (value != null)\n        //null will signify the end of data and will cause the field checker to finilize its findings\n        //TODO: right now, the way the pipelining works, this should always hit, since the csv parsing step will set empty fields to empty strings.  Future connectors will need to pay attention to this.\n        fieldTypeCalculator?.fieldTypeCalculator.processItemsSync(value);\n    }\n    this.savedRows.push(chunk);\n  }\n\n  /**\n   * The main processor.  Is called as part of the streaming pipeline and processes our data.\n   * @param chunk -- our data as a JSON object.\n   * @param encoding -- is not used.\n   * @param callback -- must be caled to let the pipeline know that we have successfuly processed the data.\n   */\n  public override _transform(\n    chunk: any,\n    encoding: BufferEncoding,\n    callback: TransformCallback\n  ): void {\n    if (this.firstRow) {\n      this.processFirstRow(chunk);\n    }\n    if (this.savedRows.length >= this.sampleSize && !this.hasMetInitialSample) {\n      this.sendSavedRows();\n      this.hasMetInitialSample = true;\n    }\n\n    if (!this.hasMetInitialSample) {\n      this.checkFieldType(chunk);\n      callback();\n      return;\n    } else {\n      const cleanRow = this.cleanRow(chunk);\n      this.push(cleanRow);\n      callback();\n      return;\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0d4a6720d4310a9d79ed4c179965c6884964a69c","contentHash":"260a48c32a43a170a76eeeb972198243b5c2b74e3923b87151d143ad70c6d3dc"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/index.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":135}},"2":{"start":{"line":4,"column":33},"end":{"line":4,"column":70}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":169}},"4":{"start":{"line":5,"column":101},"end":{"line":5,"column":163}},"5":{"start":{"line":6,"column":25},"end":{"line":6,"column":54}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":143}},"7":{"start":{"line":7,"column":92},"end":{"line":7,"column":137}},"8":{"start":{"line":8,"column":25},"end":{"line":8,"column":54}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":141}},"10":{"start":{"line":9,"column":91},"end":{"line":9,"column":135}},"11":{"start":{"line":10,"column":29},"end":{"line":10,"column":62}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":155}},"13":{"start":{"line":11,"column":96},"end":{"line":11,"column":149}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":87},"end":{"line":5,"column":88}},"loc":{"start":{"line":5,"column":99},"end":{"line":5,"column":165}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":78},"end":{"line":7,"column":79}},"loc":{"start":{"line":7,"column":90},"end":{"line":7,"column":139}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":77},"end":{"line":9,"column":78}},"loc":{"start":{"line":9,"column":89},"end":{"line":9,"column":137}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":82},"end":{"line":11,"column":83}},"loc":{"start":{"line":11,"column":94},"end":{"line":11,"column":151}},"line":11}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":124,"5":1,"6":1,"7":7,"8":1,"9":1,"10":7,"11":1,"12":1,"13":50},"f":{"0":124,"1":7,"2":7,"3":50},"b":{},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/index.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/index.ts"],"names":[],"mappings":";;;AAAA,uEAAuE;AAA/D,uIAAA,2BAA2B,OAAA;AACnC,uDAAsD;AAA9C,sHAAA,kBAAkB,OAAA;AAC1B,uDAAqD;AAA7C,qHAAA,iBAAiB,OAAA;AACzB,+DAA8D;AAAtD,8HAAA,sBAAsB,OAAA","sourcesContent":["export {FILE_PROCESSING_ERROR_TYPES} from './fileProcessingErrorTypes';\nexport {FILE_STORAGE_TYPES} from './fileStorageTypes';\nexport {COMPRESSION_TYPES} from './compressionTypes';\nexport {FILE_PROCESSING_STATUS} from './fileProcessingStatus';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9bedb2f99c941688fa7aaed6329702b25a9f7466","contentHash":"56a3329068bf72a85d7788b286d2bb49b167fce4f479fbd29ed3f0aef8987760"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingErrorTypes.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingErrorTypes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":9,"column":0},"end":{"line":16,"column":116}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":77}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":79}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":78}},"6":{"start":{"line":13,"column":4},"end":{"line":13,"column":77}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":73}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":72}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":1},"end":{"line":9,"column":2}},"loc":{"start":{"line":9,"column":40},"end":{"line":16,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":33},"end":{"line":16,"column":114}},"type":"binary-expr","locations":[{"start":{"line":16,"column":33},"end":{"line":16,"column":68}},{"start":{"line":16,"column":73},"end":{"line":16,"column":113}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingErrorTypes.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingErrorTypes.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,IAAY,2BAOX;AAPD,WAAY,2BAA2B;IACrC,wEAAyC,CAAA;IACzC,0EAA2C,CAAA;IAC3C,yEAA0C,CAAA;IAC1C,wEAAyC,CAAA;IACzC,oEAAqC,CAAA;IACrC,mEAAoC,CAAA;AACtC,CAAC,EAPW,2BAA2B,GAA3B,mCAA2B,KAA3B,mCAA2B,QAOtC","sourcesContent":["/**\n * Defines the type of errors that can occur during file\n * processing.\n */\nexport enum FILE_PROCESSING_ERROR_TYPES {\n  INVALID_FIELD_VALUE = 'InvalidFieldValue',\n  TABLE_ALREADY_EXISTS = 'TableAlreadyExists',\n  TABLE_DOES_NOT_EXIST = 'TableDoesNotExist',\n  FILE_ALREADY_EXISTS = 'FileAlreadyExists',\n  INVALID_TABLE_SET = 'InvalidTableSet',\n  UNEXPECTED_ERROR = 'UnexpectedError',\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5360094f6c508079fd2625cb2b508837cf020ef2","contentHash":"f0441a60fca2350c94f01921cd098b22c664dd03ef8e33eaf269286b64756f7b"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileStorageTypes.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileStorageTypes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":9,"column":0},"end":{"line":11,"column":89}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":1},"end":{"line":9,"column":2}},"loc":{"start":{"line":9,"column":31},"end":{"line":11,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":24},"end":{"line":11,"column":87}},"type":"binary-expr","locations":[{"start":{"line":11,"column":24},"end":{"line":11,"column":50}},{"start":{"line":11,"column":55},"end":{"line":11,"column":86}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileStorageTypes.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileStorageTypes.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,IAAY,kBAEX;AAFD,WAAY,kBAAkB;IAC5B,yCAAmB,CAAA;AACrB,CAAC,EAFW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAE7B","sourcesContent":["/**\n * Defines the types of file formats supported by AWS Athena\n * /Glue.\n */\nexport enum FILE_STORAGE_TYPES {\n  PARQUET = 'PARQUET',\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b8a3db7bb5504e492718a2bd24bea3e4f744c883","contentHash":"0f9cabd213b80cff31c2873f9329016cfaa307190bac289c4c1539e9c8f3fb3d"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/compressionTypes.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/compressionTypes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":11,"column":0},"end":{"line":18,"column":86}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":39}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":37}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":37}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":43}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":39}},"8":{"start":{"line":17,"column":4},"end":{"line":17,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":30},"end":{"line":18,"column":1}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":84}},"type":"binary-expr","locations":[{"start":{"line":18,"column":23},"end":{"line":18,"column":48}},{"start":{"line":18,"column":53},"end":{"line":18,"column":83}}],"line":18}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/compressionTypes.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/compressionTypes.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,IAAY,iBAOX;AAPD,WAAY,iBAAiB;IAC3B,kCAAa,CAAA;IACb,gCAAW,CAAA;IACX,gCAAW,CAAA;IACX,sCAAiB,CAAA;IACjB,kCAAa,CAAA;IACb,kCAAa,CAAA;AACf,CAAC,EAPW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAO5B","sourcesContent":["/**\n * This enum defines the types of compression that are\n * supported by the AWS Athena Glue system. These can\n * be used to tell the querybuilders how the data is stored.\n *\n */\nexport enum COMPRESSION_TYPES {\n  GZIP = 'GZIP',\n  LZ4 = 'LZ4',\n  LZO = 'LZO',\n  SNAPPY = 'SNAPPY',\n  ZSTD = 'ZSTD',\n  NONE = 'NONE',\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"267a743f0cc12989b01ca1ba61c5ad0f57f354ee","contentHash":"5a2db1023e56c07b75f25dc0f562334725fb3dd8b99799a6178298e79b0a4a5b"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingStatus.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingStatus.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":10,"column":101}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":68}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":78}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":74}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":80}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":35},"end":{"line":10,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":28},"end":{"line":10,"column":99}},"type":"binary-expr","locations":[{"start":{"line":10,"column":28},"end":{"line":10,"column":58}},{"start":{"line":10,"column":63},"end":{"line":10,"column":98}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingStatus.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/constants/fileProcessingStatus.ts"],"names":[],"mappings":";;;AAAA,IAAY,sBAKX;AALD,WAAY,sBAAsB;IAChC,+DAAE,CAAA;IACF,yEAAO,CAAA;IACP,qEAAK,CAAA;IACL,2EAAa,CAAA;AACf,CAAC,EALW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAKjC","sourcesContent":["export enum FILE_PROCESSING_STATUS {\n  OK,\n  WARNING,\n  ERROR,\n  UNKNOWN = 999,\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d2872829a27523efaf239cf02c413ae37780b43c","contentHash":"d2158a141ba160c78b6f67ea1ec553679d5fd95c0cb5639870b41be225ccff4f"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicParquetProcessor.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicParquetProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":22},"end":{"line":5,"column":44}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":36}},"5":{"start":{"line":20,"column":8},"end":{"line":24,"column":10}},"6":{"start":{"line":21,"column":12},"end":{"line":23,"column":14}},"7":{"start":{"line":22,"column":16},"end":{"line":22,"column":26}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":29}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":34}},"11":{"start":{"line":40,"column":8},"end":{"line":60,"column":9}},"12":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"13":{"start":{"line":44,"column":16},"end":{"line":44,"column":49}},"14":{"start":{"line":46,"column":27},"end":{"line":46,"column":61}},"15":{"start":{"line":47,"column":12},"end":{"line":51,"column":15}},"16":{"start":{"line":52,"column":12},"end":{"line":52,"column":34}},"17":{"start":{"line":53,"column":12},"end":{"line":53,"column":23}},"18":{"start":{"line":73,"column":0},"end":{"line":73,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":33},"end":{"line":28,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":26},"end":{"line":20,"column":27}},"loc":{"start":{"line":20,"column":33},"end":{"line":24,"column":9}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":19},"end":{"line":21,"column":20}},"loc":{"start":{"line":21,"column":32},"end":{"line":23,"column":13}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":46},"end":{"line":61,"column":5}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":140},"end":{"line":47,"column":141}},"loc":{"start":{"line":47,"column":152},"end":{"line":47,"column":155}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":27},"end":{"line":71,"column":5}},"line":67}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":16},"end":{"line":17,"column":31}},"type":"default-arg","locations":[{"start":{"line":17,"column":27},"end":{"line":17,"column":31}}],"line":17},"1":{"loc":{"start":{"line":40,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":60,"column":9}},{"start":{"line":40,"column":8},"end":{"line":60,"column":9}}],"line":40}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":3,"6":3,"7":9,"8":3,"9":3,"10":3,"11":303,"12":3,"13":6,"14":3,"15":3,"16":3,"17":3,"18":1},"f":{"0":3,"1":3,"2":9,"3":303,"4":3,"5":3},"b":{"0":[1],"1":[3,300]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicParquetProcessor.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicParquetProcessor.ts"],"names":[],"mappings":";;;AAAA,yCAA8E;AAC9E,6CAAyD;AAEzD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,uBAAS;IAiBlD,kDAAkD;IAClD;;;;;OAKG;IACH,YAAY,QAAQ,GAAG,IAAI;QACzB,KAAK,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;QAO5B,4CAA4C;QACpC,eAAU,GAAG,CAAC,CAAY,EAAE,EAAE;YACpC,OAAO,KAAK,EAAE,CAAM,EAAE,EAAE;gBACtB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC;QACJ,CAAC,CAAC;QAXA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAQD,yEAAyE;IACzE;;;;;;;;OAQG;IACa,KAAK,CAAC,UAAU,CAC9B,GAAQ,EACR,QAAwB,EACxB,QAA2B;QAE3B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,+CAA+C;YAC/C,iBAAiB;YACjB,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;gBACrB,GAAG,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;aAClC;YACD,MAAM,MAAM,GAAG,IAAI,yBAAa,CAAC,GAAG,CAAC,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,IAAI,yBAAa,CACpC,MAAM,EACN,IAAI,iCAAqB,CACvB,MAAM,EACN,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EACrB,KAAK,IAAI,EAAE,GAAE,CAAC,EACd,CAAC,EACD;YACE,8BAA8B;aAC/B,CACF,EACD;YACE,8BAA8B;aAC/B,CACF,CAAC;YACF,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,QAAQ,EAAE,CAAC;SACZ;aAAM;YACL,uDAAuD;YACvD,mBAAmB;YACnB,sBAAsB;YACtB,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;SAC3E;IACH,CAAC;IAED;;;;OAIG;IACa,KAAK,CAAC,MAAM,CAAC,QAA2B;QACtD,2CAA2C;QAC3C,sBAAsB;QACtB,MAAM,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAA0C;IACvF,CAAC;CACF;AA/FD,sDA+FC","sourcesContent":["import {ParquetEnvelopeWriter, ParquetWriter, ParquetSchema} from 'parquetjs';\nimport {Transform, TransformCallback} from 'node:stream';\n\n/**\n * this class is similar to the ParquetTransformer from parquetJs.  The biggest difference is that we do not know the schema when we instantiate the object.  As part of the pipline process, the schema will be passed as the first record sent.  Then we can instantate our ParquetEnvelopeWriter and write out or data.\n */\nexport class BasicParquetProcessor extends Transform {\n  /**\n   * Defines the page size for column pages.  This is passes to\n   * the parquetWriter.\n   */\n  private readonly pageSize: number;\n  /**\n   * This Transformer expects the first row to be the schema so that\n   * it can be passes to the constructor of the parquetJs writer.  This flag keeps track of that.\n   */\n  private firstRow: boolean;\n  /**\n   * our privte parquetWriter which will write out our data in\n   * parquet format.\n   */\n  private parquetWriter: ParquetWriter | null;\n\n  //TODO: allow compression type to be configurable.\n  /**\n   * builds our BasicParquetProcessor.\n   *\n   * @param pageSize - determines how big the page soze should be.\n   * in our parquet file.\n   */\n  constructor(pageSize = 4096) {\n    super({objectMode: true});\n    this.pageSize = pageSize;\n\n    this.firstRow = true;\n    this.parquetWriter = null;\n  }\n\n  //took this write out of the parquetjs code.\n  private writeProxy = (t: Transform) => {\n    return async (b: any) => {\n      t.push(b);\n    };\n  };\n  //TODO: I fell like we need some error handling here around parquetWriter\n  /**\n   * This method handles the bulk of the work for our\n   * transformer.  When it first receives data it will\n   * create our ParquetWriter and handle pushing data through it.\n   *\n   * @param row -- our data as a JSON object.\n   * @param encoding -- is not used.\n   * @param callback -- must be caled to let the pipeline know that we have successfuly processed the data.\n   */\n  public override async _transform(\n    row: any,\n    encoding: BufferEncoding,\n    callback: TransformCallback\n  ) {\n    if (this.firstRow) {\n      //If this is the first row, then the row is our\n      //parquet schema.\n      for (const key in row) {\n        row[key]['compression'] = 'GZIP';\n      }\n      const schema = new ParquetSchema(row);\n      this.parquetWriter = new ParquetWriter(\n        schema,\n        new ParquetEnvelopeWriter(\n          schema,\n          this.writeProxy(this),\n          async () => {},\n          0,\n          {\n            //rowGroupSize: this.pageSize,\n          }\n        ),\n        {\n          //rowGroupSize: this.pageSize,\n        }\n      );\n      this.firstRow = false;\n      callback();\n    } else {\n      //this is most definitley getting called.  Not sure why\n      // nyc can't see it\n      //istanbul ignore next\n      this.parquetWriter?.appendRow(row).then(d => callback(null, d), callback);\n    }\n  }\n\n  /**\n   * _flush is called before the 'finish' event is fired. Here we need to close our parquetWriter which will write out the footer.\n   *\n   * @param callback -- we must call callback to let the stream processess know that we are done flusing the data.\n   */\n  public override async _flush(callback: TransformCallback) {\n    //same here, we are definitily hitting this\n    //istanbul ignore next\n    await this.parquetWriter?.close(callback); //.then(d => callback(null, d), callback);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"40b0dcc00f84bf4d9c7e19966945f34a858f4289","contentHash":"68bf19096478ffc03f79be0529ee573752c997bf9d9ed63f13dee689293f3e12"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveTableQueryPlanner.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveTableQueryPlanner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":40}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":36}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":39}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":41}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":31}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":29}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":42}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":48}},"11":{"start":{"line":45,"column":8},"end":{"line":45,"column":52}},"12":{"start":{"line":56,"column":26},"end":{"line":62,"column":24}},"13":{"start":{"line":58,"column":12},"end":{"line":60,"column":29}},"14":{"start":{"line":63,"column":24},"end":{"line":63,"column":57}},"15":{"start":{"line":64,"column":25},"end":{"line":64,"column":136}},"16":{"start":{"line":65,"column":32},"end":{"line":65,"column":97}},"17":{"start":{"line":66,"column":23},"end":{"line":71,"column":24}},"18":{"start":{"line":72,"column":8},"end":{"line":72,"column":33}},"19":{"start":{"line":73,"column":8},"end":{"line":73,"column":22}},"20":{"start":{"line":76,"column":0},"end":{"line":76,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":21},"end":{"line":15,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":24},"end":{"line":21,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":26},"end":{"line":27,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":16},"end":{"line":33,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":60},"end":{"line":46,"column":5}},"line":41},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":48},"end":{"line":74,"column":5}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":17},"end":{"line":57,"column":18}},"loc":{"start":{"line":57,"column":22},"end":{"line":61,"column":9}},"line":57}},"branchMap":{"0":{"loc":{"start":{"line":58,"column":38},"end":{"line":60,"column":26}},"type":"cond-expr","locations":[{"start":{"line":59,"column":18},"end":{"line":59,"column":94}},{"start":{"line":60,"column":18},"end":{"line":60,"column":26}}],"line":58},"1":{"loc":{"start":{"line":59,"column":29},"end":{"line":59,"column":91}},"type":"cond-expr","locations":[{"start":{"line":59,"column":62},"end":{"line":59,"column":67}},{"start":{"line":59,"column":70},"end":{"line":59,"column":91}}],"line":59},"2":{"loc":{"start":{"line":59,"column":30},"end":{"line":59,"column":50}},"type":"binary-expr","locations":[{"start":{"line":59,"column":30},"end":{"line":59,"column":44}},{"start":{"line":59,"column":48},"end":{"line":59,"column":50}}],"line":59},"3":{"loc":{"start":{"line":59,"column":70},"end":{"line":59,"column":91}},"type":"binary-expr","locations":[{"start":{"line":59,"column":70},"end":{"line":59,"column":84}},{"start":{"line":59,"column":88},"end":{"line":59,"column":91}}],"line":59}},"s":{"0":1,"1":1,"2":1,"3":1,"4":5,"5":5,"6":5,"7":1,"8":7,"9":7,"10":7,"11":7,"12":4,"13":8,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":1},"f":{"0":5,"1":5,"2":5,"3":1,"4":7,"5":4,"6":8},"b":{"0":[4,4],"1":[1,3],"2":[4,2],"3":[3,2]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveTableQueryPlanner.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicHiveTableQueryPlanner.ts"],"names":[],"mappings":";;;AAKA,uCAAqD;AACrD,yCAA4C;AAE5C;;GAEG;AACH,MAAa,0BAA0B;IAMrC;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IACD;;OAEG;IACH,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACH,YACE,UAAkB,EAClB,aAAiC,EACjC,eAAkC;QAElC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;QAClC,IAAI,CAAC,kBAAkB,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,oBAAoB,GAAG,eAAe,CAAC;IAC9C,CAAC;IAED;;;;;;;OAOG;IACH,WAAW,CACT,QAAgB,EAChB,SAAiB,EACjB,SAA+B;QAE/B,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO;aAChC,GAAG,CAAC,CAAC,CAAC,EAAE;YACP,OAAO,GAAG,CAAC,CAAC,UAAU,IACpB,CAAC,CAAC,UAAU,KAAK,qBAAa,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM;gBACxD,CAAC,CAAC,WACE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,GAC7D,GAAG;gBACL,CAAC,CAAC,QACN,EAAE,CAAC;QACL,CAAC,CAAC;aACD,IAAI,CAAC,KAAK,CAAC,CAAC;QACf,MAAM,OAAO,GAAG,aAAa,IAAI,CAAC,aAAa,EAAE,CAAC;QAClD,MAAM,QAAQ,GAAG,kBAAkB,8BAAuB,CAAC,MAAM,CAAC,wBAAwB,CACxF,IAAI,CAAC,UAAU,CAChB,GAAG,QAAQ,GAAG,CAAC;QAChB,MAAM,eAAe,GAAG,yCAAyC,IAAI,CAAC,eAAe,IAAI,CAAC;QAE1F,MAAM,MAAM,GAAG,yBAAyB,SAAS;OAC9C,SAAS;;MAEV,OAAO;MACP,QAAQ;MACR,eAAe,GAAG,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA1FD,gEA0FC","sourcesContent":["import {\n  IJoinTableDefinition,\n  ITableQueryPlanner,\n} from '@interfaces/fileProcessing';\nimport {FILE_STORAGE_TYPES, COMPRESSION_TYPES} from '@util/constants';\nimport {generalPurposeFunctions} from '@glyphx/core';\nimport {fileIngestion} from '@glyphx/types';\n\n/**\n * This is our basic table query planner for hive tables (AWS Athena).  It renders the proper SQL like syntaxt to represent a suppoert file type ( parquet, csv, json etc)\n */\nexport class BasicHiveTableQueryPlanner implements ITableQueryPlanner {\n  private queryField: string;\n  private bucketNameField: string;\n  private storageFormatField: FILE_STORAGE_TYPES;\n  private compressionTypeField: COMPRESSION_TYPES;\n\n  /**\n   * An accessor to retrive the bucket name that the object was constructed with see {@link interfaces/fileProcessing/iTableQueryPlanner!ITableQueryPlanner.bucketName } for more information.\n   */\n  get bucketName(): string {\n    return this.bucketNameField;\n  }\n  /**\n   * An accessor to retrive the fileStorgeFormat that the object was constructed with see {@link interfaces/fileProcessing/iTableQueryPlanner!ITableQueryPlanner.storgeFormat } for more information.\n   */\n  get storageFormat(): FILE_STORAGE_TYPES {\n    return this.storageFormatField;\n  }\n\n  /**\n   * An accessor to retrive the compression type that the object was constructed with see {@link interfaces/fileProcessing/iTableQueryPlanner!ITableQueryPlanner.compressionType } for more information.\n   */\n  get compressionType(): COMPRESSION_TYPES {\n    return this.compressionTypeField;\n  }\n\n  /**\n   * Returns the query that was defined by the last call to {@link defineQuery} See {@link interfaces/fileProcessing/iTableQueryPlanner!ITableQueryPlanner.query } for additional information.\n   */\n  get query(): string {\n    return this.queryField;\n  }\n\n  /**\n   * constructs a new BasicHiveTableQueryPlanner object.  See {@link interfaces/fileProcessing/iTableQueryPlanner!ITableQueryPlanner } for more information.\n   *\n   * @param bucketName - the name of the S3 bucket that has our data.\n   * @param storageFormat - the storage format (parquet, csv, json) the data is stored in.\n   * @param compressionType - the type of compression used when storing the data.\n   */\n  constructor(\n    bucketName: string,\n    storageFormat: FILE_STORAGE_TYPES,\n    compressionType: COMPRESSION_TYPES\n  ) {\n    this.queryField = '';\n    this.bucketNameField = bucketName;\n    this.storageFormatField = storageFormat;\n    this.compressionTypeField = compressionType;\n  }\n\n  /**\n   * The main processing function of this class.  It takes in our table information\n   * and creates a HIVE (AWS Athena) query to create a table representaiton in glue.\n   *\n   * @param fileName - the name of the file we are truning into a table.\n   * @param tableName - the name of the table (can be differnt that the file name)\n   * @param tableData - the information about the table to be used to create it.\n   */\n  defineQuery(\n    fileName: string,\n    tableName: string,\n    tableData: IJoinTableDefinition\n  ): string {\n    const columnDef = tableData.columns\n      .map(c => {\n        return `${c.columnName} ${\n          c.columnType === fileIngestion.constants.FIELD_TYPE.STRING\n            ? `varchar(${\n                (c.columnLength ?? -1) > 65535 ? 65535 : c.columnLength ?? 100\n              })`\n            : 'double'\n        }`;\n      })\n      .join(',\\n');\n    const storage = `STORED AS ${this.storageFormat}`;\n    const location = `LOCATION 's3://${generalPurposeFunctions.string.checkAndAddTrailingSlash(\n      this.bucketName\n    )}${fileName}'`;\n    const tableProperties = `TBLPROPERTIES ('parquet.compression'='${this.compressionType}')`;\n\n    const retval = `CREATE EXTERNAL TABLE ${tableName} (\n\t    ${columnDef}\n    )\n    ${storage}\n    ${location}\n    ${tableProperties};`;\n    this.queryField = retval;\n    return retval;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c77ed8817c2dd009daad25498e8da2f5d2a08916","contentHash":"06abeaaf2bc80dcab00b10322a40df1ab61330e9c493778dc0b0638fb453de5c"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicTableSorter.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicTableSorter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":16,"column":8},"end":{"line":17,"column":144}},"4":{"start":{"line":17,"column":12},"end":{"line":17,"column":144}},"5":{"start":{"line":18,"column":8},"end":{"line":18,"column":38}},"6":{"start":{"line":24,"column":8},"end":{"line":24,"column":36}},"7":{"start":{"line":34,"column":27},"end":{"line":45,"column":10}},"8":{"start":{"line":35,"column":31},"end":{"line":35,"column":67}},"9":{"start":{"line":36,"column":31},"end":{"line":36,"column":67}},"10":{"start":{"line":37,"column":12},"end":{"line":44,"column":25}},"11":{"start":{"line":38,"column":16},"end":{"line":38,"column":26}},"12":{"start":{"line":39,"column":17},"end":{"line":44,"column":25}},"13":{"start":{"line":40,"column":16},"end":{"line":40,"column":25}},"14":{"start":{"line":41,"column":17},"end":{"line":44,"column":25}},"15":{"start":{"line":42,"column":16},"end":{"line":42,"column":26}},"16":{"start":{"line":44,"column":16},"end":{"line":44,"column":25}},"17":{"start":{"line":46,"column":8},"end":{"line":46,"column":44}},"18":{"start":{"line":47,"column":8},"end":{"line":47,"column":26}},"19":{"start":{"line":50,"column":0},"end":{"line":50,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":23},"end":{"line":19,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":25,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":33},"end":{"line":48,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":34,"column":49},"end":{"line":34,"column":50}},"loc":{"start":{"line":34,"column":61},"end":{"line":45,"column":9}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":8},"end":{"line":17,"column":144}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":17,"column":144}},{"start":{"line":16,"column":8},"end":{"line":17,"column":144}}],"line":16},"1":{"loc":{"start":{"line":37,"column":12},"end":{"line":44,"column":25}},"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":44,"column":25}},{"start":{"line":37,"column":12},"end":{"line":44,"column":25}}],"line":37},"2":{"loc":{"start":{"line":39,"column":17},"end":{"line":44,"column":25}},"type":"if","locations":[{"start":{"line":39,"column":17},"end":{"line":44,"column":25}},{"start":{"line":39,"column":17},"end":{"line":44,"column":25}}],"line":39},"3":{"loc":{"start":{"line":41,"column":17},"end":{"line":44,"column":25}},"type":"if","locations":[{"start":{"line":41,"column":17},"end":{"line":44,"column":25}},{"start":{"line":41,"column":17},"end":{"line":44,"column":25}}],"line":41}},"s":{"0":1,"1":1,"2":1,"3":2,"4":1,"5":1,"6":5,"7":4,"8":10,"9":10,"10":10,"11":3,"12":7,"13":3,"14":4,"15":2,"16":2,"17":4,"18":4,"19":1},"f":{"0":2,"1":5,"2":4,"3":10},"b":{"0":[1,1],"1":[3,7],"2":[3,4],"3":[2,2]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicTableSorter.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicTableSorter.ts"],"names":[],"mappings":";;;AACA,uCAAmC;AAEnC;;;;GAIG;AACH,MAAa,gBAAgB;IAE3B;;;OAGG;IACH,IAAI,YAAY;QACd,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM;YAChC,MAAM,IAAI,YAAK,CAAC,qBAAqB,CACnC,iFAAiF,EACjF,EAAE,CACH,CAAC;QACJ,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;OAEG;IACH;QACE,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;OAMG;IACH,UAAU,CAAC,gBAAoC;QAC7C,MAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;YAClD,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,eAAe,CAAC;YACxD,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,eAAe,CAAC;YACxD,IAAI,UAAU,GAAG,UAAU;gBAAE,OAAO,CAAC,CAAC,CAAC;iBAClC,IAAI,UAAU,GAAG,UAAU;gBAAE,OAAO,CAAC,CAAC;iBACtC,IAAI,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ;gBAAE,OAAO,CAAC,CAAC,CAAC;;gBACzC,OAAO,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;QACpC,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AA1CD,4CA0CC","sourcesContent":["import {IFileInformation, ITableSorter} from '@interfaces/fileProcessing';\nimport {error} from '@glyphx/core';\n\n/**\n * Our basicTable sorter class.  This class sorts by the\n * product of rows * columns desceding.  If the product of\n * rows * columns is equal then file size will be used.\n */\nexport class BasicTableSorter implements ITableSorter {\n  private sortedTablesField: IFileInformation[];\n  /**\n   * An accessor to retreive a previously sorted sert of\n   * table data.  See {@link interfaces/fileProcessing/iTableSorter!ITableSorter.sortedTables } for more information.\n   */\n  get sortedTables(): IFileInformation[] {\n    if (!this.sortedTablesField.length)\n      throw new error.InvalidOperationError(\n        'You must call sortTables before using this accessor to retreive the sorted data',\n        {}\n      );\n    return this.sortedTablesField;\n  }\n\n  /**\n   * Constructs a new BasicTableSorter.  See {@link interfaces/fileProcessing/iTableSorter!ITableSorter} for more information.\n   */\n  constructor() {\n    this.sortedTablesField = [];\n  }\n\n  /**\n   * Performs the bulk of the work for this class.  User\n   * cell count (rows * columns) and fileSize to determine\n   * sort order.  Larger cellcount/filsize tables appear\n   * earlier in the sort. See {@link interfaces/fileProcessing/iTableSorter!ITableSorter.sortTables} for more information.\n   * @param tableInformation - the table data to sort.\n   */\n  sortTables(tableInformation: IFileInformation[]): IFileInformation[] {\n    const sortedData = tableInformation.sort((s1, s2) => {\n      const cellCount1 = s1.numberOfRows * s1.numberOfColumns;\n      const cellCount2 = s2.numberOfRows * s2.numberOfColumns;\n      if (cellCount1 > cellCount2) return -1;\n      else if (cellCount1 < cellCount2) return 1;\n      else if (s1.fileSize > s2.fileSize) return -1;\n      else return 1;\n    });\n\n    this.sortedTablesField = sortedData;\n    return sortedData;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a287ab03e529f703b11a448f36d605198248da89","contentHash":"d20af4c08e52d2b3b5d92597bf139696d19e83edced094471a3ad56863e82d62"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicAthenaProcessor.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicAthenaProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":26},"end":{"line":4,"column":52}},"3":{"start":{"line":6,"column":16},"end":{"line":6,"column":40}},"4":{"start":{"line":7,"column":15},"end":{"line":7,"column":38}},"5":{"start":{"line":8,"column":20},"end":{"line":8,"column":46}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":36}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":38}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":28}},"9":{"start":{"line":18,"column":8},"end":{"line":18,"column":42}},"10":{"start":{"line":19,"column":8},"end":{"line":19,"column":46}},"11":{"start":{"line":20,"column":8},"end":{"line":20,"column":62}},"12":{"start":{"line":21,"column":8},"end":{"line":21,"column":72}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":72}},"14":{"start":{"line":26,"column":8},"end":{"line":35,"column":9}},"15":{"start":{"line":27,"column":12},"end":{"line":34,"column":13}},"16":{"start":{"line":28,"column":16},"end":{"line":28,"column":44}},"17":{"start":{"line":29,"column":16},"end":{"line":29,"column":48}},"18":{"start":{"line":30,"column":16},"end":{"line":30,"column":35}},"19":{"start":{"line":33,"column":16},"end":{"line":33,"column":280}},"20":{"start":{"line":39,"column":28},"end":{"line":39,"column":68}},"21":{"start":{"line":40,"column":29},"end":{"line":40,"column":58}},"22":{"start":{"line":41,"column":29},"end":{"line":41,"column":170}},"23":{"start":{"line":42,"column":28},"end":{"line":42,"column":77}},"24":{"start":{"line":43,"column":23},"end":{"line":43,"column":65}},"25":{"start":{"line":44,"column":8},"end":{"line":75,"column":9}},"26":{"start":{"line":45,"column":12},"end":{"line":52,"column":13}},"27":{"start":{"line":45,"column":25},"end":{"line":45,"column":26}},"28":{"start":{"line":46,"column":29},"end":{"line":46,"column":44}},"29":{"start":{"line":47,"column":34},"end":{"line":47,"column":92}},"30":{"start":{"line":48,"column":16},"end":{"line":49,"column":235}},"31":{"start":{"line":49,"column":20},"end":{"line":49,"column":235}},"32":{"start":{"line":50,"column":34},"end":{"line":50,"column":48}},"33":{"start":{"line":51,"column":16},"end":{"line":51,"column":89}},"34":{"start":{"line":53,"column":36},"end":{"line":53,"column":51}},"35":{"start":{"line":54,"column":12},"end":{"line":65,"column":13}},"36":{"start":{"line":54,"column":25},"end":{"line":54,"column":26}},"37":{"start":{"line":56,"column":34},"end":{"line":56,"column":49}},"38":{"start":{"line":59,"column":16},"end":{"line":64,"column":17}},"39":{"start":{"line":61,"column":37},"end":{"line":61,"column":55}},"40":{"start":{"line":62,"column":39},"end":{"line":62,"column":119}},"41":{"start":{"line":63,"column":20},"end":{"line":63,"column":70}},"42":{"start":{"line":66,"column":26},"end":{"line":66,"column":75}},"43":{"start":{"line":67,"column":12},"end":{"line":67,"column":57}},"44":{"start":{"line":68,"column":12},"end":{"line":68,"column":35}},"45":{"start":{"line":71,"column":12},"end":{"line":74,"column":177}},"46":{"start":{"line":72,"column":16},"end":{"line":72,"column":26}},"47":{"start":{"line":74,"column":16},"end":{"line":74,"column":177}},"48":{"start":{"line":78,"column":0},"end":{"line":78,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":21},"end":{"line":12,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":23},"end":{"line":15,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":42},"end":{"line":23,"column":5}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":17},"end":{"line":36,"column":5}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":41},"end":{"line":76,"column":5}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":35,"column":9}},{"start":{"line":26,"column":8},"end":{"line":35,"column":9}}],"line":26},"1":{"loc":{"start":{"line":48,"column":16},"end":{"line":49,"column":235}},"type":"if","locations":[{"start":{"line":48,"column":16},"end":{"line":49,"column":235}},{"start":{"line":48,"column":16},"end":{"line":49,"column":235}}],"line":48},"2":{"loc":{"start":{"line":59,"column":16},"end":{"line":64,"column":17}},"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":64,"column":17}},{"start":{"line":59,"column":16},"end":{"line":64,"column":17}}],"line":59},"3":{"loc":{"start":{"line":71,"column":12},"end":{"line":74,"column":177}},"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":74,"column":177}},{"start":{"line":71,"column":12},"end":{"line":74,"column":177}}],"line":71}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":23,"9":23,"10":23,"11":23,"12":23,"13":23,"14":2,"15":2,"16":2,"17":1,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1},"f":{"0":1,"1":1,"2":23,"3":2,"4":0},"b":{"0":[2,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicAthenaProcessor.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/basicAthenaProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IFileInformation,\n  IJoinTableDefinition,\n} from '@interfaces/fileProcessing';\nimport {\n  BasicHiveTableQueryPlanner,\n  BasicHiveViewQueryPlanner,\n  BasicTableSorter,\n  BasicJoinProcessor,\n} from '@fileProcessing';\n\n//eslint-disable-next-line\nimport {fileIngestion} from '@glyphx/types';\n\nimport {aws, error, generalPurposeFunctions} from '@glyphx/core';\n\nimport {FILE_STORAGE_TYPES, COMPRESSION_TYPES} from '@util/constants';\n\nexport class BasicAthenaProcessor {\n  private bucketNameField: string;\n  private databaseNameField: string;\n\n  private s3Manager: aws.S3Manager;\n  private athenaManager: aws.AthenaManager;\n  private joinProcessor: BasicJoinProcessor;\n\n  private inited: boolean;\n\n  public get bucketName(): string {\n    return this.bucketNameField;\n  }\n\n  public get databaseName(): string {\n    return this.databaseNameField;\n  }\n  constructor(bucketName: string, databaseName: string) {\n    this.inited = false;\n    this.bucketNameField = bucketName;\n    this.databaseNameField = databaseName;\n\n    this.s3Manager = new aws.S3Manager(bucketName);\n    this.athenaManager = new aws.AthenaManager(databaseName);\n    this.joinProcessor = new BasicJoinProcessor();\n  }\n\n  public async init() {\n    //no need to init more than once.\n    if (!this.inited) {\n      try {\n        await this.s3Manager.init();\n        await this.athenaManager.init();\n        this.inited = true;\n      } catch (err) {\n        throw new error.InvalidArgumentError(\n          'An error occured while initializing the BasicAthenaProcessor.  See the inner exception for additional information',\n          ['bucketName', 'databaseName'],\n          {bucketName: this.bucketName, databaseName: this.databaseName},\n          err\n        );\n      }\n    }\n  }\n\n  public async processTables(\n    viewName: string,\n    files: IFileInformation[]\n  ): Promise<IJoinTableDefinition[]> {\n    //TODO: What to do about files that error.  I guess we can write out the others and create a view on what does pass.  Or just write the tabels but not the view, butthen what would we report back to the front end.\n    const tableSorter = new BasicTableSorter();\n    const sortedTables = tableSorter.sortTables(files);\n    const tablePlanner = new BasicHiveTableQueryPlanner(\n      this.bucketName,\n      FILE_STORAGE_TYPES.PARQUET,\n      COMPRESSION_TYPES.GZIP\n    );\n\n    const viewPlanner = new BasicHiveViewQueryPlanner();\n    const joiner = new BasicJoinProcessor();\n    try {\n      for (let i = 0; i < sortedTables.length; i++) {\n        const file = sortedTables[i];\n        const fileInfos = await this.s3Manager.listObjects(\n          file.outputFileDirecotry\n        );\n        if (!fileInfos.length)\n          throw new error.InvalidArgumentError(\n            `There do not appear to be any files in the output direcotry: ${file.outputFileDirecotry} to build a table against`,\n            'file.outputFileDirecotry',\n            file.outputFileDirecotry\n          );\n        const tableName = file.tableName;\n        joiner.processColumns(\n          tableName,\n          file.outputFileDirecotry,\n          file.columns\n        );\n      }\n\n      const joinInformation = joiner.joinData;\n\n      for (let i = 0; i < joinInformation.length; i++) {\n        //thse two arrays should be in the same order.\n\n        const tableInfo = sortedTables[i];\n        //if we are appending the table already exists and does not need\n        //to be recreated.\n        if (\n          tableInfo.fileOperationType !==\n          fileIngestion.constants.FILE_OPERATION.APPEND\n        ) {\n          const joinData = joinInformation[i];\n          const tableQuery = tablePlanner.defineQuery(\n            joinData.backingFileName,\n            joinData.tableName,\n            joinData\n          );\n\n          await this.athenaManager.runQuery(tableQuery, 60);\n        }\n      }\n\n      const query = viewPlanner.defineView(viewName, joinInformation);\n      await this.athenaManager.runQuery(query, 60);\n\n      return joinInformation;\n    } catch (err) {\n      if (err instanceof error.GlyphxError) throw err;\n      else\n        throw new error.InvalidOperationError(\n          'an unexpected error occurred while processing the data.  See the inner error for additional information',\n          {},\n          err\n        );\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8e98fdb088c954d7180597fa11c92fec856c5eb9","contentHash":"f5dd194faa98445049f8473b73ba4e085d7e440107bb098e656cf7d411191363"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/tableArchiver.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/tableArchiver.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":17},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":19},"end":{"line":7,"column":50}},"6":{"start":{"line":10,"column":8},"end":{"line":11,"column":170}},"7":{"start":{"line":11,"column":12},"end":{"line":11,"column":170}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":20}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":33}},"10":{"start":{"line":16,"column":8},"end":{"line":16,"column":31}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":35}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":76}},"13":{"start":{"line":21,"column":8},"end":{"line":21,"column":20}},"14":{"start":{"line":22,"column":28},"end":{"line":22,"column":123}},"15":{"start":{"line":23,"column":8},"end":{"line":37,"column":9}},"16":{"start":{"line":24,"column":30},"end":{"line":24,"column":72}},"17":{"start":{"line":25,"column":32},"end":{"line":25,"column":58}},"18":{"start":{"line":26,"column":29},"end":{"line":26,"column":86}},"19":{"start":{"line":27,"column":12},"end":{"line":27,"column":61}},"20":{"start":{"line":28,"column":12},"end":{"line":28,"column":35}},"21":{"start":{"line":29,"column":12},"end":{"line":29,"column":52}},"22":{"start":{"line":32,"column":12},"end":{"line":36,"column":20}},"23":{"start":{"line":38,"column":8},"end":{"line":38,"column":63}},"24":{"start":{"line":41,"column":23},"end":{"line":45,"column":9}},"25":{"start":{"line":46,"column":8},"end":{"line":46,"column":20}},"26":{"start":{"line":47,"column":8},"end":{"line":61,"column":9}},"27":{"start":{"line":48,"column":28},"end":{"line":48,"column":115}},"28":{"start":{"line":49,"column":32},"end":{"line":49,"column":123}},"29":{"start":{"line":50,"column":29},"end":{"line":50,"column":71}},"30":{"start":{"line":51,"column":12},"end":{"line":51,"column":78}},"31":{"start":{"line":52,"column":12},"end":{"line":57,"column":13}},"32":{"start":{"line":53,"column":16},"end":{"line":56,"column":17}},"33":{"start":{"line":53,"column":29},"end":{"line":53,"column":30}},"34":{"start":{"line":54,"column":32},"end":{"line":54,"column":43}},"35":{"start":{"line":55,"column":20},"end":{"line":55,"column":91}},"36":{"start":{"line":60,"column":12},"end":{"line":60,"column":314}},"37":{"start":{"line":62,"column":8},"end":{"line":62,"column":22}},"38":{"start":{"line":65,"column":0},"end":{"line":65,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":17},"end":{"line":13,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":46},"end":{"line":19,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":38},"end":{"line":39,"column":5}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":34},"end":{"line":63,"column":5}},"line":40}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":11,"column":170}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":11,"column":170}},{"start":{"line":10,"column":8},"end":{"line":11,"column":170}}],"line":10},"1":{"loc":{"start":{"line":52,"column":12},"end":{"line":57,"column":13}},"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":57,"column":13}},{"start":{"line":52,"column":12},"end":{"line":57,"column":13}}],"line":52}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":21,"10":21,"11":21,"12":21,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1},"f":{"0":0,"1":21,"2":0,"3":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/tableArchiver.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/tableArchiver.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  aws,\n  error,\n  generalPurposeFunctions as coreFunctions,\n} from '@glyphx/core';\nimport {generalPurposeFunctions} from '@util';\nimport {PassThrough} from 'stream';\nimport {pipeline} from 'node:stream/promises';\n\ninterface IArchivedFileInformation {\n  fileName: string;\n  archiveFileName: string;\n}\n\ninterface IArchivedTableInformation {\n  tableName: string;\n  timeStamp: string;\n  affectedFiles: IArchivedFileInformation[];\n}\nexport class TableArchiver {\n  private readonly clientId: string;\n  private readonly modelId: string;\n  private readonly s3Manager: aws.S3Manager;\n  private readonly timeStamp: string;\n\n  public get isSafe(): boolean {\n    if (!this.s3Manager.inited)\n      throw new error.InvalidOperationError(\n        'The supplied S3Manager, must be inited before calling methods on this class',\n        {s3Manager: {inited: false}}\n      );\n    return true;\n  }\n\n  constructor(clientId: string, modelId: string, s3Manager: aws.S3Manager) {\n    this.clientId = clientId;\n    this.modelId = modelId;\n    this.s3Manager = s3Manager;\n    this.timeStamp = coreFunctions.date.getTimeStamp();\n  }\n\n  public async archiveFile(\n    key: string,\n    timestamp: string\n  ): Promise<IArchivedFileInformation> {\n    this.isSafe;\n    const archivePath = generalPurposeFunctions.getArchiveFilePath(\n      this.clientId,\n      this.modelId,\n      key,\n      timestamp\n    );\n    try {\n      const srcStream = await this.s3Manager?.getObjectStream(key);\n      const passThrough = new PassThrough();\n\n      const uploader = this.s3Manager?.getUploadStream(\n        archivePath,\n        passThrough\n      );\n\n      pipeline(srcStream, passThrough);\n\n      await uploader?.done();\n\n      await this.s3Manager?.removeObject(key);\n    } catch (err) {\n      throw new error.InvalidOperationError(\n        'An unexpected error occurred while archiving the file,  See the inner error for additional information',\n        {\n          fileName: key,\n          archiveFileName: archivePath,\n          s3BucketName: this.s3Manager.bucketName,\n        },\n        err\n      );\n    }\n\n    return {fileName: key, archiveFileName: archivePath};\n  }\n\n  public async archiveTable(\n    tableName: string\n  ): Promise<IArchivedTableInformation> {\n    const retval: IArchivedTableInformation = {\n      tableName: tableName,\n      timeStamp: this.timeStamp,\n      affectedFiles: [],\n    };\n    this.isSafe;\n    try {\n      const csvPath = generalPurposeFunctions.getTableCsvPath(\n        this.clientId,\n        this.modelId,\n        tableName\n      );\n      const parquetPath = generalPurposeFunctions.getTableParquetPath(\n        this.clientId,\n        this.modelId,\n        tableName\n      );\n      const fileList = await this.s3Manager?.listObjects(csvPath);\n      fileList.push(...(await this.s3Manager.listObjects(parquetPath)));\n\n      if (fileList.length) {\n        for (let i = 0; i < fileList.length; i++) {\n          const key = fileList[i];\n          retval.affectedFiles.push(\n            await this.archiveFile(key, this.timeStamp)\n          );\n        }\n      }\n    } catch (err) {\n      throw new error.InvalidOperationError(\n        `An unexpected error occurred while archiving the files for table ${tableName}.  We have immediately suspended processing, but the table may be in an unusable state.  See the inner errors for additional information`,\n        {processingInformation: retval},\n        err\n      );\n    }\n\n    return retval;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bd30952e187d4f09f39c567968c1f7140792696d","contentHash":"98b07b9ba27102136986beeba7e7cb17f4b1a2c6b3573b6e63603ef28064a184"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/index.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":62}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":61}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":57}},"27":{"start":{"line":28,"column":0},"end":{"line":28,"column":85}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":2,"16":2,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1,"27":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":2},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[2,0],"12":[2,2],"13":[0,0],"14":[0,0],"15":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/index.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAyC;AACzC,qFAAqE","sourcesContent":["export * as constants from './constants';\nexport * as generalPurposeFunctions from './generalPurposeFunctions';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c34b20f2cd223de983e8cad1840afcaaf6550b10","contentHash":"21f3e6f0234cb5ef44b17f0666a7df54c9eb9a4acd0690f424aaa87036d63265"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/generalPurposeFunctions.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/generalPurposeFunctions.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":141}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":38}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":49}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"5":{"start":{"line":10,"column":4},"end":{"line":10,"column":41}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":63}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":42}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":62}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":50}},"11":{"start":{"line":22,"column":34},"end":{"line":22,"column":96}},"12":{"start":{"line":23,"column":16},"end":{"line":23,"column":50}},"13":{"start":{"line":24,"column":22},"end":{"line":24,"column":56}},"14":{"start":{"line":25,"column":21},"end":{"line":25,"column":51}},"15":{"start":{"line":27,"column":19},"end":{"line":27,"column":103}},"16":{"start":{"line":28,"column":4},"end":{"line":28,"column":18}},"17":{"start":{"line":30,"column":0},"end":{"line":30,"column":48}}},"fnMap":{"0":{"name":"getFullTableName","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":25}},"loc":{"start":{"line":5,"column":56},"end":{"line":7,"column":1}},"line":5},"1":{"name":"getViewName","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":20}},"loc":{"start":{"line":9,"column":40},"end":{"line":11,"column":1}},"line":9},"2":{"name":"getTableCsvPath","decl":{"start":{"line":13,"column":9},"end":{"line":13,"column":24}},"loc":{"start":{"line":13,"column":55},"end":{"line":15,"column":1}},"line":13},"3":{"name":"getTableParquetPath","decl":{"start":{"line":17,"column":9},"end":{"line":17,"column":28}},"loc":{"start":{"line":17,"column":59},"end":{"line":19,"column":1}},"line":17},"4":{"name":"getArchiveFilePath","decl":{"start":{"line":21,"column":9},"end":{"line":21,"column":27}},"loc":{"start":{"line":21,"column":63},"end":{"line":29,"column":1}},"line":21}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":29,"4":1,"5":11,"6":1,"7":0,"8":1,"9":4,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1},"f":{"0":29,"1":11,"2":0,"3":4,"4":0},"b":{},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/generalPurposeFunctions.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/util/generalPurposeFunctions.ts"],"names":[],"mappings":";;;AAAA,uCAAsE;AAEtE,SAAgB,gBAAgB,CAC9B,QAAgB,EAChB,OAAe,EACf,SAAiB;IAEjB,OAAO,GAAG,QAAQ,IAAI,OAAO,IAAI,SAAS,EAAE,CAAC;AAC/C,CAAC;AAND,4CAMC;AACD,SAAgB,WAAW,CAAC,QAAgB,EAAE,OAAe;IAC3D,OAAO,GAAG,QAAQ,IAAI,OAAO,OAAO,CAAC;AACvC,CAAC;AAFD,kCAEC;AAED,SAAgB,eAAe,CAC7B,QAAgB,EAChB,OAAe,EACf,SAAiB;IAEjB,OAAO,UAAU,QAAQ,IAAI,OAAO,UAAU,SAAS,GAAG,CAAC;AAC7D,CAAC;AAND,0CAMC;AAED,SAAgB,mBAAmB,CACjC,QAAgB,EAChB,OAAe,EACf,SAAiB;IAEjB,OAAO,UAAU,QAAQ,IAAI,OAAO,SAAS,SAAS,GAAG,CAAC;AAC5D,CAAC;AAND,kDAMC;AACD,SAAgB,kBAAkB,CAChC,QAAgB,EAChB,OAAe,EACf,GAAW,EACX,SAAiB;IAEjB,MAAM,qBAAqB,GAAG,8BAAa,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;IAC5E,MAAM,GAAG,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,CAAC;IAEhD,wEAAwE;IACxE,MAAM,MAAM,GAAG,UAAU,QAAQ,YAAY,OAAO,IAAI,SAAS,IAAI,GAAG,IAAI,SAAS,IAAI,QAAQ,EAAE,CAAC;IAEpG,OAAO,MAAM,CAAC;AAChB,CAAC;AAfD,gDAeC","sourcesContent":["import {generalPurposeFunctions as coreFunctions} from '@glyphx/core';\n\nexport function getFullTableName(\n  clientId: string,\n  modelId: string,\n  tableName: string\n): string {\n  return `${clientId}_${modelId}_${tableName}`;\n}\nexport function getViewName(clientId: string, modelId: string): string {\n  return `${clientId}_${modelId}_view`;\n}\n\nexport function getTableCsvPath(\n  clientId: string,\n  modelId: string,\n  tableName: string\n): string {\n  return `client/${clientId}/${modelId}/input/${tableName}/`;\n}\n\nexport function getTableParquetPath(\n  clientId: string,\n  modelId: string,\n  tableName: string\n): string {\n  return `client/${clientId}/${modelId}/data/${tableName}/`;\n}\nexport function getArchiveFilePath(\n  clientId: string,\n  modelId: string,\n  key: string,\n  timestamp: string\n): string {\n  const deconstructedFilePath = coreFunctions.string.deconstructFilePath(key);\n  const src = deconstructedFilePath.pathParts[2];\n  const tableName = deconstructedFilePath.pathParts[3];\n  const fileName = deconstructedFilePath.fileName;\n\n  //client/clientId/archive/moedlId/20221213091632/input/table1/table1.csv\n  const retval = `client/${clientId}/archive/${modelId}/${timestamp}/${src}/${tableName}/${fileName}`;\n\n  return retval;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3a296421160708c99105583743bdcf5542e30754","contentHash":"3e18e88df114700a43c761291fa71e0a9589daecd16dd148ea6825cd8c1669db"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileUploadManager.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileUploadManager.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":62}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":35}},"26":{"start":{"line":27,"column":15},"end":{"line":27,"column":38}},"27":{"start":{"line":28,"column":26},"end":{"line":28,"column":52}},"28":{"start":{"line":29,"column":27},"end":{"line":29,"column":54}},"29":{"start":{"line":30,"column":22},"end":{"line":30,"column":44}},"30":{"start":{"line":31,"column":12},"end":{"line":31,"column":40}},"31":{"start":{"line":32,"column":16},"end":{"line":32,"column":32}},"32":{"start":{"line":35,"column":26},"end":{"line":35,"column":70}},"33":{"start":{"line":36,"column":28},"end":{"line":36,"column":83}},"34":{"start":{"line":37,"column":8},"end":{"line":37,"column":27}},"35":{"start":{"line":40,"column":29},"end":{"line":40,"column":60}},"36":{"start":{"line":41,"column":28},"end":{"line":41,"column":79}},"37":{"start":{"line":42,"column":23},"end":{"line":42,"column":74}},"38":{"start":{"line":43,"column":8},"end":{"line":43,"column":65}},"39":{"start":{"line":44,"column":8},"end":{"line":44,"column":22}},"40":{"start":{"line":47,"column":32},"end":{"line":60,"column":97}},"41":{"start":{"line":48,"column":12},"end":{"line":48,"column":61}},"42":{"start":{"line":49,"column":12},"end":{"line":49,"column":81}},"43":{"start":{"line":50,"column":12},"end":{"line":50,"column":65}},"44":{"start":{"line":51,"column":12},"end":{"line":51,"column":77}},"45":{"start":{"line":52,"column":12},"end":{"line":53,"column":42}},"46":{"start":{"line":54,"column":12},"end":{"line":54,"column":63}},"47":{"start":{"line":55,"column":12},"end":{"line":55,"column":63}},"48":{"start":{"line":56,"column":12},"end":{"line":56,"column":77}},"49":{"start":{"line":57,"column":12},"end":{"line":57,"column":71}},"50":{"start":{"line":59,"column":12},"end":{"line":59,"column":54}},"51":{"start":{"line":61,"column":30},"end":{"line":61,"column":75}},"52":{"start":{"line":62,"column":29},"end":{"line":62,"column":60}},"53":{"start":{"line":63,"column":8},"end":{"line":63,"column":88}},"54":{"start":{"line":64,"column":30},"end":{"line":64,"column":100}},"55":{"start":{"line":65,"column":8},"end":{"line":67,"column":10}},"56":{"start":{"line":70,"column":44},"end":{"line":70,"column":114}},"57":{"start":{"line":71,"column":28},"end":{"line":71,"column":109}},"58":{"start":{"line":72,"column":32},"end":{"line":72,"column":81}},"59":{"start":{"line":73,"column":8},"end":{"line":73,"column":48}},"60":{"start":{"line":76,"column":28},"end":{"line":76,"column":116}},"61":{"start":{"line":77,"column":28},"end":{"line":77,"column":73}},"62":{"start":{"line":79,"column":26},"end":{"line":79,"column":96}},"63":{"start":{"line":81,"column":49},"end":{"line":81,"column":128}},"64":{"start":{"line":82,"column":41},"end":{"line":82,"column":43}},"65":{"start":{"line":83,"column":46},"end":{"line":83,"column":48}},"66":{"start":{"line":84,"column":34},"end":{"line":84,"column":222}},"67":{"start":{"line":85,"column":8},"end":{"line":85,"column":36}},"68":{"start":{"line":86,"column":8},"end":{"line":86,"column":68}},"69":{"start":{"line":87,"column":8},"end":{"line":90,"column":10}},"70":{"start":{"line":93,"column":0},"end":{"line":93,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":39},"end":{"line":38,"column":5}},"line":34},"7":{"name":"(anonymous_7)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":64},"end":{"line":45,"column":5}},"line":39},"8":{"name":"(anonymous_8)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":182},"end":{"line":68,"column":5}},"line":46},"9":{"name":"(anonymous_9)","decl":{"start":{"line":47,"column":153},"end":{"line":47,"column":154}},"loc":{"start":{"line":47,"column":162},"end":{"line":58,"column":9}},"line":47},"10":{"name":"(anonymous_10)","decl":{"start":{"line":58,"column":11},"end":{"line":58,"column":12}},"loc":{"start":{"line":58,"column":20},"end":{"line":60,"column":9}},"line":58},"11":{"name":"(anonymous_11)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":73},"end":{"line":74,"column":5}},"line":69},"12":{"name":"(anonymous_12)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":124},"end":{"line":91,"column":5}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21}},"s":{"0":1,"1":4,"2":4,"3":4,"4":4,"5":4,"6":0,"7":4,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":4,"21":4,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1},"f":{"0":4,"1":0,"2":0,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[1,1,1],"1":[1,0],"2":[4,0],"3":[4,0],"4":[4,4],"5":[0,4],"6":[4,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[4,0],"15":[4,4]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileUploadManager.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileUploadManager.ts"],"names":[],"mappings":"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","sourcesContent":["import {fileIngestion} from '@glyphx/types';\nimport {error, streams, generalPurposeFunctions, aws} from '@glyphx/core';\nimport {\n  BasicFileTransformer,\n  BasicParquetProcessor,\n  BasicColumnNameCleaner,\n} from '@fileProcessing';\nimport {BasicFieldTypeCalculator} from '@fieldProcessing';\nimport {Readable, PassThrough} from 'node:stream';\nimport * as csv from 'csv';\nimport {generalPurposeFunctions as sharedFunctions} from '@util';\nimport {\n  IFileInformation,\n  IFileProcessingError,\n} from '@interfaces/fileProcessing';\n\nexport class FileUploadManager {\n  private static creatBaseStream(fileStream: Readable) {\n    const csvStream = csv.parse({columns: true, delimiter: ','});\n    const splitStream = new streams.ForkingStream(fileStream, csvStream);\n    return splitStream;\n  }\n  private static createCsvStream(\n    csvFileName: string,\n    s3Manager: aws.S3Manager,\n    splitStream: streams.ForkingStream\n  ) {\n    const csvStringify = csv.stringify({quoted: true});\n    const passThrough = new PassThrough({objectMode: true});\n    const upload = s3Manager.getUploadStream(csvFileName, passThrough);\n    splitStream.fork('csvWriter', csvStringify, passThrough);\n    return upload;\n  }\n  private static createParquetStream(\n    fileName: string,\n    parquetFileName: string,\n    parquetPath: string,\n    tableName: string,\n    fileOperationType: fileIngestion.constants.FILE_OPERATION,\n    splitStream: streams.ForkingStream,\n    s3Manager: aws.S3Manager,\n    processedFileInformation: IFileInformation,\n    processedFileErrorInformation: IFileProcessingError[]\n  ) {\n    const fileTransformer = new BasicFileTransformer(\n      fileName,\n      999999,\n      parquetFileName,\n      parquetPath,\n      tableName,\n      fileOperationType,\n      input => {\n        processedFileInformation.columns = input.columns;\n        processedFileInformation.fileOperationType = input.fileOperationType;\n        processedFileInformation.tableName = input.tableName;\n        processedFileInformation.parquetFileName = input.parquetFileName;\n        processedFileInformation.outputFileDirecotry =\n          input.outputFileDirecotry;\n        processedFileInformation.fileName = input.fileName;\n        processedFileInformation.fileSize = input.fileSize;\n        processedFileInformation.numberOfColumns = input.numberOfColumns;\n        processedFileInformation.numberOfRows = input.numberOfRows;\n      },\n      input => {\n        processedFileErrorInformation.push(input);\n      },\n      BasicFieldTypeCalculator,\n      BasicColumnNameCleaner\n    );\n    const parquetWriter = new BasicParquetProcessor();\n    const passThrough2 = new PassThrough();\n\n    splitStream.fork(\n      'parquetWriter',\n      fileTransformer,\n      parquetWriter,\n      passThrough2\n    );\n    const parquetUpload = s3Manager.getUploadStream(\n      parquetPath + parquetFileName,\n      passThrough2\n    );\n    return {\n      parquetUpload,\n    };\n  }\n\n  private static getParquetFileName(\n    csvFileName: string,\n    clientId: string,\n    modelId: string,\n    tableName: string\n  ) {\n    const deconstructedOutputFileName =\n      generalPurposeFunctions.string.deconstructFilePath(csvFileName);\n\n    const parquetPath = sharedFunctions.getTableParquetPath(\n      clientId,\n      modelId,\n      tableName\n    );\n    const parquetFileName = deconstructedOutputFileName.baseName + '.parquet';\n    return {parquetFileName, parquetPath};\n  }\n\n  public static async processAndUploadNewFiles(\n    clientId: string,\n    modelId: string,\n    fileStream: Readable,\n    tableName: string,\n    fileName: string,\n    fileOperationType: fileIngestion.constants.FILE_OPERATION,\n    s3Manager: aws.S3Manager\n  ) {\n    const csvFileName =\n      sharedFunctions.getTableCsvPath(clientId, modelId, tableName) + fileName;\n    const splitStream = FileUploadManager.creatBaseStream(fileStream);\n\n    //Create our fork for the csv stream\n    const csvUpload = FileUploadManager.createCsvStream(\n      csvFileName,\n      s3Manager,\n      splitStream\n    );\n\n    //create our fork for our parquet file\n    const {parquetFileName, parquetPath} = FileUploadManager.getParquetFileName(\n      csvFileName,\n      clientId,\n      modelId,\n      tableName\n    );\n\n    const processedFileInformation: IFileInformation = {} as IFileInformation;\n    const processedFileErrorInformation: IFileProcessingError[] = [];\n    const {parquetUpload} = FileUploadManager.createParquetStream(\n      fileName,\n      parquetFileName,\n      parquetPath,\n      tableName,\n      fileOperationType,\n      splitStream,\n      s3Manager,\n      processedFileInformation,\n      processedFileErrorInformation\n    );\n\n    splitStream.startPipeline();\n    await Promise.all([csvUpload.done(), parquetUpload.done()]);\n\n    return {\n      fileInformation: processedFileInformation,\n      errorInformation: processedFileErrorInformation,\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4a5691b7c63d7bdfd13435420c30f6b2a80d95cd","contentHash":"d695c7643b97f2976d19de4e341edb2be1c767c8b38c8eb43246bb9d76141526"},"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileReconciliator.ts":{"path":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileReconciliator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":32}},"4":{"start":{"line":8,"column":8},"end":{"line":10,"column":35}},"5":{"start":{"line":9,"column":25},"end":{"line":9,"column":94}},"6":{"start":{"line":10,"column":22},"end":{"line":10,"column":33}},"7":{"start":{"line":13,"column":8},"end":{"line":19,"column":11}},"8":{"start":{"line":14,"column":12},"end":{"line":15,"column":23}},"9":{"start":{"line":15,"column":16},"end":{"line":15,"column":23}},"10":{"start":{"line":16,"column":30},"end":{"line":17,"column":101}},"11":{"start":{"line":16,"column":66},"end":{"line":16,"column":124}},"12":{"start":{"line":17,"column":42},"end":{"line":17,"column":100}},"13":{"start":{"line":18,"column":12},"end":{"line":18,"column":38}},"14":{"start":{"line":22,"column":8},"end":{"line":32,"column":11}},"15":{"start":{"line":23,"column":26},"end":{"line":23,"column":27}},"16":{"start":{"line":25,"column":12},"end":{"line":26,"column":23}},"17":{"start":{"line":25,"column":44},"end":{"line":25,"column":61}},"18":{"start":{"line":26,"column":16},"end":{"line":26,"column":23}},"19":{"start":{"line":27,"column":12},"end":{"line":31,"column":13}},"20":{"start":{"line":27,"column":38},"end":{"line":27,"column":96}},"21":{"start":{"line":29,"column":16},"end":{"line":29,"column":96}},"22":{"start":{"line":30,"column":16},"end":{"line":30,"column":38}},"23":{"start":{"line":35,"column":8},"end":{"line":41,"column":15}},"24":{"start":{"line":36,"column":34},"end":{"line":36,"column":42}},"25":{"start":{"line":37,"column":34},"end":{"line":37,"column":112}},"26":{"start":{"line":38,"column":12},"end":{"line":38,"column":62}},"27":{"start":{"line":39,"column":12},"end":{"line":39,"column":48}},"28":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}},"29":{"start":{"line":44,"column":23},"end":{"line":44,"column":25}},"30":{"start":{"line":45,"column":31},"end":{"line":45,"column":90}},"31":{"start":{"line":46,"column":8},"end":{"line":71,"column":9}},"32":{"start":{"line":47,"column":31},"end":{"line":69,"column":14}},"33":{"start":{"line":48,"column":16},"end":{"line":48,"column":53}},"34":{"start":{"line":49,"column":16},"end":{"line":49,"column":45}},"35":{"start":{"line":50,"column":16},"end":{"line":55,"column":17}},"36":{"start":{"line":52,"column":20},"end":{"line":52,"column":62}},"37":{"start":{"line":53,"column":20},"end":{"line":53,"column":46}},"38":{"start":{"line":54,"column":20},"end":{"line":54,"column":66}},"39":{"start":{"line":56,"column":16},"end":{"line":57,"column":70}},"40":{"start":{"line":57,"column":20},"end":{"line":57,"column":70}},"41":{"start":{"line":58,"column":16},"end":{"line":58,"column":29}},"42":{"start":{"line":70,"column":12},"end":{"line":70,"column":36}},"43":{"start":{"line":72,"column":8},"end":{"line":72,"column":22}},"44":{"start":{"line":75,"column":26},"end":{"line":75,"column":28}},"45":{"start":{"line":76,"column":34},"end":{"line":76,"column":78}},"46":{"start":{"line":77,"column":8},"end":{"line":77,"column":111}},"47":{"start":{"line":78,"column":8},"end":{"line":78,"column":93}},"48":{"start":{"line":79,"column":23},"end":{"line":79,"column":90}},"49":{"start":{"line":80,"column":8},"end":{"line":80,"column":59}},"50":{"start":{"line":83,"column":0},"end":{"line":83,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":38},"end":{"line":11,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":20},"end":{"line":9,"column":21}},"loc":{"start":{"line":9,"column":25},"end":{"line":9,"column":94}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":17},"end":{"line":10,"column":18}},"loc":{"start":{"line":10,"column":22},"end":{"line":10,"column":33}},"line":10},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":96},"end":{"line":20,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":13,"column":25},"end":{"line":13,"column":26}},"loc":{"start":{"line":13,"column":30},"end":{"line":19,"column":9}},"line":13},"5":{"name":"(anonymous_5)","decl":{"start":{"line":16,"column":60},"end":{"line":16,"column":61}},"loc":{"start":{"line":16,"column":66},"end":{"line":16,"column":124}},"line":16},"6":{"name":"(anonymous_6)","decl":{"start":{"line":17,"column":36},"end":{"line":17,"column":37}},"loc":{"start":{"line":17,"column":42},"end":{"line":17,"column":100}},"line":17},"7":{"name":"(anonymous_7)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":78},"end":{"line":33,"column":5}},"line":21},"8":{"name":"(anonymous_8)","decl":{"start":{"line":22,"column":31},"end":{"line":22,"column":32}},"loc":{"start":{"line":22,"column":36},"end":{"line":32,"column":9}},"line":22},"9":{"name":"(anonymous_9)","decl":{"start":{"line":25,"column":39},"end":{"line":25,"column":40}},"loc":{"start":{"line":25,"column":44},"end":{"line":25,"column":61}},"line":25},"10":{"name":"(anonymous_10)","decl":{"start":{"line":27,"column":32},"end":{"line":27,"column":33}},"loc":{"start":{"line":27,"column":38},"end":{"line":27,"column":96}},"line":27},"11":{"name":"(anonymous_11)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":53},"end":{"line":42,"column":5}},"line":34},"12":{"name":"(anonymous_12)","decl":{"start":{"line":35,"column":32},"end":{"line":35,"column":33}},"loc":{"start":{"line":35,"column":53},"end":{"line":41,"column":9}},"line":35},"13":{"name":"(anonymous_13)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":61},"end":{"line":73,"column":5}},"line":43},"14":{"name":"(anonymous_14)","decl":{"start":{"line":47,"column":58},"end":{"line":47,"column":59}},"loc":{"start":{"line":47,"column":72},"end":{"line":59,"column":13}},"line":47},"15":{"name":"(anonymous_15)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":107},"end":{"line":81,"column":5}},"line":74}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":12},"end":{"line":15,"column":23}},"type":"if","locations":[{"start":{"line":14,"column":12},"end":{"line":15,"column":23}},{"start":{"line":14,"column":12},"end":{"line":15,"column":23}}],"line":14},"1":{"loc":{"start":{"line":16,"column":30},"end":{"line":17,"column":101}},"type":"binary-expr","locations":[{"start":{"line":16,"column":30},"end":{"line":16,"column":125}},{"start":{"line":17,"column":16},"end":{"line":17,"column":101}}],"line":16},"2":{"loc":{"start":{"line":16,"column":66},"end":{"line":16,"column":124}},"type":"binary-expr","locations":[{"start":{"line":16,"column":66},"end":{"line":16,"column":94}},{"start":{"line":16,"column":98},"end":{"line":16,"column":124}}],"line":16},"3":{"loc":{"start":{"line":17,"column":42},"end":{"line":17,"column":100}},"type":"binary-expr","locations":[{"start":{"line":17,"column":42},"end":{"line":17,"column":70}},{"start":{"line":17,"column":74},"end":{"line":17,"column":100}}],"line":17},"4":{"loc":{"start":{"line":25,"column":12},"end":{"line":26,"column":23}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":26,"column":23}},{"start":{"line":25,"column":12},"end":{"line":26,"column":23}}],"line":25},"5":{"loc":{"start":{"line":27,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":31,"column":13}},{"start":{"line":27,"column":12},"end":{"line":31,"column":13}}],"line":27},"6":{"loc":{"start":{"line":27,"column":38},"end":{"line":27,"column":96}},"type":"binary-expr","locations":[{"start":{"line":27,"column":38},"end":{"line":27,"column":66}},{"start":{"line":27,"column":70},"end":{"line":27,"column":96}}],"line":27},"7":{"loc":{"start":{"line":38,"column":35},"end":{"line":38,"column":61}},"type":"binary-expr","locations":[{"start":{"line":38,"column":35},"end":{"line":38,"column":55}},{"start":{"line":38,"column":59},"end":{"line":38,"column":61}}],"line":38},"8":{"loc":{"start":{"line":50,"column":16},"end":{"line":55,"column":17}},"type":"if","locations":[{"start":{"line":50,"column":16},"end":{"line":55,"column":17}},{"start":{"line":50,"column":16},"end":{"line":55,"column":17}}],"line":50},"9":{"loc":{"start":{"line":50,"column":20},"end":{"line":51,"column":65}},"type":"binary-expr","locations":[{"start":{"line":50,"column":20},"end":{"line":50,"column":47}},{"start":{"line":51,"column":20},"end":{"line":51,"column":65}}],"line":50},"10":{"loc":{"start":{"line":56,"column":16},"end":{"line":57,"column":70}},"type":"if","locations":[{"start":{"line":56,"column":16},"end":{"line":57,"column":70}},{"start":{"line":56,"column":16},"end":{"line":57,"column":70}}],"line":56}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileReconciliator.ts","sources":["/home/jpburford/projects/glyphx/monorepo/packages/fileIngestion/src/fileProcessing/fileReconciliator.ts"],"names":[],"mappings":"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","sourcesContent":["import {IFileInformation} from '@interfaces/fileProcessing';\nimport {fileIngestion} from '@glyphx/types';\nimport {generalPurposeFunctions as sharedFunctions} from '@util';\n\nexport class FileReconciliator {\n  private static getDeletedTables(fileInfo: fileIngestion.IFileInfo[]) {\n    return fileInfo\n      .filter(\n        d => d.operation === fileIngestion.constants.FILE_OPERATION.DELETE\n      )\n      .map(d => d.tableName);\n  }\n\n  private static processProcessedFiles(\n    fileInfo: fileIngestion.IFileInfo[],\n    processedFileInformation: IFileInformation[],\n    fileStatistics: fileIngestion.IFileStats[],\n    fileInfos: IFileInformation[]\n  ) {\n    fileInfo.forEach(f => {\n      if (f.operation === fileIngestion.constants.FILE_OPERATION.DELETE) return;\n      const fileStats =\n        processedFileInformation.find(\n          fi => fi.tableName === f.tableName && fi.fileName === f.fileName\n        ) ||\n        (fileStatistics.find(\n          fi => fi.tableName === f.tableName && fi.fileName === f.fileName\n        ) as unknown as IFileInformation);\n      fileInfos.push(fileStats);\n    });\n  }\n\n  private static processSuppliedFiles(\n    fileStatistics: fileIngestion.IFileStats[],\n    deletedTableNames: string[],\n    fileInfos: IFileInformation[]\n  ) {\n    fileStatistics.forEach(f => {\n      const fInfo = f as unknown as IFileInformation;\n      //we do not want any deleted tables\n      if (deletedTableNames.find(d => d === f.tableName)) return;\n      if (\n        !fileInfos.find(\n          fi => fi.tableName === f.tableName && fi.fileName === f.fileName\n        )\n      ) {\n        //these are essentially no-ops for the Athena Proceser.  This will make sure that they are included in the view, but the table wwill not be regenerated.\n        fInfo.fileOperationType = fileIngestion.constants.FILE_OPERATION.APPEND;\n        fileInfos.push(fInfo);\n      }\n    });\n  }\n\n  private static groupTables(\n    fileInfos: IFileInformation[],\n    clientId: string,\n    modelId: string\n  ) {\n    return fileInfos.reduce((group, fileInfo) => {\n      const {tableName} = fileInfo;\n      const fullTableName = sharedFunctions.getFullTableName(\n        clientId,\n        modelId,\n        tableName\n      );\n      group[fullTableName] = group[fullTableName] ?? [];\n      group[fullTableName].push(fileInfo);\n      return group;\n    }, {} as Record<string, IFileInformation[]>);\n  }\n\n  private static squashFilesToTables(\n    clientId: string,\n    modelId: string,\n    fileInfos: IFileInformation[]\n  ) {\n    const retval: IFileInformation[] = [];\n\n    const groupedByTable = FileReconciliator.groupTables(\n      fileInfos,\n      clientId,\n      modelId\n    );\n\n    for (const key in groupedByTable) {\n      const mappedData = groupedByTable[key].reduce(\n        (accum: IFileInformation, g: IFileInformation) => {\n          accum.numberOfRows += g.numberOfRows;\n          accum.fileSize += g.fileSize;\n          if (\n            accum.numberOfColumns === 0 ||\n            g.fileOperationType > accum.fileOperationType\n          ) {\n            accum.numberOfColumns = g.numberOfColumns;\n            accum.columns = g.columns;\n            accum.fileOperationType = g.fileOperationType;\n          }\n\n          if (!accum.outputFileDirecotry)\n            accum.outputFileDirecotry = g.outputFileDirecotry;\n\n          return accum;\n        },\n        {\n          tableName: key,\n          fileName: '',\n          parquetFileName: '',\n          outputFileDirecotry: '',\n          numberOfRows: 0,\n          numberOfColumns: 0,\n          columns: [],\n          fileSize: 0,\n          fileOperationType: fileIngestion.constants.FILE_OPERATION.DELETE,\n        } as IFileInformation\n      );\n\n      retval.push(mappedData);\n    }\n    return retval;\n  }\n\n  public static reconcileFileInformation(\n    clientId: string,\n    modelId: string,\n    fileInfo: fileIngestion.IFileInfo[],\n    processedFileInformation: IFileInformation[],\n    fileStatistics: fileIngestion.IFileStats[]\n  ): {\n    allFiles: IFileInformation[];\n    accumFiles: IFileInformation[];\n  } {\n    const fileInfos: IFileInformation[] = [];\n\n    const deletedTableNames = FileReconciliator.getDeletedTables(fileInfo);\n\n    FileReconciliator.processProcessedFiles(\n      fileInfo,\n      processedFileInformation,\n      fileStatistics,\n      fileInfos\n    );\n\n    FileReconciliator.processSuppliedFiles(\n      fileStatistics,\n      deletedTableNames,\n      fileInfos\n    );\n\n    const retval: IFileInformation[] = FileReconciliator.squashFilesToTables(\n      clientId,\n      modelId,\n      fileInfos\n    );\n\n    return {allFiles: fileInfos, accumFiles: retval};\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"19b3d995eed6d87aea7db0224bf281c2e75aba9f","contentHash":"c204a8c5e43df736cfaabf65a92eea28929eebc074f56fde74cb97dd7557d629"}}