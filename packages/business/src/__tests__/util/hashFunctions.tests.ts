import 'mocha';
import {assert} from 'chai';
import MD5 from 'crypto-js/md5';
import {createSandbox} from 'sinon';
import {hashFiles, hashPayload, oldHashFunction, removePrefix} from '../../util/hashFunctions';
import {databaseTypes, fileIngestionTypes, webTypes} from 'types';
import {
  file1Clean,
  file1Dirty,
  file2Clean,
  file2Dirty,
  file3Clean,
  project1,
  project2,
  project3,
  project4,
  project5,
  project6,
  project7,
  project8,
} from './data';

describe('#lib/hashFunctions', () => {
  // ModelFooter needs to have a valid payloadHash
  context('hashFileSystem', () => {
    const sandbox = createSandbox();
    afterEach(() => {
      sandbox.restore();
    });

    it('will confirm hash function inequivalence', async () => {
      try {
        // No project Id included
        const project = {
          id: '652410c0c846774df2839006',
          createdAt: '2023-10-09T14:40:00.209Z',
          updatedAt: '2024-07-12T13:37:35.289Z',
          name: 'Untitled',
          description: '',
          currentVersion: 0,
          workspace: '65240fad8feb2f0e0d519cab',
          state: {
            properties: {
              X: {
                axis: 'X',
                accepts: 'COLUMN_DRAG',
                key: 'hello',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82d7',
                },
                id: '669130b7ba41522381fd82d6',
              },
              Y: {
                axis: 'Y',
                accepts: 'COLUMN_DRAG',
                key: 'testing',
                dataType: 1,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82d9',
                },
                id: '669130b7ba41522381fd82d8',
              },
              Z: {
                axis: 'Z',
                accepts: 'COLUMN_DRAG',
                key: 'headers',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82db',
                },
                id: '669130b7ba41522381fd82da',
              },
              A: {
                axis: 'A',
                accepts: 'COLUMN_DRAG',
                key: 'Column 1',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82dd',
                },
                id: '669130b7ba41522381fd82dc',
              },
              B: {
                axis: 'B',
                accepts: 'COLUMN_DRAG',
                key: 'Column 2',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82df',
                },
                id: '669130b7ba41522381fd82de',
              },
              C: {
                axis: 'C',
                accepts: 'COLUMN_DRAG',
                key: 'Column 3',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                  min: 0,
                  max: 0,
                  id: '669130b7ba41522381fd82e1',
                },
                id: '669130b7ba41522381fd82e0',
              },
            },
            id: '669130d3bcc82dbb96e2e61f',
          },
          stateHistory: ['6524110fbf4b97489fb99eda', '669130b7ba41522381fd82e7', '6691319fbcc82dbb96e2e67a'],
          members: ['652410c0c846774df283901d'],
          tags: [],
          files: [
            {
              fileName: 'book1.csv',
              tableName: 'book1',
              numberOfRows: 9,
              numberOfColumns: 3,
              columns: [
                {
                  name: 'glyphx_id__',
                  fieldType: 2,
                  id: '652410e36487641dd617426e',
                },
                {
                  name: 'hello',
                  fieldType: 0,
                  id: '652410e36487641dd617426f',
                },
                {
                  name: 'testing',
                  fieldType: 1,
                  longestString: 1,
                  id: '652410e36487641dd6174270',
                },
                {
                  name: 'headers',
                  fieldType: 0,
                  id: '652410e36487641dd6174271',
                },
              ],
              fileSize: 370,
              id: '652410e36487641dd617426d',
            },
          ],
          viewName: 'glyphx_65240fad8feb2f0e0d519cab_652410c0c846774df2839006_view',
          __v: 4,
          aspectRatio: {
            height: 742,
            width: 1596,
            id: '6691319fbcc82dbb96e2e687',
          },
          imageHash:
            '',
        };

        if (project) {
          const payloadHash = hashPayload(hashFiles(project.files), project as any);
          const oldPayloadHash = oldHashFunction(hashFiles(project.files), project as any);
          assert.strictEqual(payloadHash, oldPayloadHash);
          assert.fail();
        }
      } catch (error) {}
    });
    it('will create the same hash regardless of extraneous properties in the fileStats array members', async () => {
      try {
        const hash1 = hashFiles([file1Clean]);
        const hash2 = hashFiles([file1Dirty]);
        assert.strictEqual(hash1, hash2);

        const hash3 = hashFiles([file2Clean]);
        const hash4 = hashFiles([file2Dirty]);
        assert.strictEqual(hash3, hash4);
      } catch (error) {
        assert.fail();
      }
    });
    it('will create a different hash regardless of extraneous properties in the fileStats array members', async () => {
      try {
        const hash1 = hashFiles([file1Clean]);
        const hash2 = hashFiles([file2Dirty]);
        assert.notEqual(hash1, hash2);

        const hash3 = hashFiles([file2Clean]);
        const hash4 = hashFiles([file1Dirty]);
        assert.notEqual(hash3, hash4);
      } catch (error) {
        assert.fail();
      }
    });
    it('will create a different hash for same files, different file order', async () => {
      try {
        const hash1 = hashFiles([file1Clean, file2Clean]);
        const hash2 = hashFiles([file2Clean, file1Clean]);

        assert.notEqual(hash1, hash2);

        const hash3 = hashFiles([file1Dirty, file2Dirty]);
        const hash4 = hashFiles([file2Dirty, file1Dirty]);
        assert.notEqual(hash3, hash4);
      } catch (error) {
        assert.fail();
      }
    });
    it('will create a different hash for same file, different column order', async () => {
      try {
        const hash1 = hashFiles([file2Clean]);
        // this file has different column order
        const hash2 = hashFiles([file3Clean]);
        assert.notEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });
  });

  context('hashPayload', () => {
    const sandbox = createSandbox();
    afterEach(() => {
      sandbox.restore();
    });

    /**
     * The following format is used to denote which project/files are in the core data combinations
     * files can either be clean (only include the keys we care about) or dirty (includes extra object properties which should not affect the hash)
     * We is
     * 1,[1,2] denotes...
     * project:
     * {
     *    files: [file1, file2]
     *    state: defaultState
     * }
     *
     * The fileSystem and column variant differentiations are denoted [fileVariant, fileVariant] for easy reference to keep this logic on the straight and narrow
     */

    // [1,[1,2]]
    it('will create the same hash regardless of extraneous properties in the fileStats array members', async () => {
      try {
        // equivalent states, [clean, clean] = [dirty, dirty]
        // @ts-ignore
        const hash1 = hashPayload(hashFiles(project1.files), project1);
        // @ts-ignore
        const hash2 = hashPayload(hashFiles(project2.files), project2);
        assert.strictEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });

    // [1, [1,2]]
    it('will create the same hash regardless of extraneous properties in the fileStats array members', async () => {
      try {
        // equivalent states, [clean/dirty] = [dirty/clean]
        // @ts-ignore
        const hash1 = hashPayload(hashFiles(project3.files), project3);
        // @ts-ignore
        const hash2 = hashPayload(hashFiles(project4.files), project4);
        assert.strictEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });

    it('will create a different hash due to changes to the X.key', async () => {
      try {
        // @ts-ignore
        const hash1 = hashPayload(hashFiles(project5.files), project5);
        // @ts-ignore
        const hash2 = hashPayload(hashFiles(project6.files), project6);
        assert.notEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });
    it('will create the same hash because change is an erroneous property', async () => {
      try {
        // @ts-ignore
        const hash1 = hashPayload(hashFiles(project5.files), project5);
        // @ts-ignore
        const hash2 = hashPayload(hashFiles(project7.files), project7);
        assert.strictEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });
    it('will create a different hash based on a change in projectId', async () => {
      try {
        // @ts-ignore
        const hash1 = hashPayload(hashFiles(project1.files), project5);
        // @ts-ignore
        const hash2 = hashPayload(hashFiles(project2.files), project8);
        assert.notEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });

    it('checking the filter is included in the payload hash', async () => {
      try {
        const project = {
          id: '66c781bf2ad1a468ec1446ac',
          createdAt: new Date(),
          updatedAt: new Date(),
          name: '8_22_requirement_validation_time',
          docId: 'pTUye-aPBiWzuE6YqfzJO',
          description: '',
          currentVersion: 0,
          workspace: '66b66a4faa83b6d2b3deb8f3',
          state: {
            properties: {
              X: {
                axis: 'X',
                accepts: 'COLUMN_DRAG',
                key: 'mml_type',
                dataType: 1,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: ['MATERIAL'],
                },
              },
              Y: {
                axis: 'Y',
                accepts: 'COLUMN_DRAG',
                key: 'date_requested',
                dataType: 3,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                },
                dateGrouping: 'qualified_day_of_year',
              },
              Z: {
                axis: 'Z',
                accepts: 'COLUMN_DRAG',
                key: 'requirement_validation_timedifference_in_days_created_to_requested',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 3,
                },
                accumulatorType: 'AVG',
              },
              A: {
                axis: 'A',
                accepts: 'COLUMN_DRAG',
                key: 'Column 1',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
              B: {
                axis: 'B',
                accepts: 'COLUMN_DRAG',
                key: 'Column 2',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
              C: {
                axis: 'C',
                accepts: 'COLUMN_DRAG',
                key: 'Column 3',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
            },
          },
          stateHistory: ['66c78221f96dc936be9901f2', '66cf226fec20160bc7386a1e'],
          members: ['66c781bf2ad1a468ec1446c1'],
          tags: [],
          files: [
            {
              fileName: 'cwt_jlt_8_22_mod_2.csv',
              tableName: 'cwt_jlt_8_22_mod_2',
              numberOfRows: 3025,
              numberOfColumns: 13,
              columns: [
                {
                  name: 'glyphx_id__',
                  fieldType: 2,
                },
                {
                  name: 's_no',
                  fieldType: 0,
                },
                {
                  name: 'mml_type',
                  fieldType: 1,
                  longestString: 18,
                },
                {
                  name: 'date_created',
                  fieldType: 3,
                },
                {
                  name: 'date_requested',
                  fieldType: 3,
                },
                {
                  name: 'xdate_ordered',
                  fieldType: 1,
                  longestString: 9,
                },
                {
                  name: 'date_desired_ep',
                  fieldType: 3,
                },
                {
                  name: 'xdate_rcvd',
                  fieldType: 1,
                  longestString: 9,
                },
                {
                  name: 'total_procurement_time_requirement_created_to_delivery',
                  fieldType: 0,
                },
                {
                  name: 'delivery_performance_difference_in_days_between_delivered_and_desired_date',
                  fieldType: 0,
                },
                {
                  name: 'requirement_validation_timedifference_in_days_created_to_requested',
                  fieldType: 0,
                },
                {
                  name: 'order_processing_time_difference_b_w_requested_and_ordered',
                  fieldType: 0,
                },
                {
                  name: 'order_fulfillment_time_difference_b_w_ordered_and_received',
                  fieldType: 0,
                },
                {
                  name: 'internal_delivery_time_difference_b_w_received_and_delivered',
                  fieldType: 0,
                },
              ],
              fileSize: 1772688,
            },
          ],
          viewName: 'glyphx_66b66a4faa83b6d2b3deb8f3_66c781bf2ad1a468ec1446ac_view',
          aspectRatio: {
            height: 1376,
            width: 1722,
            id: '66cf2270ec20160bc7386a35',
          },
          imageHash: '',
        };

        const project2 = {
          id: '66c781bf2ad1a468ec1446ac',
          createdAt: new Date(),
          updatedAt: new Date(),
          name: '8_22_requirement_validation_time',
          docId: 'pTUye-aPBiWzuE6YqfzJO',
          description: '',
          currentVersion: 0,
          workspace: '66b66a4faa83b6d2b3deb8f3',
          state: {
            properties: {
              X: {
                axis: 'X',
                accepts: 'COLUMN_DRAG',
                key: 'mml_type',
                dataType: 1,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                },
              },
              Y: {
                axis: 'Y',
                accepts: 'COLUMN_DRAG',
                key: 'date_requested',
                dataType: 3,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  keywords: [],
                },
                dateGrouping: 'qualified_day_of_year',
              },
              Z: {
                axis: 'Z',
                accepts: 'COLUMN_DRAG',
                key: 'requirement_validation_timedifference_in_days_created_to_requested',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 3,
                },
                accumulatorType: 'AVG',
              },
              A: {
                axis: 'A',
                accepts: 'COLUMN_DRAG',
                key: 'Column 1',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
              B: {
                axis: 'B',
                accepts: 'COLUMN_DRAG',
                key: 'Column 2',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
              C: {
                axis: 'C',
                accepts: 'COLUMN_DRAG',
                key: 'Column 3',
                dataType: 0,
                interpolation: 'LIN',
                direction: 'ASC',
                filter: {
                  min: 0,
                  max: 0,
                },
              },
            },
          },
          stateHistory: ['66c78221f96dc936be9901f2', '66cf226fec20160bc7386a1e'],
          members: ['66c781bf2ad1a468ec1446c1'],
          tags: [],
          files: [
            {
              fileName: 'cwt_jlt_8_22_mod_2.csv',
              tableName: 'cwt_jlt_8_22_mod_2',
              numberOfRows: 3025,
              numberOfColumns: 13,
              columns: [
                {
                  name: 'glyphx_id__',
                  fieldType: 2,
                },
                {
                  name: 's_no',
                  fieldType: 0,
                },
                {
                  name: 'mml_type',
                  fieldType: 1,
                  longestString: 18,
                },
                {
                  name: 'date_created',
                  fieldType: 3,
                },
                {
                  name: 'date_requested',
                  fieldType: 3,
                },
                {
                  name: 'xdate_ordered',
                  fieldType: 1,
                  longestString: 9,
                },
                {
                  name: 'date_desired_ep',
                  fieldType: 3,
                },
                {
                  name: 'xdate_rcvd',
                  fieldType: 1,
                  longestString: 9,
                },
                {
                  name: 'total_procurement_time_requirement_created_to_delivery',
                  fieldType: 0,
                },
                {
                  name: 'delivery_performance_difference_in_days_between_delivered_and_desired_date',
                  fieldType: 0,
                },
                {
                  name: 'requirement_validation_timedifference_in_days_created_to_requested',
                  fieldType: 0,
                },
                {
                  name: 'order_processing_time_difference_b_w_requested_and_ordered',
                  fieldType: 0,
                },
                {
                  name: 'order_fulfillment_time_difference_b_w_ordered_and_received',
                  fieldType: 0,
                },
                {
                  name: 'internal_delivery_time_difference_b_w_received_and_delivered',
                  fieldType: 0,
                },
              ],
              fileSize: 1772688,
            },
          ],
          viewName: 'glyphx_66b66a4faa83b6d2b3deb8f3_66c781bf2ad1a468ec1446ac_view',
          aspectRatio: {
            height: 1376,
            width: 1722,
            id: '66cf2270ec20160bc7386a35',
          },
          imageHash: '',
        };

        // "33bbc1ba093c2096dbe8024827f79f7a" - this is what is actually in s3, it is being produced in glyphengine because the project is updated AFTER the payloadhash is calculated
        const hash1 = hashPayload(hashFiles(project.files), project as unknown as databaseTypes.IProject);
        // '48e165673514843bf5b32dcb0c4f2d55'; - this is the newHash occording to our logs.
        // conclusion: glyphengine and signDataUrls get pre vs. post filter application payload hashes, resulting in the string filter error
        const hash2 = hashPayload(hashFiles(project2.files), project2 as unknown as databaseTypes.IProject);

        assert.isOk(hash1);
        assert.isOk(hash2);
        assert.notEqual(hash1, hash2);
      } catch (error) {
        assert.fail();
      }
    });
  });

  context('hashFileStats', () => {
    const sandbox = createSandbox();
    afterEach(() => {
      sandbox.restore();
    });
    it('will correctly hash fileStats', async () => {
      try {
      } catch (error) {
        assert.fail();
      }
    });
  });

  context('removePrefix', () => {
    const sandbox = createSandbox();
    afterEach(() => {
      sandbox.restore();
    });
    it('will remove the glyphx id prefix that is added by the ingestion process', async () => {
      try {
        const prefixedStr = 'glyphx_id__testing123';
        const retval = removePrefix(prefixedStr, 'glyphx_id__');
        assert.strictEqual(retval, 'testing123');
      } catch (error) {
        assert.fail();
      }
    });
    it('will leave the string untouched if it does not include the prefix', async () => {
      try {
        const nonPrefixedStr = 'testing123';
        const retval = removePrefix(nonPrefixedStr, 'glyphx_id__');
        assert.strictEqual(retval, 'testing123');
      } catch (error) {
        assert.fail();
      }
    });
  });
});
