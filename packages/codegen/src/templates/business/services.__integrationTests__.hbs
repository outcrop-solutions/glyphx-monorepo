// THIS CODE WAS AUTOMATICALLY GENERATED
import 'mocha';
import {assert} from 'chai';
import {MongoDbConnection} from '@glyphx/database';
import {Types as mongooseTypes} from 'mongoose';
import {v4} from 'uuid';
import {
  database as databaseTypes,
} from '@glyphx/types';
import {MOCK_{{uppercase (pascalcase this.name)}} } from '../mocks'
import { {{camelcase this.name}}Service} from '../services';

type ObjectId = mongooseTypes.ObjectId;

const propKeys = Object.keys(MOCK_{{uppercase (pascalcase this.name)}})

describe('#{{pascalcase this.name}}Service', () => {
  context('test the functions of the {{camelcase this.name}} service', () => {
    const mongoConnection = new MongoDbConnection();
    const {{camelcase this.name}}Model = mongoConnection.models.{{pascalcase this.name}}Model;
    let {{camelcase this.name}}Id: ObjectId;

    before(async () => {
      await mongoConnection.init();

      const {{camelcase this.name}}Document = await {{camelcase this.name}}Model.create{{pascalcase this.name}}(
        MOCK_{{uppercase (pascalcase this.name)}} as unknown as databaseTypes.I{{pascalcase this.name}}
      );

      {{camelcase this.name}}Id = {{camelcase this.name}}Document._id as unknown as mongooseTypes.ObjectId;
    });

    after(async () => {
      if ({{camelcase this.name}}Id) {
        await {{camelcase this.name}}Model.findByIdAndDelete({{camelcase this.name}}Id);
      }
    });

    it('will retreive our {{camelcase this.name}} from the database', async () => {
      const {{camelcase this.name}} = await {{camelcase this.name}}Service.get{{pascalcase this.name}}({{camelcase this.name}}Id);
      assert.isOk({{camelcase this.name}});

      assert.strictEqual({{camelcase this.name}}?.name, MOCK_{{uppercase (pascalcase this.name)}}.name);
    });

    it('will update our {{camelcase this.name}}', async () => {
      assert.isOk({{camelcase this.name}}Id);
      const updated{{pascalcase this.name}} = await {{camelcase this.name}}Service.update{{pascalcase this.name}}({{camelcase this.name}}Id, {
        [propKeys]: generateDataFromType(MOCK),
      });
      assert.strictEqual(updated{{pascalcase this.name}}.name, INPUT_PROJECT_NAME);

      const saved{{pascalcase this.name}} = await {{camelcase this.name}}Service.get{{pascalcase this.name}}({{camelcase this.name}}Id);

      assert.strictEqual(saved{{pascalcase this.name}}?.name, INPUT_PROJECT_NAME);
    });

    it('will delete our {{camelcase this.name}}', async () => {
      assert.isOk({{camelcase this.name}}Id);
      const updated{{pascalcase this.name}} = await {{camelcase this.name}}Service.delete{{pascalcase this.name}}({{camelcase this.name}}Id);
      assert.strictEqual(updated{{pascalcase this.name}}[propKeys[0]], propKeys[0]);

      const saved{{pascalcase this.name}} = await {{camelcase this.name}}Service.get{{pascalcase this.name}}({{camelcase this.name}}Id);

      assert.isOk(saved{{pascalcase this.name}}?.deletedAt);
    });
  });
});
