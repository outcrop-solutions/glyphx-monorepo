// THIS CODE WAS AUTOMATICALLY GENERATED
import 'mocha';
import {assert} from 'chai';
import {MongoDbConnection} from '../mongoose/mongooseConnection';
import {Types as mongooseTypes} from 'mongoose';
import {v4} from 'uuid';
import {
  database as databaseTypes,
  web as webTypes,
  fileIngestion as fileIngestionTypes,
} from '@glyphx/types';
import {error} from '@glyphx/core';

type ObjectId = mongooseTypes.ObjectId;

const UNIQUE_KEY = v4().replaceAll('-', '');

describe('#{{pascalcase this.name}}Model', () => {
  context('test the crud functions of the {{camelcase this.name}} model', () => {
    const mongoConnection = new MongoDbConnection();
    const {{camelcase this.name}}Model = mongoConnection.models.{{pascalcase this.name}}Model;
    let {{camelcase this.name}}Id: ObjectId;
    let memberId: ObjectId;
    let {{camelcase this.name}}Id2: ObjectId;
    let workspaceId: ObjectId;
    let {{camelcase this.name}}TemplateId: ObjectId;
    let workspaceDocument: any;
    let memberDocument: any;
    let {{camelcase this.name}}TemplateDocument: any;

    before(async () => {
      await mongoConnection.init();
      {{!-- Generate pre-requisite test data --}}
      const workspaceModel = mongoConnection.models.WorkspaceModel;
      const memberModel = mongoConnection.models.MemberModel;
      const {{camelcase this.name}}TemplateModel = mongoConnection.models.{{pascalcase this.name}}TemplateModel;

      await workspaceModel.create([INPUT_WORKSPACE], {
        validateBeforeSave: false,
      });
      const savedWorkspaceDocument = await workspaceModel
        .findOne({name: INPUT_WORKSPACE.name})
        .lean();
      workspaceId = savedWorkspaceDocument?._id as mongooseTypes.ObjectId;
      workspaceDocument = savedWorkspaceDocument;
      assert.isOk(workspaceId);

      await memberModel.create([INPUT_MEMBER], {
        validateBeforeSave: false,
      });
      const savedMemberDocument = await memberModel
        .findOne({email: INPUT_MEMBER.email})
        .lean();
      memberId = savedMemberDocument?._id as mongooseTypes.ObjectId;
      memberDocument = savedMemberDocument;
      assert.isOk(memberId);

      await {{camelcase this.name}}TemplateModel.create([INPUT_PROJECT_TYPE], {
        validateBeforeSave: false,
      });
      const saved{{pascalcase this.name}}TemplateDocument = await {{camelcase this.name}}TemplateModel
        .findOne({name: INPUT_PROJECT_TYPE.name})
        .lean();
      {{camelcase this.name}}TemplateId =
        saved{{pascalcase this.name}}TemplateDocument?._id as mongooseTypes.ObjectId;

      {{camelcase this.name}}TemplateDocument = saved{{pascalcase this.name}}TemplateDocument;

      assert.isOk({{camelcase this.name}}TemplateId);
    });

    after(async () => {
      const workspaceModel = mongoConnection.models.WorkspaceModel;
      await workspaceModel.findByIdAndDelete(workspaceId);

      const {{camelcase this.name}}TemplateModel = mongoConnection.models.{{pascalcase this.name}}TemplateModel;
      await {{camelcase this.name}}TemplateModel.findByIdAndDelete({{camelcase this.name}}TemplateId);

      const memberModel = mongoConnection.models.MemberModel;
      if (memberId) await memberModel.findByIdAndDelete(memberId);

      if ({{camelcase this.name}}Id) {
        await {{camelcase this.name}}Model.findByIdAndDelete({{camelcase this.name}}Id);
      }

      if ({{camelcase this.name}}Id2) {
        await {{camelcase this.name}}Model.findByIdAndDelete({{camelcase this.name}}Id2);
      }
    });

    it('add a new {{camelcase this.name}} ', async () => {
      const {{camelcase this.name}}Input = JSON.parse(JSON.stringify(INPUT_DATA));
      {{camelcase this.name}}Input.workspace = workspaceDocument;
      {{camelcase this.name}}Input.template = {{camelcase this.name}}TemplateDocument;

      const {{camelcase this.name}}Document = await {{camelcase this.name}}Model.create{{pascalcase this.name}}({{camelcase this.name}}Input);

      assert.isOk({{camelcase this.name}}Document);
      assert.strictEqual({{camelcase this.name}}Document.name, {{camelcase this.name}}Input.name);
      assert.strictEqual(
        {{camelcase this.name}}Document.workspace._id?.toString(),
        workspaceId.toString()
      );

      {{camelcase this.name}}Id = {{camelcase this.name}}Document._id as mongooseTypes.ObjectId;
    });

    it('retreive a {{camelcase this.name}}', async () => {
      assert.isOk({{camelcase this.name}}Id);
      const {{camelcase this.name}} = await {{camelcase this.name}}Model.get{{pascalcase this.name}}ById({{camelcase this.name}}Id);

      assert.isOk({{camelcase this.name}});
      assert.strictEqual({{camelcase this.name}}._id?.toString(), {{camelcase this.name}}Id.toString());
    });

    it('modify a {{camelcase this.name}}', async () => {
      assert.isOk({{camelcase this.name}}Id);
      const input = {description: 'a modified description'};
      const updatedDocument = await {{camelcase this.name}}Model.update{{pascalcase this.name}}ById(
        {{camelcase this.name}}Id,
        input
      );
      assert.strictEqual(updatedDocument.description, input.description);
    });

    it('Get multiple {{camelcase this.name}}s without a filter', async () => {
      assert.isOk({{camelcase this.name}}Id);
      const {{camelcase this.name}}Input = JSON.parse(JSON.stringify(INPUT_DATA2));
      {{camelcase this.name}}Input.workspace = workspaceDocument;
      {{camelcase this.name}}Input.type = {{camelcase this.name}}TemplateDocument;

      const {{camelcase this.name}}Document = await {{camelcase this.name}}Model.create{{pascalcase this.name}}({{camelcase this.name}}Input);

      assert.isOk({{camelcase this.name}}Document);

      {{camelcase this.name}}Id2 = {{camelcase this.name}}Document._id as mongooseTypes.ObjectId;

      const {{camelcase this.name}}s = await {{camelcase this.name}}Model.query{{pascalcase this.name}}s();
      assert.isArray({{camelcase this.name}}s.results);
      assert.isAtLeast({{camelcase this.name}}s.numberOfItems, 2);
      const expectedDocumentCount =
        {{camelcase this.name}}s.numberOfItems <= {{camelcase this.name}}s.itemsPerPage
          ? {{camelcase this.name}}s.numberOfItems
          : {{camelcase this.name}}s.itemsPerPage;
      assert.strictEqual({{camelcase this.name}}s.results.length, expectedDocumentCount);
    });

    it('Get multiple {{camelcase this.name}}s with a filter', async () => {
      assert.isOk({{camelcase this.name}}Id2);
      const results = await {{camelcase this.name}}Model.query{{pascalcase this.name}}s({
        name: INPUT_DATA.name,
      });
      assert.strictEqual(results.results.length, 1);
      assert.strictEqual(results.results[0]?.name, INPUT_DATA.name);
    });

    it('page accounts', async () => {
      assert.isOk({{camelcase this.name}}Id2);
      const results = await {{camelcase this.name}}Model.query{{pascalcase this.name}}s({}, 0, 1);
      assert.strictEqual(results.results.length, 1);

      const lastId = results.results[0]?._id;

      const results2 = await {{camelcase this.name}}Model.query{{pascalcase this.name}}s({}, 1, 1);
      assert.strictEqual(results2.results.length, 1);

      assert.notStrictEqual(
        results2.results[0]?._id?.toString(),
        lastId?.toString()
      );
    });

    it('remove a {{camelcase this.name}}', async () => {
      assert.isOk({{camelcase this.name}}Id);
      await {{camelcase this.name}}Model.delete{{pascalcase this.name}}ById({{camelcase this.name}}Id);
      let errored = false;
      try {
        await {{camelcase this.name}}Model.get{{pascalcase this.name}}ById({{camelcase this.name}}Id);
      } catch (err) {
        assert.instanceOf(err, error.DataNotFoundError);
        errored = true;
      }

      assert.isTrue(errored);
      {{camelcase this.name}}Id = null as unknown as ObjectId;
    });
  });
});
