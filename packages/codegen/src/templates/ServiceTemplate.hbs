import {
  database as databaseTypes,
  fileIngestion as fileIngestionTypes,
  web as webTypes,
} from '@glyphx/types';
import {error, constants} from '@glyphx/core';
import {Types as mongooseTypes} from 'mongoose';
import mongoDbConnection from 'lib/databaseConnection';

export class {{pascalcase this.name}}Service {
  public static async get{{pascalcase this.name}}(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string
  ): Promise<databaseTypes.I{{pascalcase this.name}} | null> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const {{lowercase (pascalcase this.name)}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.get{{pascalcase this.name}}ById(id);
      return {{lowercase (pascalcase this.name)}};
    } catch (err: any) {
      if (err instanceof error.DataNotFoundError) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        return null;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while getting the {{lowercase (pascalcase this.name)}}. See the inner error for additional details',
          '{{lowercase (pascalcase this.name)}}',
          'get{{pascalcase this.name}}',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async get{{pascalcase this.name}}s(
    filter?: Record<string, unknown>
  ): Promise<databaseTypes.I{{pascalcase this.name}}[] | null> {
    try {
      const {{pluralize (camelcase this.name)}}s =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.query{{pascalcase this.name}}s(filter);
      return {{pluralize (camelcase this.name)}}?.results;
    } catch (err: any) {
      if (err instanceof error.DataNotFoundError) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        return null;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while getting {{pluralize (camelcase this.name)}}. See the inner error for additional details',
          '{{pluralize (camelcase this.name)}}',
          'get{{pascalcase this.name}}s',
          {filter},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async create{{pascalcase this.name}}(
    data: Partial<databaseTypes.I{{pascalcase this.name}}>,
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      {{#each properties}}
      {{#if (isOneToMany this.relationType)}}
      const {{camelcase this.name}}CastId =
        {{camelcase this.name}}Id instanceof mongooseTypes.ObjectId
          ? {{camelcase this.name}}Id
          : new mongooseTypes.ObjectId({{camelcase this.name}}Id);
      {{/if}}
      {{/each}}

      // create {{lowercase (pascalcase this.name)}}
      const {{lowercase (pascalcase this.name)}} = await mongoDbConnection.models.{{pascalcase this.name}}Model.create{{pascalcase this.name}}(
        input
      );

      const memberInput = {
        type: databaseTypes.constants.MEMBERSHIP_TYPE.PROJECT,
        inviter: email,
        email: email,
        invitedAt: new Date(),
        joinedAt: new Date(),
        status: databaseTypes.constants.INVITATION_STATUS.ACCEPTED,
        {{lowercase (pascalcase this.name)}}Role: databaseTypes.constants.PROJECT_ROLE.OWNER,
        member: {_id: creatorCastId} as unknown as databaseTypes.IUser,
        invitedBy: {_id: creatorCastId} as unknown as databaseTypes.IUser,
        {{lowercase (pascalcase this.name)}}: {{lowercase (pascalcase this.name)}} as unknown as databaseTypes.I{{pascalcase this.name}},
        workspace: {
          _id: workspaceCastId,
        } as unknown as databaseTypes.IWorkspace,
      } as unknown as databaseTypes.IMember;

      // create default {{lowercase (pascalcase this.name)}} membership
      const member =
        await mongoDbConnection.models.MemberModel.create{{pascalcase this.name}}Member(
          memberInput
        );

      // add member to {{lowercase (pascalcase this.name)}}
      await mongoDbConnection.models.{{pascalcase this.name}}Model.addMembers(
        {{lowercase (pascalcase this.name)}}?._id as unknown as mongooseTypes.ObjectId,
        [member]
      );

      // add member to user
      await mongoDbConnection.models.UserModel.addMembership(
        creatorCastId as unknown as mongooseTypes.ObjectId,
        [member]
      );

      // connect {{lowercase (pascalcase this.name)}} to workspace
      await mongoDbConnection.models.WorkspaceModel.add{{pascalcase this.name}}s(
        workspaceCastId,
        [{{lowercase (pascalcase this.name)}}]
      );

      return {{lowercase (pascalcase this.name)}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidOperationError ||
        err instanceof error.InvalidArgumentError ||
        err instanceof error.DataValidationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while creating the {{lowercase (pascalcase this.name)}}. See the inner error for additional details',
          '{{lowercase (pascalcase this.name)}}',
          'create{{pascalcase this.name}}',
          {name, workspaceId},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async update{{pascalcase this.name}}State(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    state: Omit<
      databaseTypes.IState,
      | '{{lowercase (pascalcase this.name)}}'
      | '_id'
      | 'createdAt'
      | 'updatedAt'
      | 'description'
      | 'fileSystem'
      | 'fileSystemHash'
      | 'payloadHash'
      | 'version'
      | 'static'
      | 'camera'
      | 'createdBy'
    >
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const {{lowercase (pascalcase this.name)}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.update{{pascalcase this.name}}ById(id, {
          state: state,
        });
      return {{lowercase (pascalcase this.name)}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while updating the User. See the inner error for additional details',
          'user',
          'updateUser',
          {{{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async deactivate(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const {{lowercase (pascalcase this.name)}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.update{{pascalcase this.name}}ById(id, {
          deletedAt: new Date(),
        });
      return {{lowercase (pascalcase this.name)}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while updating the User. See the inner error for additional details',
          'user',
          'updateUser',
          {{{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async get{{pascalcase this.name}}FileStats(
    id: mongooseTypes.ObjectId | string
  ): Promise<fileIngestionTypes.IFileStats[]> {
    const {{lowercase (pascalcase this.name)}} = await {{pascalcase this.name}}Service.get{{pascalcase this.name}}(id);
    return {{lowercase (pascalcase this.name)}}?.files ?? [];
  }

  public static async get{{pascalcase this.name}}ViewName(
    id: mongooseTypes.ObjectId | string
  ): Promise<string> {
    const {{lowercase (pascalcase this.name)}} = await {{pascalcase this.name}}Service.get{{pascalcase this.name}}(id);
    return {{lowercase (pascalcase this.name)}}?.viewName ?? '';
  }

  public static async update{{pascalcase this.name}}FileStats(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    fileStats: fileIngestionTypes.IFileStats[]
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.update{{pascalcase this.name}}ById(id, {
          files: fileStats,
        });

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          "An unexpected error occurred while updating the {{lowercase (pascalcase this.name)}}'s fileStats. See the inner error for additional details",
          '{{lowercase (pascalcase this.name)}}',
          'update{{pascalcase this.name}}FileStats',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async update{{pascalcase this.name}}View(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    viewName: string
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.update{{pascalcase this.name}}ById(id, {
          viewName: viewName,
        });

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          "An unexpected error occurred while updating the {{lowercase (pascalcase this.name)}}'s view. See the inner error for additional details",
          '{{lowercase (pascalcase this.name)}}',
          'update{{pascalcase this.name}}View',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async update{{pascalcase this.name}}(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    update: Omit<
      Partial<databaseTypes.I{{pascalcase this.name}}>,
      '_id' | 'createdAt' | 'updatedAt'
    >
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.update{{pascalcase this.name}}ById(
          id,
          update
        );

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          "An unexpected error occurred while updating the {{lowercase (pascalcase this.name)}}'s view. See the inner error for additional details",
          '{{lowercase (pascalcase this.name)}}',
          'update{{pascalcase this.name}}View',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async addStates(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    states: (databaseTypes.IState | mongooseTypes.ObjectId)[]
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.addStates(id, states);

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while adding states to the {{lowercase (pascalcase this.name)}}. See the inner error for additional details',
          '{{lowercase (pascalcase this.name)}}',
          'addStates',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }

  public static async addTags(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    tags: (databaseTypes.ITag | mongooseTypes.ObjectId)[]
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.addTags(id, tags);

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while adding tags to the {{lowercase (pascalcase this.name)}}. See the inner error for additional details',
          '{{lowercase (pascalcase this.name)}}',
          'addTags',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }
  public static async removeTags(
    {{lowercase (pascalcase this.name)}}Id: mongooseTypes.ObjectId | string,
    tags: (databaseTypes.ITag | mongooseTypes.ObjectId)[]
  ): Promise<databaseTypes.I{{pascalcase this.name}}> {
    try {
      const id =
        {{lowercase (pascalcase this.name)}}Id instanceof mongooseTypes.ObjectId
          ? {{lowercase (pascalcase this.name)}}Id
          : new mongooseTypes.ObjectId({{lowercase (pascalcase this.name)}}Id);
      const updated{{pascalcase this.name}} =
        await mongoDbConnection.models.{{pascalcase this.name}}Model.removeTags(id, tags);

      return updated{{pascalcase this.name}};
    } catch (err: any) {
      if (
        err instanceof error.InvalidArgumentError ||
        err instanceof error.InvalidOperationError
      ) {
        err.publish('', constants.ERROR_SEVERITY.WARNING);
        throw err;
      } else {
        const e = new error.DataServiceError(
          'An unexpected error occurred while removing tags from the {{lowercase (pascalcase this.name)}}. See the inner error for additional details',
          '{{lowercase (pascalcase this.name)}}',
          'removeTags',
          {id: {{lowercase (pascalcase this.name)}}Id},
          err
        );
        e.publish('', constants.ERROR_SEVERITY.ERROR);
        throw e;
      }
    }
  }
}