import {Types as mongooseTypes, Model} from 'mongoose';
import {IQueryResult, database as databaseTypes} from '@glyphx/types';
import {I{{pascalcase this.name}}Methods} from './i{{pascalcase this.name}}Methods';
import {I{{pascalcase this.name}}CreateInput} from './i{{pascalcase this.name}}CreateInput';

export interface I{{pascalcase this.name}}StaticMethods
  extends Model<databaseTypes.I{{pascalcase this.name}}, {}, I{{pascalcase this.name}}Methods> {
  {{lowercase this.name}}IdExists({{lowercase this.name}}Id: mongooseTypes.ObjectId): Promise<boolean>;
  all{{pascalcase this.name}}IdsExist({{lowercase this.name}}Ids: mongooseTypes.ObjectId[]): Promise<boolean>;
  create{{pascalcase this.name}}(input: I{{pascalcase this.name}}CreateInput): Promise<databaseTypes.I{{pascalcase this.name}}>;
  get{{pascalcase this.name}}ById({{lowercase this.name}}Id: mongooseTypes.ObjectId): Promise<databaseTypes.I{{pascalcase this.name}}>;
  query{{pascalcase this.name}}s(filter?: Record<string, unknown>, page?: number, itemsPerPage?: number): Promise<IQueryResult<databaseTypes.I{{pascalcase this.name}}>>;
  update{{pascalcase this.name}}WithFilter(filter: Record<string, unknown>, {{lowercase this.name}}: Omit<Partial<databaseTypes.I{{pascalcase this.name}}>, '_id'>): Promise<databaseTypes.I{{pascalcase this.name}}>;
  update{{pascalcase this.name}}ById({{lowercase this.name}}Id: mongooseTypes.ObjectId, {{lowercase this.name}}: Omit<Partial<databaseTypes.I{{pascalcase this.name}}>, '_id'>): Promise<databaseTypes.I{{pascalcase this.name}}>;
  delete{{pascalcase this.name}}ById({{lowercase this.name}}Id: mongooseTypes.ObjectId): Promise<void>;
  validateUpdateObject({{lowercase this.name}}: Omit<Partial<databaseTypes.I{{pascalcase this.name}}>, '_id'>): Promise<void>;
  {{#each properties}}
    {{#if (isOneToMany this.relationType)}}
      add{{pluralize (pascalcase this.name)}}(
        {{lowercase (pascalcase ../this.name)}}Id: mongooseTypes.ObjectId, 
        {{pluralize (camelcase this.referenceTable)}}: (databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId)[]
      ): Promise<databaseTypes.I{{pascalcase ../this.name}}>;
      remove{{pluralize (pascalcase this.name)}}(
        {{lowercase (pascalcase ../this.name)}}Id: mongooseTypes.ObjectId, 
        {{pluralize (camelcase this.referenceTable)}}: (databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId)[]
      ): Promise<databaseTypes.I{{pascalcase ../this.name}}>;
      validate{{pluralize (pascalcase this.name)}}(
        {{pluralize (camelcase this.referenceTable)}}: (databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId)[]
      ): Promise<mongooseTypes.ObjectId[]>;
    {{else if (isOneToOne this.relationType)}}
      add{{pascalcase this.name}}(
        {{lowercase (pascalcase ../this.name)}}Id: mongooseTypes.ObjectId, 
        {{camelcase this.referenceTable}}: databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId
      ): Promise<databaseTypes.I{{pascalcase ../this.name}}>;
      remove{{pascalcase this.name}}(
        {{lowercase (pascalcase ../this.name)}}Id: mongooseTypes.ObjectId, 
        {{camelcase this.referenceTable}}: databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId
      ): Promise<databaseTypes.I{{pascalcase ../this.name}}>;
      validate{{pascalcase this.name}}(
        {{camelcase this.referenceTable}}: databaseTypes.I{{pascalcase this.referenceTable}} | mongooseTypes.ObjectId
      ): Promise<mongooseTypes.ObjectId>;
    {{/if}}
  {{/each}}
}
