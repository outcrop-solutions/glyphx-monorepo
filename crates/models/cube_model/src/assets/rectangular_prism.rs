use crate::assets::shape_vertex::ShapeVertex;
use cgmath::{Matrix4, Vector4};

fn create_normal_vertices() -> Vec<[f32; 3]> {
    vec![
        [0.0, 0.0, 0.0],
        [-0.0000, -1.0000, -0.0000],
        [-0.0000, 1.0000, -0.0000],
        [0.7071, -0.0000, 0.7071],
        [-0.0000, -0.0000, 1.0000],
        [0.7071, -0.0000, -0.7071],
        [1.0000, -0.0000, -0.0000],
        [-0.7071, -0.0000, -0.7071],
        [-0.0000, -0.0000, -1.0000],
        [-0.7071, -0.0000, 0.7071],
        [-1.0000, -0.0000, -0.0000],
        [0.6452, 0.4093, 0.6452],
        [0.2436, -0.9388, 0.2436],
        [-0.0000, 0.4093, 0.9124],
        [-0.0000, -0.9388, 0.3445],
        [-0.6452, 0.4093, 0.6452],
        [-0.2436, -0.9388, 0.2436],
        [-0.9124, 0.4093, -0.0000],
        [-0.3445, -0.9388, -0.0000],
        [-0.6452, 0.4093, -0.6452],
        [-0.2436, -0.9388, -0.2436],
        [-0.0000, 0.4093, -0.9124],
        [-0.0000, -0.9388, -0.3445],
        [0.6452, 0.4093, -0.6452],
        [0.2436, -0.9388, -0.2436],
        [0.9124, 0.4093, -0.0000],
        [0.3445, -0.9388, -0.0000],
        [-0.6452, -0.4093, 0.6452],
        [-0.2436, 0.9388, 0.2436],
        [-0.0000, -0.4093, 0.9124],
        [-0.0000, 0.9388, 0.3445],
        [0.6452, -0.4093, 0.6452],
        [0.2436, 0.9388, 0.2436],
        [0.9124, -0.4093, -0.0000],
        [0.3445, 0.9388, -0.0000],
        [0.6452, -0.4093, -0.6452],
        [0.2436, 0.9388, -0.2436],
        [-0.0000, -0.4093, -0.9124],
        [-0.0000, 0.9388, -0.3445],
        [-0.6452, -0.4093, -0.6452],
        [-0.2436, 0.9388, -0.2436],
        [-0.9124, -0.4093, -0.0000],
        [-0.3445, 0.9388, -0.0000],
        [0.0101, -0.0000, -0.9999],
        [0.9610, -0.0000, 0.2766],
        [-0.3240, 0.8889, -0.3240],
        [0.6472, 0.4027, 0.6472],
        [-0.9999, -0.0000, 0.0101],
        [0.2766, -0.0000, 0.9610],
        [-0.3240, -0.8889, -0.3240],
        [0.6472, -0.4027, 0.6472],
        [-0.7142, -0.0000, -0.6999],
        [-0.4839, -0.0000, 0.8751],
        [-0.0000, -0.8889, -0.4582],
        [-0.0000, -0.4027, 0.9153],
        [0.7142, -0.0000, -0.6999],
        [0.4839, -0.0000, 0.8751],
        [-0.0000, 0.8889, -0.4582],
        [-0.0000, 0.4027, 0.9153],
        [-0.9999, -0.0000, -0.0101],
        [0.2766, -0.0000, -0.9610],
        [-0.3240, 0.8889, 0.3240],
        [0.6472, 0.4027, -0.6472],
        [0.0101, -0.0000, 0.9999],
        [0.9610, -0.0000, -0.2766],
        [-0.3240, -0.8889, 0.3240],
        [0.6472, -0.4027, -0.6472],
        [-0.6999, -0.0000, 0.7142],
        [0.8751, -0.0000, 0.4839],
        [-0.4582, -0.8889, -0.0000],
        [0.9153, -0.4027, -0.0000],
        [-0.6999, -0.0000, -0.7142],
        [0.8751, -0.0000, -0.4839],
        [-0.4582, 0.8889, -0.0000],
        [0.9153, 0.4027, -0.0000],
        [-0.0101, -0.0000, 0.9999],
        [-0.9610, -0.0000, -0.2766],
        [0.3240, 0.8889, 0.3240],
        [-0.6472, 0.4027, -0.6472],
        [0.9999, -0.0000, -0.0101],
        [-0.2766, -0.0000, -0.9610],
        [0.3240, -0.8889, 0.3240],
        [-0.6472, -0.4027, -0.6472],
        [0.7142, -0.0000, 0.6999],
        [0.4839, -0.0000, -0.8751],
        [-0.0000, -0.8889, 0.4582],
        [-0.0000, -0.4027, -0.9153],
        [-0.7142, -0.0000, 0.6999],
        [-0.4839, -0.0000, -0.8751],
        [-0.0000, 0.8889, 0.4582],
        [-0.0000, 0.4027, -0.9153],
        [-0.0101, -0.0000, -0.9999],
        [-0.9610, -0.0000, 0.2766],
        [0.3240, -0.8889, -0.3240],
        [-0.6472, -0.4027, 0.6472],
        [0.9999, -0.0000, 0.0101],
        [-0.2766, -0.0000, 0.9610],
        [0.3240, 0.8889, -0.3240],
        [-0.6472, 0.4027, 0.6472],
        [0.6999, -0.0000, -0.7142],
        [-0.8751, -0.0000, -0.4839],
        [0.4582, -0.8889, -0.0000],
        [-0.9153, -0.4027, -0.0000],
        [0.6999, -0.0000, 0.7142],
        [-0.8751, -0.0000, 0.4839],
        [0.4582, 0.8889, -0.0000],
        [-0.9153, 0.4027, -0.0000],
    ]
}

fn create_normal_indices() -> Vec<u32> {
    vec![
        1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10,
        10, 11, 11, 11, 13, 13, 13, 15, 15, 15, 17, 17, 17, 19, 19, 19, 21, 21, 21, 23, 23, 23, 25,
        25, 25, 27, 27, 27, 29, 29, 29, 31, 31, 31, 33, 33, 33, 35, 35, 35, 37, 37, 37, 39, 39, 39,
        41, 41, 41, 43, 43, 43, 45, 45, 45, 47, 47, 47, 49, 49, 49, 51, 51, 51, 53, 53, 53, 55, 55,
        55, 57, 57, 57, 59, 59, 59, 61, 61, 61, 63, 63, 63, 65, 65, 65, 67, 67, 67, 69, 69, 69, 71,
        71, 71, 73, 73, 73, 75, 75, 75, 77, 77, 77, 79, 79, 79, 81, 81, 81, 83, 83, 83, 85, 85, 85,
        87, 87, 87, 89, 89, 89, 91, 91, 91, 93, 93, 93, 95, 95, 95, 97, 97, 97, 99, 99, 99, 101,
        101, 101, 103, 103, 103, 105, 105, 105, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8,
        8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 13, 13, 13, 15, 15, 15, 17, 17, 17, 19, 19, 19, 21, 21,
        21, 23, 23, 23, 25, 25, 25, 27, 27, 27, 29, 29, 29, 31, 31, 31, 33, 33, 33, 35, 35, 35, 37,
        37, 37, 39, 39, 39, 41, 41, 41, 43, 43, 43, 45, 45, 45, 47, 47, 47, 49, 49, 49, 51, 51, 51,
        53, 53, 53, 55, 55, 55, 57, 57, 57, 59, 59, 59, 61, 61, 61, 63, 63, 63, 65, 65, 65, 67, 67,
        67, 69, 69, 69, 71, 71, 71, 73, 73, 73, 75, 75, 75, 77, 77, 77, 79, 79, 79, 81, 81, 81, 83,
        83, 83, 85, 85, 85, 87, 87, 87, 89, 89, 89, 91, 91, 91, 93, 93, 93, 95, 95, 95, 97, 97, 97,
        99, 99, 99, 101, 101, 101, 103, 103, 103, 105, 105, 105,
    ]
}

fn create_normal_indices_edges() -> Vec<u32> {
    vec![
        12, 12, 12, 14, 14, 14, 16, 16, 16, 18, 18, 18, 20, 20, 20, 22, 22, 22, 24, 24, 24, 26, 26,
        26, 28, 28, 28, 30, 30, 30, 32, 32, 32, 34, 34, 34, 36, 36, 36, 38, 38, 38, 40, 40, 40, 42,
        42, 42, 44, 44, 44, 46, 46, 46, 48, 48, 48, 50, 50, 50, 52, 52, 52, 54, 54, 54, 56, 56, 56,
        58, 58, 58, 60, 60, 60, 62, 62, 62, 64, 64, 64, 66, 66, 66, 68, 68, 68, 70, 70, 70, 72, 72,
        72, 74, 74, 74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 82, 84, 84, 84, 86, 86, 86, 88,
        88, 88, 90, 90, 90, 92, 92, 92, 94, 94, 94, 96, 96, 96, 98, 98, 98, 100, 100, 100, 102,
        102, 102, 104, 104, 104, 106, 106, 106, 12, 12, 12, 14, 14, 14, 16, 16, 16, 18, 18, 18, 20,
        20, 20, 22, 22, 22, 24, 24, 24, 26, 26, 26, 28, 28, 28, 30, 30, 30, 32, 32, 32, 34, 34, 34,
        36, 36, 36, 38, 38, 38, 40, 40, 40, 42, 42, 42, 44, 44, 44, 46, 46, 46, 48, 48, 48, 50, 50,
        50, 52, 52, 52, 54, 54, 54, 56, 56, 56, 58, 58, 58, 60, 60, 60, 62, 62, 62, 64, 64, 64, 66,
        66, 66, 68, 68, 68, 70, 70, 70, 72, 72, 72, 74, 74, 74, 76, 76, 76, 78, 78, 78, 80, 80, 80,
        82, 82, 82, 84, 84, 84, 86, 86, 86, 88, 88, 88, 90, 90, 90, 92, 92, 92, 94, 94, 94, 96, 96,
        96, 98, 98, 98, 100, 100, 100, 102, 102, 102, 104, 104, 104, 106, 106, 106,
    ]
}
fn scale_vertex_point(point: f32, scale: f32) -> f32 {
    let abs_point = point.abs();
    let pos_pct = abs_point / 1.0;
    let scaled_point = pos_pct * scale;
    if point < 0.0 {
        -scaled_point
    } else {
        scaled_point
    }
}

fn get_vertice_min_max(vertices: &Vec<[f32; 3]>) -> ([f32; 3], [f32; 3]) {
    let mut min = [f32::MAX; 3];
    let mut max = [f32::MIN; 3];
    for vertex in vertices {
        for i in 0..3 {
            if vertex[i] < min[i] {
                min[i] = vertex[i];
            }
            if vertex[i] > max[i] {
                max[i] = vertex[i];
            }
        }
    }
    (min, max)
}
///Like other shapes, I am hardcoding the models in code directly to save us the hassle of
///publishing the models and fetching them with reqwest.  This function defines the verticies for a
///cube centered at 0, 0, 0.
fn create_rectangular_prism_vertices(width: f32, height: f32) -> Vec<[f32; 3]> {
    let base_vertices = vec![
        //Don't forget our models indexes from
        //1 not 0
        [0.0, 0.0, 0.0],
        [0.804095, 1.000000, 1.000000],
        [1.000000, 1.000000, 0.804095],
        [1.000000, -1.000000, 0.804095],
        [0.804095, -1.000000, 1.000000],
        [1.000000, 1.000000, -0.804095],
        [0.804095, 1.000000, -1.000000],
        [0.804095, -1.000000, -1.000000],
        [1.000000, -1.000000, -0.804095],
        [-0.804095, 1.000000, -1.000000],
        [-1.000000, 1.000000, -0.804095],
        [-1.000000, -1.000000, -0.804095],
        [-0.804095, -1.000000, -1.000000],
        [-1.000000, 1.000000, 0.804095],
        [-0.804095, 1.000000, 1.000000],
        [-0.804095, -1.000000, 1.000000],
        [-1.000000, -1.000000, 0.804095],
        [0.794094, 0.978786, 0.975856],
        [0.814298, 1.021643, 1.024632],
        [0.975856, 0.978786, 0.794094],
        [1.024632, 1.021643, 0.814298],
        [0.975856, -0.978786, 0.794094],
        [1.024632, -1.021643, 0.814298],
        [0.794094, -0.978786, 0.975856],
        [0.814298, -1.021643, 1.024632],
        [0.975856, 0.978786, -0.794094],
        [1.024632, 1.021643, -0.814298],
        [0.794094, 0.978786, -0.975856],
        [0.814298, 1.021643, -1.024632],
        [0.794094, -0.978786, -0.975856],
        [0.814298, -1.021643, -1.024632],
        [0.975856, -0.978786, -0.794094],
        [1.024632, -1.021643, -0.814298],
        [-0.794094, 0.978786, -0.975856],
        [-0.814298, 1.021643, -1.024632],
        [-0.975856, 0.978786, -0.794094],
        [-1.024632, 1.021643, -0.814298],
        [-0.975856, -0.978786, -0.794094],
        [-1.024632, -1.021643, -0.814298],
        [-0.794094, -0.978786, -0.975856],
        [-0.814298, -1.021643, -1.024632],
        [-0.975856, 0.978786, 0.794094],
        [-1.024632, 1.021643, 0.814298],
        [-0.794094, 0.978786, 0.975856],
        [-0.814298, 1.021643, 1.024632],
        [-0.794094, -0.978786, 0.975856],
        [-0.814298, -1.021643, 1.024632],
        [-0.975856, -0.978786, 0.794094],
        [-1.024632, -1.021643, 0.814298],
        [-0.966244, -1.000214, -0.790113],
        [-0.790113, -1.000214, -0.966244],
        [0.790113, -1.000214, -0.966244],
        [0.966244, -1.000214, -0.790113],
        [0.966244, -1.000214, 0.790113],
        [0.790113, -1.000214, 0.966244],
        [-0.790113, -1.000214, 0.966244],
        [-0.966244, -1.000214, 0.790113],
        [0.966244, 1.000214, -0.790113],
        [0.790113, 1.000214, -0.966244],
        [-0.790113, 1.000214, -0.966244],
        [-0.966244, 1.000214, -0.790113],
        [-0.966244, 1.000214, 0.790113],
        [-0.790113, 1.000214, 0.966244],
        [0.790113, 1.000214, 0.966244],
        [0.966244, 1.000214, 0.790113],
        [0.828238, 0.966214, 0.976202],
        [0.828238, -0.966214, 0.976202],
        [0.976202, -0.966214, 0.828238],
        [0.976202, 0.966214, 0.828238],
        [0.770196, -0.966214, 1.000244],
        [0.770196, 0.966214, 1.000244],
        [-0.770196, 0.966214, 1.000244],
        [-0.770196, -0.966214, 1.000244],
        [0.976202, 0.966214, -0.828238],
        [0.976202, -0.966214, -0.828238],
        [0.828238, -0.966214, -0.976202],
        [0.828238, 0.966214, -0.976202],
        [1.000244, -0.966214, -0.770196],
        [1.000244, 0.966214, -0.770196],
        [1.000244, 0.966214, 0.770196],
        [1.000244, -0.966214, 0.770196],
        [-0.828238, 0.966214, -0.976202],
        [-0.828238, -0.966214, -0.976202],
        [-0.976202, -0.966214, -0.828238],
        [-0.976202, 0.966214, -0.828238],
        [-0.770196, -0.966214, -1.000244],
        [-0.770196, 0.966214, -1.000244],
        [0.770196, 0.966214, -1.000244],
        [0.770196, -0.966214, -1.000244],
        [-0.828238, -0.966214, 0.976202],
        [-0.828238, 0.966214, 0.976202],
        [-0.976202, 0.966214, 0.828238],
        [-0.976202, -0.966214, 0.828238],
        [-1.000244, -0.966214, 0.770196],
        [-1.000244, 0.966214, 0.770196],
        [-1.000244, 0.966214, -0.770196],
        [-1.000244, -0.966214, -0.770196],
    ];
    let min_max = get_vertice_min_max(&base_vertices);
    let cube_start_size = min_max.1[0] - min_max.0[0];
    let x_z_scale = width / cube_start_size;
    let scale_matrix = Matrix4::from_scale(x_z_scale);
    //How far will our ys move after scaling.  We have to scale the cube first so that the bevels
    //scale, then we can move the points up or down the y axis so that our cube is longer.
    let y_offset = (cube_start_size - width) / 2.0;
    let mut vertices = Vec::new();
    for vertex in base_vertices {
        let vec4_pos = Vector4::new(vertex[0], vertex[1], vertex[2], 1.0);

        let scaled = scale_matrix * vec4_pos;
        let y_pos = if scaled.y < 0.0 {
            scaled.y - y_offset
        } else {
            scaled.y + y_offset
        } + min_max.1[1];
        vertices.push([scaled.x, y_pos, scaled.z]);
    }
    vertices
}

///This function will return the indicies to draw a cube.  Like our other assets, this function
///will hardcode the index data to save us the hassle of publishing the models and fetching them
///from the web.
fn create_rectangular_prism_indices() -> Vec<u32> {
    vec![
        8, 4, 16, 10, 14, 2, 4, 2, 1, 1, 15, 4, 8, 6, 5, 5, 3, 8, 12, 10, 9, 9, 7, 12, 14, 16, 15,
        13, 11, 16, 50, 37, 49, 51, 39, 50, 52, 29, 51, 53, 31, 52, 54, 21, 53, 55, 23, 54, 56, 45,
        55, 49, 47, 56, 58, 25, 57, 59, 27, 58, 60, 33, 59, 61, 35, 60, 62, 41, 61, 63, 43, 62, 64,
        17, 63, 57, 19, 64, 66, 17, 65, 67, 23, 66, 68, 21, 67, 65, 19, 68, 70, 23, 69, 71, 17, 70,
        72, 43, 71, 69, 45, 72, 74, 25, 73, 75, 31, 74, 76, 29, 75, 73, 27, 76, 78, 31, 77, 79, 25,
        78, 80, 19, 79, 77, 21, 80, 82, 33, 81, 83, 39, 82, 84, 37, 83, 81, 35, 84, 86, 39, 85, 87,
        33, 86, 88, 27, 87, 85, 29, 88, 90, 45, 89, 91, 43, 90, 92, 41, 91, 89, 47, 92, 94, 47, 93,
        95, 41, 94, 96, 35, 95, 93, 37, 96, 16, 11, 12, 12, 7, 8, 8, 3, 4, 4, 15, 16, 16, 12, 8, 2,
        5, 6, 6, 9, 10, 10, 13, 14, 14, 1, 2, 2, 6, 10, 4, 3, 2, 1, 14, 15, 8, 7, 6, 5, 2, 3, 12,
        11, 10, 9, 6, 7, 14, 13, 16, 13, 10, 11, 50, 39, 37, 51, 29, 39, 52, 31, 29, 53, 21, 31,
        54, 23, 21, 55, 45, 23, 56, 47, 45, 49, 37, 47, 58, 27, 25, 59, 33, 27, 60, 35, 33, 61, 41,
        35, 62, 43, 41, 63, 17, 43, 64, 19, 17, 57, 25, 19, 66, 23, 17, 67, 21, 23, 68, 19, 21, 65,
        17, 19, 70, 17, 23, 71, 43, 17, 72, 45, 43, 69, 23, 45, 74, 31, 25, 75, 29, 31, 76, 27, 29,
        73, 25, 27, 78, 25, 31, 79, 19, 25, 80, 21, 19, 77, 31, 21, 82, 39, 33, 83, 37, 39, 84, 35,
        37, 81, 33, 35, 86, 33, 39, 87, 27, 33, 88, 29, 27, 85, 39, 29, 90, 43, 45, 91, 41, 43, 92,
        47, 41, 89, 45, 47, 94, 41, 47, 95, 35, 41, 96, 37, 35, 93, 47, 37,
    ]
}

fn create_rectangular_prism_edges() -> Vec<u32> {
    vec![
        49, 40, 50, 51, 40, 30, 51, 32, 52, 53, 32, 22, 53, 24, 54, 55, 24, 46, 55, 48, 56, 49, 48,
        38, 57, 28, 58, 59, 28, 34, 59, 36, 60, 61, 36, 42, 61, 44, 62, 63, 44, 18, 63, 20, 64, 57,
        20, 26, 65, 24, 66, 66, 22, 67, 67, 20, 68, 68, 18, 65, 69, 18, 70, 70, 44, 71, 71, 46, 72,
        72, 24, 69, 73, 32, 74, 74, 30, 75, 75, 28, 76, 76, 26, 73, 77, 26, 78, 78, 20, 79, 79, 22,
        80, 80, 32, 77, 81, 40, 82, 82, 38, 83, 83, 36, 84, 84, 34, 81, 85, 34, 86, 86, 28, 87, 87,
        30, 88, 88, 40, 85, 89, 44, 90, 90, 42, 91, 91, 48, 92, 92, 46, 89, 93, 42, 94, 94, 36, 95,
        95, 38, 96, 96, 48, 93, 49, 38, 40, 51, 50, 40, 51, 30, 32, 53, 52, 32, 53, 22, 24, 55, 54,
        24, 55, 46, 48, 49, 56, 48, 57, 26, 28, 59, 58, 28, 59, 34, 36, 61, 60, 36, 61, 42, 44, 63,
        62, 44, 63, 18, 20, 57, 64, 20, 65, 18, 24, 66, 24, 22, 67, 22, 20, 68, 20, 18, 69, 24, 18,
        70, 18, 44, 71, 44, 46, 72, 46, 24, 73, 26, 32, 74, 32, 30, 75, 30, 28, 76, 28, 26, 77, 32,
        26, 78, 26, 20, 79, 20, 22, 80, 22, 32, 81, 34, 40, 82, 40, 38, 83, 38, 36, 84, 36, 34, 85,
        40, 34, 86, 34, 28, 87, 28, 30, 88, 30, 40, 89, 46, 44, 90, 44, 42, 91, 42, 48, 92, 48, 46,
        93, 48, 42, 94, 42, 36, 95, 36, 38, 96, 38, 48,
    ]
}

fn reconcile_shape_vertices(
    vertices: &Vec<[f32; 3]>,
    indices: &Vec<u32>,
    edge_indices: &Vec<u32>,
    normals: &Vec<[f32; 3]>,
    normal_indices: &Vec<u32>,
    edge_normal_indices: &Vec<u32>,
) -> Vec<ShapeVertex> {
    let mut shape_vertices = Vec::new();

    let mut i = 0;
    while i < indices.len() {
        let vertex = vertices[indices[i] as usize];
        let normal = normals[normal_indices[i] as usize];
        shape_vertices.push(ShapeVertex {
            position_vertex: vertex,
            color: 0,
            normal,
        });
        i += 1;
    }

    let mut i = 0;
    while i < edge_indices.len() {
        let vertex = vertices[edge_indices[i] as usize];
        let normal = normals[edge_normal_indices[i] as usize];
        shape_vertices.push(ShapeVertex {
            position_vertex: vertex,
            color: 1,
            normal,
        });
        i += 1;
    }

    shape_vertices
}

pub fn create_rectangular_prism(width: f32, height: f32) -> Vec<ShapeVertex> {
    let vertices = create_rectangular_prism_vertices(width, height);
    let indices = create_rectangular_prism_indices();
    let edge_indices = create_rectangular_prism_edges();

    let normals = create_normal_vertices();
    let normal_indices = create_normal_indices();
    let normal_indices_edge = create_normal_indices_edges();
    reconcile_shape_vertices(
        &vertices,
        &indices,
        &edge_indices,
        &normals,
        &normal_indices,
        &normal_indices_edge,
    )
}
