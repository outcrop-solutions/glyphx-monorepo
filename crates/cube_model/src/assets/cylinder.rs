
// Define a function to create the vertices of the cylinder
fn create_cylinder_vertices(height: f32, radius: f32) -> Vec<[f32; 3]> {
let  base_vertexes: Vec<[f32; 3]> = vec![
    //I am importing this from Blender from .obj format.
    //indexing is 1 based not 0 based so I am adding
    //a dummy vertex instead of updating the indexes.
    [0.0, 0.0, 0.0],
    //These are the sides of our cone.
    [0.500000, 0.000000, 0.000000],
    [0.500000, 0.000000, 1.000000],
    [0.490393, -0.097545, 0.000000],
    [0.490393, -0.097545, 1.000000],
    [0.461940, -0.191342, 0.000000],
    [0.461940, -0.191342, 1.000000],
    [0.415735, -0.277785, 0.000000],
    [0.415735, -0.277785, 1.000000],
    [0.353553, -0.353553, 0.000000],
    [0.353553, -0.353553, 1.000000],
    [0.277785, -0.415735, 0.000000],
    [0.277785, -0.415735, 1.000000],
    [0.191342, -0.461940, 0.000000],
    [0.191342, -0.461940, 1.000000],
    [0.097545, -0.490393, 0.000000],
    [0.097545, -0.490393, 1.000000],
    [0.000000, -0.500000, 0.000000],
    [0.000000, -0.500000, 1.000000],
    [-0.097545, -0.490393, 0.000000],
    [-0.097545, -0.490393, 1.000000],
    [-0.191342, -0.461940, 0.000000],
    [-0.191342, -0.461940, 1.000000],
    [-0.277785, -0.415735, 0.000000],
    [-0.277785, -0.415735, 1.000000],
    [-0.353553, -0.353553, 0.000000],
    [-0.353553, -0.353553, 1.000000],
    [-0.415735, -0.277785, 0.000000],
    [-0.415735, -0.277785, 1.000000],
    [-0.461940, -0.191342, 0.000000],
    [-0.461940, -0.191342, 1.000000],
    [-0.490393, -0.097545, 0.000000],
    [-0.490393, -0.097545, 1.000000],
    [-0.500000, 0.000000, 0.000000],
    [-0.500000, 0.000000, 1.000000],
    [-0.490393, 0.097545, 0.000000],
    [-0.490393, 0.097545, 1.000000],
    [-0.461940, 0.191342, 0.000000],
    [-0.461940, 0.191342, 1.000000],
    [-0.415735, 0.277785, 0.000000],
    [-0.415735, 0.277785, 1.000000],
    [-0.353553, 0.353554, 0.000000],
    [-0.353553, 0.353554, 1.000000],
    [-0.277785, 0.415735, 0.000000],
    [-0.277785, 0.415735, 1.000000],
    [-0.191341, 0.461940, 0.000000],
    [-0.191341, 0.461940, 1.000000],
    [-0.097545, 0.490393, 0.000000],
    [-0.097545, 0.490393, 1.000000],
    [0.000000, 0.500000, 0.000000],
    [0.000000, 0.500000, 1.000000],
    [0.097546, 0.490393, 0.000000],
    [0.097546, 0.490393, 1.000000],
    [0.191342, 0.461940, 0.000000],
    [0.191342, 0.461940, 1.000000],
    [0.277786, 0.415734, 0.000000],
    [0.277786, 0.415734, 1.000000],
    [0.353554, 0.353553, 0.000000],
    [0.353554, 0.353553, 1.000000],
    [0.415735, 0.277784, 0.000000],
    [0.415735, 0.277784, 1.000000],
    [0.461940, 0.191341, 0.000000],
    [0.461940, 0.191341, 1.000000],
    [0.490393, 0.097544, 0.000000],
    [0.490393, 0.097544, 1.000000],
    //These are the top and bottom faces.
    [0.500000, 0.000000, 0.000000],
    [0.500000, 0.000000, 1.000000],
    [0.490393, -0.097545, 0.000000],
    [0.490393, -0.097545, 1.000000],
    [0.461940, -0.191342, 0.000000],
    [0.461940, -0.191342, 1.000000],
    [0.415735, -0.277785, 0.000000],
    [0.415735, -0.277785, 1.000000],
    [0.353553, -0.353553, 0.000000],
    [0.353553, -0.353553, 1.000000],
    [0.277785, -0.415735, 0.000000],
    [0.277785, -0.415735, 1.000000],
    [0.191342, -0.461940, 0.000000],
    [0.191342, -0.461940, 1.000000],
    [0.097545, -0.490393, 0.000000],
    [0.097545, -0.490393, 1.000000],
    [0.000000, -0.500000, 0.000000],
    [0.000000, -0.500000, 1.000000],
    [-0.097545, -0.490393, 0.000000],
    [-0.097545, -0.490393, 1.000000],
    [-0.191342, -0.461940, 0.000000],
    [-0.191342, -0.461940, 1.000000],
    [-0.277785, -0.415735, 0.000000],
    [-0.277785, -0.415735, 1.000000],
    [-0.353553, -0.353553, 0.000000],
    [-0.353553, -0.353553, 1.000000],
    [-0.415735, -0.277785, 0.000000],
    [-0.415735, -0.277785, 1.000000],
    [-0.461940, -0.191342, 0.000000],
    [-0.461940, -0.191342, 1.000000],
    [-0.490393, -0.097545, 0.000000],
    [-0.490393, -0.097545, 1.000000],
    [-0.500000, 0.000000, 0.000000],
    [-0.500000, 0.000000, 1.000000],
    [-0.490393, 0.097545, 0.000000],
    [-0.490393, 0.097545, 1.000000],
    [-0.461940, 0.191342, 0.000000],
    [-0.461940, 0.191342, 1.000000],
    [-0.415735, 0.277785, 0.000000],
    [-0.415735, 0.277785, 1.000000],
    [-0.353553, 0.353554, 0.000000],
    [-0.353553, 0.353554, 1.000000],
    [-0.277785, 0.415735, 0.000000],
    [-0.277785, 0.415735, 1.000000],
    [-0.191341, 0.461940, 0.000000],
    [-0.191341, 0.461940, 1.000000],
    [-0.097545, 0.490393, 0.000000],
    [-0.097545, 0.490393, 1.000000],
    [0.000000, 0.500000, 0.000000],
    [0.000000, 0.500000, 1.000000],
    [0.097546, 0.490393, 0.000000],
    [0.097546, 0.490393, 1.000000],
    [0.191342, 0.461940, 0.000000],
    [0.191342, 0.461940, 1.000000],
    [0.277786, 0.415734, 0.000000],
    [0.277786, 0.415734, 1.000000],
    [0.353554, 0.353553, 0.000000],
    [0.353554, 0.353553, 1.000000],
    [0.415735, 0.277784, 0.000000],
    [0.415735, 0.277784, 1.000000],
    [0.461940, 0.191341, 0.000000],
    [0.461940, 0.191341, 1.000000],
    [0.490393, 0.097544, 0.000000],
    [0.490393, 0.097544, 1.000000],
];
    let mut vertices: Vec<[f32; 3]> = Vec::new();
    //our radius is .5 so we need to adjust our scale.
    let x_y_scale = 0.5 / radius;
    //Our height is 1, so we need to adjust our height
    let z_scale = 1.0 / height;
    unsafe {
        for vertex in base_vertexes.iter() {
            vertices.push([
                vertex[0] / x_y_scale,
                vertex[1] / x_y_scale,
                vertex[2] / z_scale,
            ]);
        }
    }
    vertices
}

/// Creates the indices for the sides and caps of the cylinder.
/// Like the vertexes, I am brining these in from Blender.
/// since it is a small set that will not change, I am not
/// going to bother with a function to load them.  This will
/// make wasm integration simpler.
fn create_cylinder_indices() -> Vec<u32> {
    let mut indices: Vec<u32> = vec![
        //Our sides
        38, 22, 54, 31, 47, 15, 6, 4, 2, 2, 64, 6, 62, 60, 58, 58, 56, 54, 54, 52, 50, 50, 48, 54,
        46, 44, 38, 42, 40, 38, 38, 36, 34, 34, 32, 30, 30, 28, 26, 26, 24, 22, 22, 20, 18, 18, 16,
        22, 14, 12, 10, 10, 8, 6, 6, 64, 62, 62, 58, 6, 54, 48, 46, 44, 42, 38, 38, 34, 22, 30, 26,
        22, 22, 16, 14, 14, 10, 22, 6, 58, 54, 54, 46, 38, 34, 30, 22, 22, 10, 6, 6, 54, 22, 63, 1,
        3, 3, 5, 7, 7, 9, 11, 11, 13, 7, 15, 17, 19, 19, 21, 15, 23, 25, 31, 27, 29, 31, 31, 33,
        35, 35, 37, 39, 39, 41, 43, 43, 45, 47, 47, 49, 51, 51, 53, 55, 55, 57, 63, 59, 61, 63, 63,
        3, 15, 7, 13, 15, 15, 21, 23, 25, 27, 31, 31, 35, 47, 39, 43, 47, 47, 51, 63, 57, 59, 63,
        3, 7, 15, 15, 23, 31, 35, 39, 47, 51, 55, 63, 63, 15, 47, //our caps
        66, 67, 65, 68, 69, 67, 70, 71, 69, 72, 73, 71, 74, 75, 73, 76, 77, 75, 78, 79, 77, 80, 81,
        79, 82, 83, 81, 84, 85, 83, 86, 87, 85, 88, 89, 87, 90, 91, 89, 92, 93, 91, 94, 95, 93, 96,
        97, 95, 98, 99, 97, 100, 101, 99, 102, 103, 101, 104, 105, 103, 106, 107, 105, 108, 109,
        107, 110, 111, 109, 112, 113, 111, 114, 115, 113, 116, 117, 115, 118, 119, 117, 120, 121,
        119, 122, 123, 121, 124, 125, 123, 126, 127, 125, 128, 65, 127, 66, 68, 67, 68, 70, 69, 70,
        72, 71, 72, 74, 73, 74, 76, 75, 76, 78, 77, 78, 80, 79, 80, 82, 81, 82, 84, 83, 84, 86, 85,
        86, 88, 87, 88, 90, 89, 90, 92, 91, 92, 94, 93, 94, 96, 95, 96, 98, 97, 98, 100, 99, 100,
        102, 101, 102, 104, 103, 104, 106, 105, 106, 108, 107, 108, 110, 109, 110, 112, 111, 112,
        114, 113, 114, 116, 115, 116, 118, 117, 118, 120, 119, 120, 122, 121, 122, 124, 123, 124,
        126, 125, 126, 128, 127, 128, 66, 65,
    ];
    indices
}

pub fn create_cylinder(height: f32, radius: f32) -> (Vec<[f32; 3]>, Vec<u32>) {
    let vertices = create_cylinder_vertices(height, radius);
    let indices = create_cylinder_indices();
    (vertices, indices)
}
