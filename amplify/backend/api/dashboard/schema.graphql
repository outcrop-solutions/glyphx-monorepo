type Organization
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "orgByOwner", fields: ["owner"]) {
  id: ID!
  name: String!
  slug: String
  members: [String]
  invites: [String]
  addressLine1: String
  addressLine2: String
  city: String
  postalCode: String
  country: String
  subscription: String
  stripeCustomerId: String
  owner: String!
  projects: [Project] @connection(keyName: "byOrg", fields: ["id"])
}

type Project
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "byOrg", fields: ["orgID"])
  @key(name: "projectByAuthor", fields: ["author"]) {
  id: ID!
  name: String!
  slug: String
  description: String
  filePath: String
  expiry: AWSDateTime
  properties: [String]
  url: String
  author: String
  shared: [String]
  files: [String]
  orgID: ID!
  organization: Organization @connection(fields: ["orgID"])
  states: [State] @connection(keyName: "byProject", fields: ["id"])
  filters: [Filter] @connection(keyName: "byProject", fields: ["id"])
  columns: [Column] @connection(keyName: "byProject", fields: ["id"])
}

type State
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "byProject", fields: ["projectID"]) {
  id: ID!
  title: String!
  description: String
  camera: String
  query: String
  projectID: ID!
  project: Project @connection(fields: ["projectID"])
  comments: [Comment] @connection(keyName: "byState", fields: ["id"])
  filters: [StateFilter] @connection(keyName: "byState", fields: ["id"])
}

type StateFilter
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "byState", fields: ["stateID", "filterID"])
  @key(name: "byFilter", fields: ["filterID", "stateID"]) {
  id: ID!
  stateID: ID!
  filterID: ID!
  state: State! @connection(fields: ["stateID"])
  filter: Filter! @connection(fields: ["filterID"])
}

type ColumnFilter
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "byColumn", fields: ["columnID", "filterID"])
  @key(name: "byFilter", fields: ["filterID", "columnID"]) {
  id: ID!
  columnID: ID!
  filterID: ID!
  column: Column! @connection(fields: ["columnID"])
  filter: Filter! @connection(fields: ["filterID"])
}

type Column
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "byProject", fields: ["projectID"]) {
  id: ID!
  name: String!
  min: String
  max: String
  projectID: ID!
  project: Project @connection(fields: ["projectID"])
  filters: [ColumnFilter] @connection(keyName: "byColumn", fields: ["id"])
}

type Filter
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "byProject", fields: ["projectID"]) {
  id: ID!
  name: String!
  projectID: ID!
  project: Project @connection(fields: ["projectID"])
  columns: [ColumnFilter] @connection(keyName: "byFilter", fields: ["id"])
  states: [StateFilter] @connection(keyName: "byFilter", fields: ["id"])
}

type Comment
  @model
  @searchable
  @auth(rules: [{ allow: private }])
  @key(name: "byState", fields: ["stateID", "createdAt"]) {
  id: ID!
  author: String!
  stateID: ID!
  state: State @connection(fields: ["stateID"])
  content: String
  createdAt: String!
}
